"use strict";(self.webpackChunkdoc_v_3=self.webpackChunkdoc_v_3||[]).push([[624],{9040:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var n=t(5893),l=t(3905);const i={title:"Function Documentation",hide_title:!0,customHeadElements:['<link rel="manifest" href="manifest.json" />']},o=void 0,a={id:"CoDroneEDU/Python/page4",title:"Function Documentation",description:"Flight Commands",source:"@site/docs/CoDroneEDU/Python/page4.md",sourceDirName:"CoDroneEDU/Python",slug:"/CoDroneEDU/Python/page4",permalink:"/docs/CoDroneEDU/Python/page4",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CoDroneEDU/Python/page4.md",tags:[],version:"current",frontMatter:{title:"Function Documentation",hide_title:!0,customHeadElements:['<link rel="manifest" href="manifest.json" />']},sidebar:"CoDroneEDU",previous:{title:"Update",permalink:"/docs/CoDroneEDU/Python/page3"},next:{title:"Documents",permalink:"/docs/CoDroneEDU/Documents/"}},d={},s=[{value:"Flight Commands",id:"flight-commands",level:2},{value:"take_off()",id:"take_off",level:3},{value:"land()",id:"land",level:3},{value:"emergency_stop()",id:"emergency_stop",level:3},{value:"hover()",id:"hover",level:3},{value:"move()",id:"move",level:3},{value:"flip()",id:"flip",level:3},{value:"turn_degree()",id:"turn_degree",level:3},{value:"avoid_wall()",id:"avoid_wall",level:3},{value:"Flight Variables",id:"flight-variables",level:2},{value:"Status Checkers",id:"status-checkers",level:2},{value:"code_is_running()",id:"code_is_running",level:3},{value:"Lights",id:"lights",level:2},{value:"Sensors",id:"sensors",level:2},{value:"get_range()",id:"get_range",level:3},{value:"get_angle()",id:"get_angle",level:3},{value:"get_gyro()",id:"get_gyro",level:3},{value:"get_accel()",id:"get_accel",level:3},{value:"get_pos()",id:"get_pos",level:3},{value:"get_battery()",id:"get_battery",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Discription",id:"discription",level:4},{value:"Returns",id:"returns",level:4},{value:"Example Code",id:"example-code",level:4},{value:"get_bottom_range()",id:"get_bottom_range",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"Discription",id:"discription-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"get_temperature()",id:"get_temperature",level:3},{value:"get_elevation",id:"get_elevation",level:3},{value:"get_color()",id:"get_color",level:3},{value:"get_hsvl()",id:"get_hsvl",level:3},{value:"get_state_data()",id:"get_state_data",level:3},{value:"reset_sensor()",id:"reset_sensor",level:3},{value:"Sound",id:"sound",level:2},{value:"drone_buzzer()",id:"drone_buzzer",level:3},{value:"controller_buzzer()",id:"controller_buzzer",level:3},{value:"drone_buzzer_hertz()",id:"drone_buzzer_hertz",level:3},{value:"controller_buzzer_herts()",id:"controller_buzzer_herts",level:3},{value:"Screen",id:"screen",level:2},{value:"controller_draw_line()",id:"controller_draw_line",level:3},{value:"controller_draw_string()",id:"controller_draw_string",level:3},{value:"controller_draw_rectangle()",id:"controller_draw_rectangle",level:3},{value:"controller_draw_square()",id:"controller_draw_square",level:3},{value:"controller_draw_point()",id:"controller_draw_point",level:3},{value:"controller_clear_screen()",id:"controller_clear_screen",level:3}];function c(e){const r={br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,l.ah)(),...e.components};return(0,n.jsxs)("div",{className:"level3_body",children:[(0,n.jsx)(r.h2,{id:"flight-commands",children:"Flight Commands"}),(0,n.jsx)(r.h3,{id:"take_off",children:"take_off()"}),(0,n.jsx)(r.h3,{id:"land",children:"land()"}),(0,n.jsx)(r.h3,{id:"emergency_stop",children:"emergency_stop()"}),(0,n.jsx)(r.h3,{id:"hover",children:"hover()"}),(0,n.jsx)(r.h3,{id:"move",children:"move()"}),(0,n.jsx)(r.h3,{id:"flip",children:"flip()"}),(0,n.jsx)(r.h3,{id:"turn_degree",children:"turn_degree()"}),(0,n.jsx)(r.h3,{id:"avoid_wall",children:"avoid_wall()"}),(0,n.jsx)(r.h2,{id:"flight-variables",children:"Flight Variables"}),(0,n.jsx)(r.h2,{id:"status-checkers",children:"Status Checkers"}),(0,n.jsx)(r.h3,{id:"code_is_running",children:"code_is_running()"}),(0,n.jsx)(r.h2,{id:"lights",children:"Lights"}),(0,n.jsx)(r.h2,{id:"sensors",children:"Sensors"}),(0,n.jsx)(r.h3,{id:"get_range",children:"get_range()"}),(0,n.jsx)(r.h3,{id:"get_angle",children:"get_angle()"}),(0,n.jsx)(r.h3,{id:"get_gyro",children:"get_gyro()"}),(0,n.jsx)(r.h3,{id:"get_accel",children:"get_accel()"}),(0,n.jsx)(r.h3,{id:"get_pos",children:"get_pos()"}),(0,n.jsx)(r.h3,{id:"get_battery",children:"get_battery()"}),(0,n.jsx)(r.h4,{id:"syntax",children:"Syntax"}),(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"get_battery()"})}),(0,n.jsx)(r.h4,{id:"parameters",children:"Parameters"}),(0,n.jsx)(r.p,{children:"None"}),(0,n.jsx)(r.h4,{id:"discription",children:"Discription"}),(0,n.jsx)(r.p,{children:"This function returns the current battery level percentage of the drone."}),(0,n.jsx)(r.h4,{id:"returns",children:"Returns"}),(0,n.jsx)(r.p,{children:"The current battery percentage of the drone's battery."}),(0,n.jsx)(r.h4,{id:"example-code",children:"Example Code"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"#Python code\r\nfrom codrone_edu.drone import *\r\n\r\ndrone = Drone()\r\ndrone.pair()\r\nbattery = drone.get_battery()\r\nprint(battery)\r\ndrone.close()\n"})}),(0,n.jsx)("hr",{}),(0,n.jsx)(r.h3,{id:"get_bottom_range",children:"get_bottom_range()"}),(0,n.jsx)(r.h4,{id:"syntax-1",children:"Syntax"}),(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"get_bottom_range()"}),(0,n.jsx)(r.br,{}),"\n",(0,n.jsx)(r.code,{children:'get_bottom_range(unit="<cm, in, mm, m>")'})]}),(0,n.jsx)(r.h4,{id:"discription-1",children:"Discription"}),(0,n.jsx)(r.p,{children:"This is a getter function which returns the current bottom range of the drone.\r\nThe default unit of measurement is centimeters.This function uses the bottom range sensor to measure distance from the drone to the surface below the drone."}),(0,n.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"unit"}),': The unit of measurement that is chosen for the height distance. Available units are "m" (meter), "cm" (centimeter), "mm" (millimeter), or "in" (inch). If a parameter is not specified cm is chosen by default.']}),(0,n.jsx)(r.h3,{id:"get_temperature",children:"get_temperature()"}),(0,n.jsx)(r.h3,{id:"get_elevation",children:"get_elevation"}),(0,n.jsx)(r.h3,{id:"get_color",children:"get_color()"}),(0,n.jsx)(r.h3,{id:"get_hsvl",children:"get_hsvl()"}),(0,n.jsx)(r.h3,{id:"get_state_data",children:"get_state_data()"}),(0,n.jsx)(r.h3,{id:"reset_sensor",children:"reset_sensor()"}),(0,n.jsx)(r.h2,{id:"sound",children:"Sound"}),(0,n.jsx)(r.h3,{id:"drone_buzzer",children:"drone_buzzer()"}),(0,n.jsx)(r.h3,{id:"controller_buzzer",children:"controller_buzzer()"}),(0,n.jsx)(r.h3,{id:"drone_buzzer_hertz",children:"drone_buzzer_hertz()"}),(0,n.jsx)(r.h3,{id:"controller_buzzer_herts",children:"controller_buzzer_herts()"}),(0,n.jsx)(r.h2,{id:"screen",children:"Screen"}),(0,n.jsx)(r.h3,{id:"controller_draw_line",children:"controller_draw_line()"}),(0,n.jsx)(r.h3,{id:"controller_draw_string",children:"controller_draw_string()"}),(0,n.jsx)(r.h3,{id:"controller_draw_rectangle",children:"controller_draw_rectangle()"}),(0,n.jsx)(r.h3,{id:"controller_draw_square",children:"controller_draw_square()"}),(0,n.jsx)(r.h3,{id:"controller_draw_point",children:"controller_draw_point()"}),(0,n.jsx)(r.h3,{id:"controller_clear_screen",children:"controller_clear_screen()"})]})}function h(e={}){const{wrapper:r}={...(0,l.ah)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},3905:(e,r,t)=>{t.d(r,{ah:()=>s});var n=t(7294);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,l=function(e,r){if(null==e)return{};var t,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var d=n.createContext({}),s=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,l=e.mdxType,i=e.originalType,d=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),u=s(t),_=l,g=u["".concat(d,".").concat(_)]||u[_]||c[_]||i;return t?n.createElement(g,o(o({ref:r},h),{},{components:t})):n.createElement(g,o({ref:r},h))}));h.displayName="MDXCreateElement"}}]);