{"searchDocs":[{"title":"CoDrone EDU","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/","content":"CoDrone EDU CoDrone EDU Welcome to CoDrone EDU’s journey. The CoDrone EDU is a programmable drone, meant for learning in the classroom. Code it in Python or start from the basics with block-based coding. Please click the tab below to go to the page. Blockly Python Documents","keywords":"","version":"Next"},{"title":"Blockly","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Blockly/","content":"Blockly Blockly How to use Blockly Junior Block Documentation Senior Block Documentation Blockly Changelog","keywords":"","version":"Next"},{"title":"Blockly Changelog","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Blockly/Blockly-Changelog","content":"","keywords":"","version":"Next"},{"title":"CoDrone EDU Library Changelog​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneEDU/Blockly/Blockly-Changelog#codrone-edu-library-changelog","content":" ","version":"Next","tagName":"h2"},{"title":"Version 2.1.8​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneEDU/Blockly/Blockly-Changelog#version-218","content":" June 12, 2024​  Changed &quot;color classifiers&quot; to &quot;color data sets&quot;Resolved bug where not all labels were loaded from a colorsetDisabled &quot;code_is_running&quot; blockResolved bug where right-click delete did not delete the generated code in the Python tabImplemented an alert when the user forgets to load a colorsetUpdated Japanese translationsEnhanced &quot;when start&quot; feature that only allows one block at a time in the workspaceReset the &quot;Run code&quot; button interface when &quot;land&quot; is pressed    ","version":"Next","tagName":"h3"},{"title":"Version 2.1.7​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneEDU/Blockly/Blockly-Changelog#version-217","content":" May 21, 2024​  Fixed bug causing crashes when color sensor returns &quot;unknown&quot;Enhanced takeoff command by adding checks for the drone flight state after takeoffResolved bug where some blocks don't disable when using the &quot;when start&quot; blockImplemented feature that only allows one &quot;when start&quot; block at a timeDisabled the asynchronous &quot;when keyboard press&quot; block to improve stabilityAdded multi-language support for the &quot;How to Connect&quot; popupCorrected drone model display issue in the connection window without needing a refresh    ","version":"Next","tagName":"h3"},{"title":"Version 2.1.6​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneEDU/Blockly/Blockly-Changelog#version-216","content":" April 18, 2024​  Fixed bug with generated Python code for avoid_wall()New pop-up window When drone or controller disconnects from BlocklyUpdated wording from &quot;Pair with Blockly&quot; to &quot;Connect to Blockly&quot;Updated messaging for adding or loading a colorset with clearer instructionsAdded a notice for JROTC edition users to first calibrate their color sensor before adding a color setBack-end changes to ensure Blockly is checking for the latest versions&quot;Open&quot; menu option only allows .XML as optionsBack-end changes to improve timing logs    ","version":"Next","tagName":"h3"},{"title":"Version 2.1.5​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneEDU/Blockly/Blockly-Changelog#version-215","content":" February 26, 2024​  Disabled battery requests during takeoffImplemented an error-logging system so users can report an error from the menuImplemented analyticsUpdated firmware notifications to match latest firmware releasesUpdated Korean-language translations    ","version":"Next","tagName":"h3"},{"title":"Version 2.1.4​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneEDU/Blockly/Blockly-Changelog#version-214","content":" February 14, 2024​  Updated drone visuals to match CoDrone EDU (JROTC ed.) when connectedTemporarily disabled &quot;Screen&quot; category for JROTC ed.Improvements to firmware notifications in the connection box    ","version":"Next","tagName":"h3"},{"title":"Version 2.1.3​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneEDU/Blockly/Blockly-Changelog#version-213","content":" January 23, 2024​  Changed parameters on &quot;flip&quot; functions to match Python function parametersImproved trim slider functionalityUpdated pairing window to reflect messaging about AA batteriesFixed Senior turn_degree() blockFixed Senior get_pressure() blockAddressed backend errors to improve performanceImproved functionality of the drone LED feature in the connection window    ","version":"Next","tagName":"h3"},{"title":"Version 2.1.2​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneEDU/Blockly/Blockly-Changelog#version-212","content":" December 21, 2023​  Added ability to change the drone LED color from the connection windowCreated a new senior block for turn_left() and turn_right() Python functionsAdded a link to the release notes in the Blockly menuCorrected the generated RGB values for the Junior controller LED blockUpdated missing blocks for Japanese-language BlocklyMore small changes in Python generated code output and block parameters to reflect Python library    ","version":"Next","tagName":"h3"},{"title":"Version 2.1.1​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneEDU/Blockly/Blockly-Changelog#version-211","content":" November 8, 2023​  Completed backend refactoring to update Blockly infrastructure. These changes will not affect your user experience, but they will help deliver a smoother update process in the future.Renamed get_gyro() Senior blocks to get_angular_speed()Small changes in the Python generated code output to reflect the latest library   ","version":"Next","tagName":"h3"},{"title":"Blockly란 무엇인가요?","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Blockly/How-to-use-Blockly","content":"","keywords":"","version":"Next"},{"title":"Blockly란 무엇인가요?​","type":1,"pageTitle":"Blockly란 무엇인가요?","url":"/ko/docs/CoDroneEDU/Blockly/How-to-use-Blockly#blockly란-무엇인가요","content":" Learn the foundations of coding with drag-and-drop blocks in our visual programming language. This is an excellent starting place for beginner programmers and drone pilots.  Blockly is a block coding program from Robolink based on Python. The types of blocks are divided into junior blocks and senior blocks according to the difficulty level.  Junior blocks have these things: (CoDrone EDU blocks) Flight Commands, Flight Sequences, Status Checkers, Lights, Sounds, (Programming blocks) Events, Input/Output, Logic, Loops, Math, Timing, Variables, Lists.  Senior blocks have these things: (CoDrone EDU blocks) Flight Commands, Flight Variables, Status Checkers, Sensors, Lights, Sounds, Screen, Colors, (Programming blocks) Events, Input/Output, Logic, Loops, Math, Timing, Variables, Functions, Lists.  ","version":"Next","tagName":"h2"},{"title":"How to Access Blockly​","type":1,"pageTitle":"Blockly란 무엇인가요?","url":"/ko/docs/CoDroneEDU/Blockly/How-to-use-Blockly#how-to-access-blockly","content":" Blockly is an online application that you can access right from Google Chrome. With Blockly, you can connect it to your drone since Blockly runs from your browser—no need for any installation!  ","version":"Next","tagName":"h2"},{"title":"Link to Blockly​","type":1,"pageTitle":"Blockly란 무엇인가요?","url":"/ko/docs/CoDroneEDU/Blockly/How-to-use-Blockly#link-to-blockly","content":" Start programming your drone with Blockly by heading to robolink.com/blockly-cde! After going to the provided link for Blockly, click on the CoDroneEDU icon to create the enviroment for CoDroneEDU programming.  ","version":"Next","tagName":"h3"},{"title":"Device requirements​","type":1,"pageTitle":"Blockly란 무엇인가요?","url":"/ko/docs/CoDroneEDU/Blockly/How-to-use-Blockly#device-requirements","content":" ","version":"Next","tagName":"h2"},{"title":"Hardware Requirements​","type":1,"pageTitle":"Blockly란 무엇인가요?","url":"/ko/docs/CoDroneEDU/Blockly/How-to-use-Blockly#hardware-requirements","content":"       Try to use the cable that comes with CoDrone EDU whenever possible! This Micro USB cable can transfer data, which is necessary for programming. Most Micro USB cables now are data compatible. If your drone does not switch to LINK state when connecting, you may have the wrong cable or it may be broken.  ","version":"Next","tagName":"h3"},{"title":"Google Chrome Requirements​","type":1,"pageTitle":"Blockly란 무엇인가요?","url":"/ko/docs/CoDroneEDU/Blockly/How-to-use-Blockly#google-chrome-requirements","content":" Your Google Chrome should be updated to the most recent version. If you are not sure how to check, click on the the menu on the top right, scroll down to “Help”, and select “About Google Chrome”. Google Chrome might automatically update. If not, please update Chrome.         ","version":"Next","tagName":"h3"},{"title":"Offline App Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Blockly/Offline-App-Documentation","content":"","keywords":"","version":"Next"},{"title":"Offline App Documentation​","type":1,"pageTitle":"Offline App Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Offline-App-Documentation#offline-app-documentation","content":" ","version":"Next","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Offline App Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Offline-App-Documentation#requirements","content":" Windows, MacOS, or Chromebook computer with accessible USB port for serial communicationChrome browser and a Google accountCoDrone EDU with battery, Smart Controller, and the included Micro USB cable  ","version":"Next","tagName":"h3"},{"title":"Steps to set up​","type":1,"pageTitle":"Offline App Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Offline-App-Documentation#steps-to-set-up","content":" Connect to the internet and open the Chrome browser. Go to codrone.robolink.com and select CoDrone EDU. Check the browser URL for an icon to install the app. You may need to wait a few seconds. If the icon is not appearing, check that you are not using a guest account. A pop-up window will appear to install the Chrome App. The app should open immediately and appear in the Dock (Mac) or Taskbar (Windows). Right click to pin it to your dock or taskbar. If the app does not open automatically, check your Chrome Apps or Applications Mission Control (Mac). On Windows, it will be under your Start Menu Programs. Use the Windows start menu and type “Blockly for Robolink”. Below is the file location. When it opens, it should look just like the browser page. Pair to Blockly with your controller the same way you would with Blockly in the browser. Run a takeoff and land testOpen all the tabs on the right side (Lessons, Python, Sensors, Docs)Use any features as you normally would in class or competition practice Close the app and turn off your WiFi connection. Then, open a browser and try to navigate to a website to verify that your computer is offline. Mac: Windows: Pair to Blockly again with your controller the same way you would with Blockly in the browser and run the same tests as before. ","version":"Next","tagName":"h3"},{"title":"889 Compliance Statement","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Documents/889-Compliance-Statement","content":"889 Compliance Statement","keywords":"","version":"Next"},{"title":"Complete User and Safety Guide","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Documents/Complete-User-and-Safety-Guide","content":"Complete User and Safety Guide","keywords":"","version":"Next"},{"title":"Documents","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Documents/","content":"Documents Documents Digital User Manual Firmware Technical Specifications Summary","keywords":"","version":"Next"},{"title":"Junior Block Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation","content":"","keywords":"","version":"Next"},{"title":"Flight Commands​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#flight-commands","content":" ","version":"Next","tagName":"h2"},{"title":"take off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#take-off","content":" Block​    Description​  This functions makes the drone take off. CoDrone EDU takes off at an average height of 1 meter off the ground. A takeoff block must be used before any other flight command or flight movement.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"land​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#land","content":" Block​    Description​  This function makes the drone land by throttling down safely.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"emergency stop​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#emergency-stop","content":" Block​    Description​  This function stops all motors immediately. Use with caution to avoid damaging your drone.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hover for [seconds] seconds​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#hover-for-seconds-seconds","content":" Block​    Description​  This function makes the drone hover in place for a given duration in seconds.  Parameters​  integer duration: the duration of hover, in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"go [direction] for [seconds] seconds at [power] % power​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#go-direction-for-seconds-seconds-at-power--power","content":" Block​    Description​  This function flies the drone in a direction for a given duration and a power percentage.  Parameters​    direction: forward, backward, up, down, left, right integer duration: the duration of movement, in seconds integer power: the power/speed of drone between 0 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn [direction] [degrees] degrees​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#turn-direction-degrees-degrees","content":" Block​    Description​  Turns CoDrone EDU to the left or to the right a given number of degrees.  Parameters​    direction: left, right integer degrees: the angle of the turn between -180 and +180  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn [direction] for [seconds] seconds at [power]% power​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#turn-direction-for-seconds-seconds-at-power-power","content":" Block​    Description​  Turns CoDrone EDU to the left or to the right for a duration in seconds at a percentange of power.  Parameters​  direction: left, right integer duration: the duration of the movement, in seconds integer power: the power/speed of the drone between 0 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Flight Sequences​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#flight-sequences","content":" ","version":"Next","tagName":"h2"},{"title":"flip [direction]​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#flip-direction","content":" Block​    Description​  This functions makes the drone flip back, front, right, or left. Make sure your battery percentage is over 50% for the flip to execute.  Parameters​    direction: back, front, right, left  Returns​  None  Example​  Add a hover or delay block after the flip if you need to stabilize before your next command. The drone takes 3-4 seconds after a flip before it can do another flight command.      ","version":"Next","tagName":"h3"},{"title":"Lights​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#lights","content":" ","version":"Next","tagName":"h2"},{"title":"set drone LED color to [color], with a brightness of [brightness]​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#set-drone-led-color-to-color-with-a-brightness-of-brightness","content":" Block​    Description​  Sets the color and brightness of the CoDrone EDU drone LED.  Parameters​    color: select a color from the color palette integer brightness: the brightness of the LED between 0 and 255  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn drone LED off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#turn-drone-led-off","content":" Block​    Description​  Turns off the CoDrone EDU drone LED.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set controller LED to [color], with a brightness of [brightness]​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#set-controller-led-to-color-with-a-brightness-of-brightness","content":" Block​    Description​  Sets the color and brightness of the CoDrone EDU controller LED.  Parameters​    color: select a color from the color palette integer brightness: positive integer between 0 and 255  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn controller LED off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#turn-controller-led-off","content":" Block​    Description​  Turns off the CoDrone EDU controller LED.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Sound​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#sound","content":" ","version":"Next","tagName":"h2"},{"title":"play this note [note] for [duration] seconds on drone​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#play-this-note-note-for-duration-seconds-on-drone","content":" Block​    Description​  Plays a note for a duration in seconds using the CoDrone EDU drone buzzer.  Parameters​    note: note range from C3 to B7, Mute, Fin integer duration: the duration of the note played, in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"play this note [note] for [duration] seconds on controller​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Junior-Block-Documentation#play-this-note-note-for-duration-seconds-on-controller","content":" Block​    Description​  Plays a note for a duration in seconds using the CoDrone EDU controller buzzer.  Parameters​    note: note range from C3 to B7, Mute, Fin integer duration: the duration of the note played, in seconds  Returns​  None  Example​     ","version":"Next","tagName":"h3"},{"title":"Technical Specifications","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Documents/Technical-Specifications","content":"","keywords":"","version":"Next"},{"title":"CoDrone EDU Technical Specficitions​","type":1,"pageTitle":"Technical Specifications","url":"/ko/docs/CoDroneEDU/Documents/Technical-Specifications#codrone-edu-technical-specficitions","content":" The document below is the product specifications for the CoDrone EDU (the drone and the controller), which provides details on the packaging, price, hardware used, dimensions, etc.  CoDroneEDU_Technical_Specifications_v1.0.pdf  &lt;p&gt;This browser does not support PDF previews. Click &lt;a href=&quot;/ko/assets/files/cde_technical_specifications_v_1_0-aa6af7a3bab49292c9a1a97cdbc8ed87.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to download the PDF file.&lt;/p&gt; ","version":"Next","tagName":"h2"},{"title":"Digital User Manual","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Documents/Digital-User-Manual","content":"","keywords":"","version":"Next"},{"title":"CoDrone EDU User Manual​","type":1,"pageTitle":"Digital User Manual","url":"/ko/docs/CoDroneEDU/Documents/Digital-User-Manual#codrone-edu-user-manual","content":" Every CoDrone EDU kit comes with a user manual that comes in handy if you need a quick reminder on how to pair, charge, or use all of the controller buttons. If you lost your manual or need a digital copy, you can view the PDF at the link below. We recommend always having the user manual with you in class or when you compete.  CoDroneEDU_Manual_v3.0.pdf  &lt;p&gt;This browser does not support PDF previews. Click &lt;a href=&quot;/ko/assets/files/co-drone-edu-manual-v-3-0-b8ca488b999164762131be97253471b1.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to download the PDF file.&lt;/p&gt;    ","version":"Next","tagName":"h2"},{"title":"CoDrone EDU (JROTC Edition) User Manual​","type":1,"pageTitle":"Digital User Manual","url":"/ko/docs/CoDroneEDU/Documents/Digital-User-Manual#codrone-edu-jrotc-edition-user-manual","content":" Every CoDrone EDU (JROTC Edition) kit comes with a user manual that comes in handy if you need a quick reminder on how to pair, charge, or use all of the controller buttons. If you lost your manual or need a digital copy, you can view the PDF at the link below. We recommend always having the user manual with you in class or when you compete.  CoDroneEDU_JROTC_Manual_v1.1.pdf  &lt;p&gt;This browser does not support PDF previews. Click &lt;a href=&quot;/ko/assets/files/co-drone-edu-jrotc-manual-v-1-1-56472b7aabdc42e4d2c8567e4ba348f1.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to download the PDF file.&lt;/p&gt; ","version":"Next","tagName":"h2"},{"title":"Firmware","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Documents/Firmware","content":"","keywords":"","version":"Next"},{"title":"Updating CoDrone EDU Firmware​","type":1,"pageTitle":"Firmware","url":"/ko/docs/CoDroneEDU/Documents/Firmware#updating-codrone-edu-firmware","content":" CoDrone EDU is always improving, so it's important to update the firmware for both the drone and the controller. Click here to start updating your controller's firmware. The firmware updater also supports CoDrone EDU (JROTC Edition).  ","version":"Next","tagName":"h2"},{"title":"CoDrone EDU​","type":1,"pageTitle":"Firmware","url":"/ko/docs/CoDroneEDU/Documents/Firmware#codrone-edu","content":" Drone Version​  Latest Version: 22.8.1 Release Date: 2022.8.8  Controller Version​  Latest Version: 23.1.1 Release Date: 2023.1.3  ","version":"Next","tagName":"h3"},{"title":"CoDrone EDU (JROTC Edition)​","type":1,"pageTitle":"Firmware","url":"/ko/docs/CoDroneEDU/Documents/Firmware#codrone-edu-jrotc-edition","content":" Drone Version​  Latest Version: 24.2.12 Release Date: 2024.2.15  Controller Version​  Latest Version: 23.12.11 Release Date: 2023.12.20 ","version":"Next","tagName":"h3"},{"title":"Python","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Python/","content":"Python Python Setup and Installation Updating Library Function Documentation Python Changelog","keywords":"","version":"Next"},{"title":"Python Changelog","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog","content":"","keywords":"","version":"Next"},{"title":"CoDrone EDU Library Changelog​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#codrone-edu-library-changelog","content":" ","version":"Next","tagName":"h2"},{"title":"Version 1.9​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-19","content":" October 8, 2023​  Fixed a bug in returning controller button press data for the custom controller lesson    ","version":"Next","tagName":"h3"},{"title":"Version 1.8​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-18","content":" April 15, 2023​  added get_sensor_data()Fixed bug where sensor requests would return 0 right after takeoffRemoved pynput dependency    ","version":"Next","tagName":"h3"},{"title":"Version 1.7​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-17","content":" February 16, 2023​  added start_controller_buzzer()added stop_controller_buzzer()added get_error_data()renamed get_x_gyro() -&gt; get_angular_speed_x()renamed get_y_gyro() -&gt; get_angular_speed_y()renamed get_z_gyro() -&gt; get_angular_speed_z()codrone-edu library version prints to console    ","version":"Next","tagName":"h3"},{"title":"Version 1.6​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-16","content":" December 28, 2022​  added start_drone_buzzer()added stop_drone_buzzer()added get_temperature()added move_forward()added move_left()added move_right()added move_backward()updated send_absolute_position()    ","version":"Next","tagName":"h3"},{"title":"Version 1.5​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-15","content":" November 14, 2022​  avoid wall default unit changed from mm to cmadded reset_sensor()get_pressure() and get_drone_temp() have been modifiedadded stop_motors()    ","version":"Next","tagName":"h3"},{"title":"Version 1.4​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-14","content":" August 17, 2022​  added error checking to load_classifier() methodadded height_from_pressure()Virtual ceiling method integratedChanged yaw directional values (positive yaw now turns left)    ","version":"Next","tagName":"h3"},{"title":"Version 1.3​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-13","content":" June 27, 2022​  added go()added 'ESC' key kill switchwaypoints now support multiple takeoffsMotor diagnostic integrated as motor_test()Added virtual ceiling to the background of the drone classturn_degree() method improvedadded turn()    ","version":"Next","tagName":"h3"},{"title":"Version 1.2​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-12","content":" June 10, 2022​  Added move() command with input parametersAdded hyperlink to &quot;drone may not be paired&quot; message.Added floor test as a method test_floor()Added a motor test that uses all 4 motors individually to determine if one is faulty. motor_test()Added waypoint systemAdded joystick and button functions    ","version":"Next","tagName":"h3"},{"title":"Version 1.1​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-11","content":" May 17, 2022​  removed serial libraryFixed screen error on controller    ","version":"Next","tagName":"h3"},{"title":"Version 1.0​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-10","content":" May 17, 2022​  Speed defaults to 2 when starting a programAdded speed_change() and get_control_speed() functionsPillow library added as dependencyAdded error message if serial library is not detectedAdded error handling when calling load_classifier()    ","version":"Next","tagName":"h3"},{"title":"Version 0.9​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-09","content":" May 17, 2022​  Added Swarm class    ","version":"Next","tagName":"h3"},{"title":"Version 0.8​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-08","content":" Mar 1, 2022​  Added movement as a state in the state listAdded temperature_convert()    ","version":"Next","tagName":"h3"},{"title":"Version 0.7​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-07","content":" Feb 18, 2022​  Fixed turn_degree() to be absolute and smoother and turn 180 degreesFixed turn_right()Fixed turn_left()Added luminosity to knn.fit for a fourth data pointAdded controller screen drawing functions    ","version":"Next","tagName":"h3"},{"title":"Version 0.6​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-06","content":" Feb 4, 2022​  All distance sensors now return in centimeter by defaultFixed all functions effected by centimeter being returned by defaultdrone.turn_degree() is now absolute and division by 0 is fixeddrone.get_height() now uses time of flight instead of barometerdrone.get_flow_x, y converted from m to cmFixed drone.avoid_wall()Added and fixed sendMotorAdded and fixed sendMotorSingleFixed buzzer functionsAdded buzzer flip warning when battery is less than 50%convert_meter can now return meterAdded drone.append_color_data() - appends data to an existing text fileAdded error handling when load_classifier is emptyChanged dir variable in add_color()Fixed issue when adding to a dataset that already existsUpdated set_trim() to only change roll and pitchUpdated get_trim_data() to return only roll and pitch    ","version":"Next","tagName":"h3"},{"title":"Version 0.5​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-05","content":" Jan 10, 2022​  Added drone.flip()Added convert_millimeter() and convert_meter() to return centimeter by default for all positional functionsAdded error handling in the color classifierAdded docstrings    ","version":"Next","tagName":"h3"},{"title":"Version 0.4​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-04","content":" Dec 15, 2021​  Added drone.get_drone_temp()Added drone.get_pressure()Added drone.drone_buzzer()Added drone.controller_buzzer()Added drone.set_trim()Added drone.get_height()Added drone.get_pressure()Added the flight sequences square, triangle, spiral, and sway.Improved takeoff commandImproved port connection    ","version":"Next","tagName":"h3"},{"title":"Version 0.3​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-03","content":" Nov 23, 2021​  Added drone.avoid_wall() - Obstacle avoidance command. is similar to zumi.forward_avoid_collision()Added drone.detect_wall() - Uses front range sensor to detect a wallAdded drone.keep_distance() - Keep distance command makes the drone maintain a distance to an obstacleAdded drone.turn_left() - Can be given a degree and the drone will turn to the leftAdded drone.turn_right() - Can be given a degree and the drone will turn to the rightAdded drone.turn_degrees() - Can take an absolute degree command and will turn to that degree.Added drone.hover() - Will make the drone hover.Added reset_YPRT() - Resets the yaw pitch roll and throttle and sends the command to the drone.Added drone.keep_height() - Keep height command. A single command that is looped.Added get_colors() - returns a list [1, 2]Added get_front_color() - gets first color in get_colors() listAdded get_back_color() - gets second color in get_colors() listAdded predict_color() - predicts a color if you have trained the model and there is an existing fileFinished basic LEDs    ","version":"Next","tagName":"h3"},{"title":"Version 0.1 - 0.2​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneEDU/Python/Python-Changelog#version-01---02","content":" Oct 10, 2021​  Added Drone.acceleration_x, y, zAdded Drone.angle_roll, yaw, pitchAdded Drone.range_front()Added Drone.range_bottom()Added Drone.get_battery()Added Drone.open()Added Drone.takeoff()Added Drone.land()   ","version":"Next","tagName":"h3"},{"title":"Setup and Installation","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Python/Setup-and-Installation","content":"","keywords":"","version":"Next"},{"title":"Setup and Installation​","type":1,"pageTitle":"Setup and Installation","url":"/ko/docs/CoDroneEDU/Python/Setup-and-Installation#setup-and-installation","content":" ","version":"Next","tagName":"h2"},{"title":"How to install Python​","type":1,"pageTitle":"Setup and Installation","url":"/ko/docs/CoDroneEDU/Python/Setup-and-Installation#how-to-install-python","content":" Install Python on your Mac or Windows machine. If you’re using a guest or limited account, make sure you have access to admin credentials for installing new software on the computer. This is especially important for students using a school computer or parent computer with limited access. If you’re on a Mac computer, you may need to modify the security settings in system preferences in order to download software.  주의 (Last Edited 10/30/23): The latest version of Python (3.12) has an issue with a library that manages packages in virtual environments. Please use Python 3.11 when following along with this tutorial.  Click here to go to the Python website to install v3.11. Follow along with the instructions in the video below. Regardless of the Python version shown in the video, the instructions will still apply.      ","version":"Next","tagName":"h3"},{"title":"How to install Pycharm​","type":1,"pageTitle":"Setup and Installation","url":"/ko/docs/CoDroneEDU/Python/Setup-and-Installation#how-to-install-pycharm","content":" Next, install PyCharm Community (free) edition , which is what we’ll use for writing out our Python code and running it on CoDrone EDU.  노트 If you choose not to use PyCharm and prefer your own editor or IDE, you will need to know how to install packages on your platform of choice. If you are not sure how to do this, we recommend following the tutorial for PyCharm instead.  Click here to go to the PyCharm download page and follow the instructions in the video below.      ","version":"Next","tagName":"h3"},{"title":"How to install CoDrone EDU library​","type":1,"pageTitle":"Setup and Installation","url":"/ko/docs/CoDroneEDU/Python/Setup-and-Installation#how-to-install-codrone-edu-library","content":" Now you need to create a new project and set it up with the CoDrone EDU library. Follow along with the video instructions below. In the tutorial, you will need to copy and paste the import statement into the generated main.py. You do not need to connect your drone yet.  from codrone_edu.drone import *     노트 If a main.py file was not generated, you can make a new one by right clicking on the project name and selecting “New &gt; Python File”. This is for both Windows and Mac.         ","version":"Next","tagName":"h3"},{"title":"Updating the Library","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Python/Updating-Library","content":"","keywords":"","version":"Next"},{"title":"Updating CoDrone EDU Python Library​","type":1,"pageTitle":"Updating the Library","url":"/ko/docs/CoDroneEDU/Python/Updating-Library#updating-codrone-edu-python-library","content":" Occasionally, there will be updates to the CoDrone EDU Python library. The current library version is version 1.9.  팁 If your version of Python is different from the CoDrone EDU library version, it can be a good idea to stay up to date (although updating your Python version is not always necessary). See Python versions available here  First, check your current codrone-edu library version in your project interpreter settings.  노트 On Windows, you can find your project interpreter settings under File &gt; Settings. On MacOS, the settings menu is under PyCharm &gt; Settings.  Your current version is listed in the middle column. If there is a newer version available, it will be listed in the third column denoted by the 🔼 symbol.    Double click on the library to open up the installation window. Select the checkbox &quot;Specify version&quot;. It should default to the newest version available. Note: If you do not check the box the library will not update.    Click &quot;Install Package&quot; to install the specified version (in this case, the latest version).    Close the installation window and verify the installation in the package list.    경고 If you have multiple projects that were set up with the default virtual environment settings, you will need to repeat this process for each PyCharm project. Updating the library in one project will not transfer over to any other projects. ","version":"Next","tagName":"h2"},{"title":"Webpy Changelog","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Python/Webpy-Changelog","content":"","keywords":"","version":"Next"},{"title":"CoDrone EDU Library Changelog​","type":1,"pageTitle":"Webpy Changelog","url":"/ko/docs/CoDroneEDU/Python/Webpy-Changelog#codrone-edu-library-changelog","content":" ","version":"Next","tagName":"h2"},{"title":"Version 1.0.0​","type":1,"pageTitle":"Webpy Changelog","url":"/ko/docs/CoDroneEDU/Python/Webpy-Changelog#version-100","content":" 2024​  updating...   ","version":"Next","tagName":"h3"},{"title":"Senior Block Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation","content":"","keywords":"","version":"Next"},{"title":"Flight Commands​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#flight-commands","content":" ","version":"Next","tagName":"h2"},{"title":"takeoff()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#takeoff","content":" Block​    Code​  drone.  takeoff()  Description​  This functions makes the drone take off. CoDrone EDU takes off at an average height of 1 meter off the ground. A takeoff block must be used before any other flight command or flight movement.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"land()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#land","content":" Block​    Code​  drone.  land()  Description​  This function makes the drone land by throttling down safely.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"emergency_stop()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#emergency_stop","content":" Block​    Code​  drone.  emergency_stop()  Description​  Stops all commands to motors. The drone will stop flying immediately.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hover()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#hover","content":" Block​    Code​  drone.  hover()  Description​  This function makes the drone hover in place for a duration in seconds.  Parameters​  integer duration: the duration of the hover in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#move","content":" Block​    Code​  drone.  move()  Description​  Moves the drone for a certain amount of time (in seconds) in a given direction determined by the flight parameters.  Parameters​  integer roll: roll power percentage as an integer between -100 and +100 integer pitch: pitch power percentage as an integer between -100 and +100 integer yaw: yaw power percentage as an integer between -100 and +100 integer throttle: throttle power percentage as an integer between -100 and +100 integer duration: duration of the hover, in seconds  Returns​  None  Example​  In this example, roll and pitch are both set to positive 30% while yaw and throttle remain at 0%. CoDrone EDU will fly forward and to the right (diagonally) for 1 second at 30% speed.      ","version":"Next","tagName":"h3"},{"title":"flip()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#flip","content":" Block​    Code​  drone.  flip()  Description​  This functions makes the drone flip back, front, right, or left. Make sure your battery percentage is over 50% for the flip to execute.  Parameters​    direction: back, front, right, left  Returns​  None  Example​  Add a hover or delay block after the flip if you need to stabilize before your next command. The drone takes 3-4 seconds after a flip before it can do another flight command.      ","version":"Next","tagName":"h3"},{"title":"turn_degree()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#turn_degree","content":" Block​    Code​  drone.  turn_degree()  Description​  Turns right or left with absolute reference frame to drone's initial heading. Positive degrees turn to right and negative degrees turn to the left. When the drone pairs after powering on, the current heading will be set as 0 degrees.  Parameters​  integer degrees: angle of the turn between -180 and +180    Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn_left() / turn_right()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#turn_left--turn_right","content":" Block​    Code​  drone.  turn_left()    drone.  turn_right()  Description​  Turns right or left relative to the drone's current heading.  Parameters​  integer degrees: angle of the turn between 0 and 180  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"avoid_wall()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#avoid_wall","content":" Block​    Code​  drone.  avoid_wall()  Description​  CoDrone EDU will fly forward and stop when an obstacle is detected a given distance away (in centimeters). The block will run until the timeout (in seconds) is finished or the obstacle is found, whichever comes first. The default timeout is 10 seconds for an obstacle detected 20cm away.  Parameters​  integer timeout: the timeout duration in seconds integer distance: the distance, in centimeters, at which the CoDrone EDU will stop to avoid obstacle  Returns​  None  Example​  Place the drone on the floor a few feet away from a wall. When you run the code, the drone will fly forward until the wall is detected 30 centimeters away. The next block will immediately execute. In this case, the drone will land.      ","version":"Next","tagName":"h3"},{"title":"Flight Variables​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#flight-variables","content":" ","version":"Next","tagName":"h2"},{"title":"set_roll()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#set_roll","content":" Block​    Code​  drone.  set_roll()  Description​  This function sets the roll direction variable but will not send a move command. Negative values will move the drone to the left and positive values will move the drone to the right.  Parameters​  integer power: the power/speed of the drone between -100 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_pitch()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#set_pitch","content":" Block​    Code​  drone.  set_pitch()  Description​  This function sets the pitch direction variable but will not send a move command. Negative values will move the drone backward and positive values will move the drone forward.  Parameters​  integer power: the power/speed of the drone between -100 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_yaw()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#set_yaw","content":" Block​    Code​  drone.  set_yaw()  Description​  This function sets the yaw direction variable but will not send a move command. Negative values will turn the drone to the right and positive values will turn the drone to the left.  Parameters​  integer power: the power/speed of the drone between -100 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_throttle()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#set_throttle","content":" Block​    Code​  drone.  set_throttle()  Description​  This function sets the throttle direction variable but will not send a move command. Negative values will move the drone downward and positive values will move the drone upward.  Parameters​  integer power: the power/speed of the drone between -100 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#move-1","content":" Block​    Code​  drone.  move()  Description​  Moves CoDrone EDU in the direction set by the flight variables with the smallest duration possible (about 0.01 seconds). Since it has no specified duration, it is often used inside of a loop to check sensors simultaneously.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move(duration)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#moveduration","content":" Block​    Code​  drone.  move()  Description​  Moves CoDrone EDU for a duration in seconds in the direction set by the flight variables.  Parameters​  integer duration: the duration of the movement in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_trim()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#set_trim","content":" Block​    Code​  drone.  set_trim()  Description​  Sets the trim values to adjust for any drifting while CoDrone EDU is flying. Set the trim values in the opposite direction of drift. For example, if the drone is drifting to the right, set roll to a negative value.  Parameters​    integer roll: the trim value to adjust for roll drifting, between -100 and 100 integer pitch: the trim value to adjust for pitch drifting, between -100 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"get_trim()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_trim","content":" Block​    Code​  drone.  get_trim()  Description​  Returns the current trim values. Combine with a print statement to see the results printed to the console.  Parameters​  None  Returns​  integer roll: the trim value for the roll movement, between -100 and 100 integer pitch: the trim value for the pitch movement, between -100 and 100  Example​      ","version":"Next","tagName":"h3"},{"title":"reset_trim()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#reset_trim","content":" Block​    Code​  drone.  reset_trim()  Description​  Resets the trim values to (0,0).  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Lights​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#lights","content":" ","version":"Next","tagName":"h2"},{"title":"set_drone_LED()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#set_drone_led","content":" Block​    Code​  drone.  set_drone_LED()  Description​  Sets the color of CoDrone EDU's LED. Colors are set by using its RGB (red, green, blue) equivalent values.  Parameters​    integer red: pixel value for the color red between 0 and 255 integer green: pixel value for the color green between 0 and 255 integer blue: pixel value for the color blue between 0 and 255 integer brightness: brightness of the drone LED between 0 and 255  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"drone_LED_off()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#drone_led_off","content":" Block​    Code​  drone.  drone_LED_off()  Description​  Turns off CoDrone EDU's LED.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_controller_LED()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#set_controller_led","content":" Block​    Code​  drone.  set_controller_LED()  Description​  Sets the color of CoDrone EDU's controller LED. Colors are set by using its RGB (red, green, blue) equivalent values.  Parameters​    integer red: pixel value for the color red between 0 and 255 integer green: pixel value for the color green between 0 and 255 integer blue: pixel value for the color blue between 0 and 255 integer brightness: brightness of the controller LED between 0 and 255  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"controller_LED_off()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#controller_led_off","content":" Block​    Code​  drone.  controller_LED_off()  Description​  Turns off the CoDrone EDU's controller LED.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"get_range()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_range","content":" Block​    Code​  drone.  get_range()  Description​  Returns the calculated distance from either the front or bottom infrared (IR) range sensor to the surface. The sensor range is up to 1.5m.  Parameters​        type: front, bottom unit: cm, mm, in, m  Returns​  float distance: float value in the units selected  Example​      ","version":"Next","tagName":"h3"},{"title":"get_angle()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_angle","content":" Block​    Code​  drone.  get_angle()  Description​  This function returns the current gyroscope angle measurement for either the x (roll),y (pitch),or z (yaw) axis.  Parameters​    axis: x, y, z    Returns​  integer angle: gyroscope angle measurement for the given axis, in degrees  Example​      ","version":"Next","tagName":"h3"},{"title":"get_angular_speed()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_angular_speed","content":" Block​    Code​  drone.  get_angular_speed()  Description​  This function returns the current angular velocity in degrees per second for either the x (roll),y (pitch), or z (yaw) axis.  Parameters​    type: x, y, z    Returns​  integer angular velocity: the angular velocity of the drone, in degrees per second  Example​      ","version":"Next","tagName":"h3"},{"title":"get_accel()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_accel","content":" Block​    Code​  drone.  get_accel()  Description​  This function returns the current acceleration on either the x, y, or z axis in units of m/s2∗10m/s^2*10m/s2∗10. Note: 1g = 9.8m/s29.8m/s^29.8m/s2    Parameters​    type: x, y, z  Returns​  integer acceleration: positive or negative acceleration of the drone, in m/s2∗10m/s^2*10m/s2∗10  Example​      ","version":"Next","tagName":"h3"},{"title":"get_pos()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_pos","content":" Block​    Code​  drone.  get_pos()  Description​  Returns the current estimated position of the CoDrone EDU using the optical flow sensor.  Parameters​        axis: x, y, z unit: mm, cm, in, m        Returns​  float position: float x,y, or z value in units selected  Example​      ","version":"Next","tagName":"h3"},{"title":"get_battery()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_battery","content":" Block​    Code​  drone.  get_battery()  Description​  This function returns the current battery percentage of the drone battery.  Parameters​  None  Returns​  integer battery percentage: the battery percentage from 0 to 100  Example​      ","version":"Next","tagName":"h3"},{"title":"get_height()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_height","content":" Block​    Code​  drone.  get_height()  Description​  Returns the calculated distance from the bottom infrared (IR) range sensor to the surface. The sensor range is up to 1.5m. This is another name for the get_range(&quot;bottom&quot;) function.  Parameters​    units: cm, in, mm, m  Returns​  flaot height: float height value in the units selected  Example​      ","version":"Next","tagName":"h3"},{"title":"get_pressure()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_pressure","content":" Block​    Code​  drone.  get_pressure()  Description​  This function returns barometer data in either pascals or millibars. Note: 1 mbar = 100 Pa  Parameters​    unit: pascal or millibar  Returns​  float pressure: float value in either Pa or mbar  Example​      ","version":"Next","tagName":"h3"},{"title":"get_temperature()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_temperature","content":" Block​    Code​  drone.  get_temperature()  Description​  This block returns the current temperature of the drone in either Celsius or Fahrenheit.  Parameters​    unit: Fahrenheit, Celsius, Kelvin  Returns​  float temperature: float value in degrees  Example​      ","version":"Next","tagName":"h3"},{"title":"get_elevation()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_elevation","content":" Block​    Code​  drone.  get_elevation()  Description​  Returns the estimated elevation data from the CoDrone EDU's barometer.  Parameters​    unit: m (meter), km (kilometer), ft (feet), mi (miles).  Returns​  float elevation: float elevation value in units selected  Example​      ","version":"Next","tagName":"h3"},{"title":"get_color()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_color","content":" Block​    Code​  drone.  get_color()  Description​  This functions reads the color data from either of the two bottom color sensors and returns one of the 8 pre-calibrated colors (provided in the color cards). The drone must be flat on a surface (not flying) for the color sensor to activate.  Parameters​    type: front, back  Returns​  color: detected color as a string (Red, Green, Yellow, Blue, Cyan, Magenta, Black, White, Unknown)  Example​      ","version":"Next","tagName":"h3"},{"title":"get_hsvl()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_hsvl","content":" Block​    Code​  drone.  get_hsvl()  Description​  Returns the HSVL (hue, saturation, value, lightness) data from either of the CoDrone EDU's bottom color sensors. The drone must be flat on a surface (not flying) for the color sensor to activate.  Parameters​        type: front, back unit: hue, saturation, value, lightness  Returns​  hsvl value from sensor  Example​      ","version":"Next","tagName":"h3"},{"title":"get_state_data()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#get_state_data","content":" Block​    Code​  drone.  get_state_data()  Description​  Returns the current state of the CoDrone EDU.  Parameters​    unit: modeFlight, modeMovement  Returns​  state: name of flight/movement state  Example​      ","version":"Next","tagName":"h3"},{"title":"reset_sensor()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#reset_sensor","content":" Block​    Code​  drone.  reset_sensor()  Description​  Resets the Gyroscope angles to 0. Make sure the drone is on a flat surface when running this block.  Parameters​  None  Returns​  None  Example​  To use this example file turn the drone manually with your hand and watch the Z angle change. Stop moving the drone during the reset. You will see that the Z angle is reset to 0.      ","version":"Next","tagName":"h3"},{"title":"Sound​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#sound","content":" ","version":"Next","tagName":"h2"},{"title":"drone_buzzer()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#drone_buzzer","content":" Block​    Code​  drone.  buzzer()  Description​  Plays a note for a duration in milliseconds using the CoDrone EDU drone buzzer.  Parameters​    note: note range from C3 to B7, Mute, Fin integer duration: the duration of note played in milliseconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"controller_buzzer()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#controller_buzzer","content":" Block​    Code​  drone.  controller_buzzer()  Description​  Plays a note for a duration in milliseconds using the CoDrone EDU controller buzzer.  Parameters​    note: note range from C3 to B7, Mute, Fin integer duration: the duration of note played in milliseconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"drone_buzzer_hertz()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#drone_buzzer_hertz","content":" Block​    Code​  drone.  drone_buzzer_hertz()  Description​  Plays a sound frequency for a duration in milliseconds using the CoDrone EDU drone buzzer.  Parameters​  integer hertz: the frequency of the buzzer, in Hertz integer duration: the duration of the buzzer played, in milliseconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"controller_buzzer_hertz()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#controller_buzzer_hertz","content":" Block​    Code​  drone.  controller_buzzer_hertz()  Description​  Plays a sound frequency for a duration in milliseconds using the CoDrone EDU controller buzzer.  Parameters​  integer hertz: the frequency of the buzzer, in Hertz integer duration: the duration of the buzzer played, in milliseconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Screen​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#screen","content":" ","version":"Next","tagName":"h2"},{"title":"controller_draw_line()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#controller_draw_line","content":" 경고 This function is currently unavailable for CoDrone EDU (JROTC ed.).  Block​    Code​  drone.  controller_draw_line()  Description​  (x1,y1) \\ \\ \\ \\ (x2,y2)   Draws a line between points (x1, y1) and (x2, y2)  Parameters​    integer x1: point 1 x coordinate integer y1: point 1 y coordinate integer x2: point 2 x coordinate integer y2: point 2 y coordinate  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"controller_draw_string()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#controller_draw_string","content":" 경고 This function is currently unavailable for CoDrone EDU (JROTC ed.).  Block​    Code​  drone.  controller_draw_string()  Description​  Draws a string from the given x_start, x_end and y positions. The string can be aligned along the x_start and x_end positions  Parameters​    integer xStart: starting x position integer yStart: starting y position text: any string input  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"controller_draw_rectangle()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#controller_draw_rectangle","content":" 경고 This function is currently unavailable for CoDrone EDU (JROTC ed.).  Block​    Code​  drone.  controller_draw_rectangle()  Description​   width (x,y)|---------------| | | height |_______________|   Draws a rectangle onto the controller screen starting from point (x,y) and extends to given height and width  Parameters​    integer xStart: top left corner x coordinate integer yStart: top left corner y coordinate integer width: width of rectangle integer height: height of rectangle boolean flagFill: optional parameter to fill in the rectangle or not. default value is False  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"controller_draw_square()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#controller_draw_square","content":" 경고 This function is currently unavailable for CoDrone EDU (JROTC ed.).  Block​    Code​  drone.  controller_draw_square()  Description​  width (x,y)|------| | | width |______|   Draws a square on the controller screen starting from point (x,y) and will extend to the given width  Parameters​    integer xStart: top left corner x coordinate integer yStart: top left corner y coordinate integer width: width of square boolean flagFill: optional parameter to fill in the square or not. default value is False  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"controller_draw_point()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#controller_draw_point","content":" 경고 This function is currently unavailable for CoDrone EDU (JROTC ed.).  Block​    Code​  drone.  controller_draw_point()  Description​  Draws a point on the CoDrone EDU LED screen at point (x, y).  Parameters​    integer x: x coordinate integer y: y coordinate  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"controller_clear_screen()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneEDU/Blockly/Senior-Block-Documentation#controller_clear_screen","content":" 경고 This function is currently unavailable for CoDrone EDU (JROTC ed.).  Block​    Code​  drone.  controller_clear_screen()  Description​  Clears the CoDrone EDU controller screen.  Parameters​  None  Returns​  None  Example​     ","version":"Next","tagName":"h3"},{"title":"What is Python?","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Python/What-is-Python","content":"What is Python?","keywords":"","version":"Next"},{"title":"CoDrone Mini","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/","content":"CoDrone Mini CoDrone Mini Welcome to CoDrone Mini’s journey. Please click the tab below to go to the page. Blockly Python","keywords":"","version":"Next"},{"title":"How to use Blockly","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Blockly/How-to-use-Blockly","content":"How to use Blockly","keywords":"","version":"Next"},{"title":"Blockly","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Blockly/","content":"Blockly Blockly Junior Block Documentation Senior Block Documentation Blockly Changelog","keywords":"","version":"Next"},{"title":"Blockly Changelog","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Blockly/Blockly-Changelog","content":"","keywords":"","version":"Next"},{"title":"CoDrone Mini Library Changelog​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneMini/Blockly/Blockly-Changelog#codrone-mini-library-changelog","content":" ","version":"Next","tagName":"h2"},{"title":"Version 2.0.5​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneMini/Blockly/Blockly-Changelog#version-205","content":" November 8, 2023​  Completed backend refactoring to update Blockly infrastructure. These changes will not affect your user experience, but they will help deliver a smoother update process in the future.  ","version":"Next","tagName":"h3"},{"title":"Version 1.1.3​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneMini/Blockly/Blockly-Changelog#version-113","content":" Aug 14, 2018​  New Function:  pair() : Updated to a new function for pairing with the CoDrone. Pair will pair with the nearest, then save your drone info to your project folder and use the next time you pair with no parameters.calibrate() : you can reset and calibrate drone programmatically.move() function updated. It can take 4 parameters move(roll,pitch,yaw,throttle) to move indefinitely  ","version":"Next","tagName":"h3"},{"title":"Version 1.1.2​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneMini/Blockly/Blockly-Changelog#version-112","content":" May 21, 2018​  Print port name and drone name at the start of the program.Solve setAllRGB() function error (couldn't change the colors when repeated it too fast).  ","version":"Next","tagName":"h3"},{"title":"Version 1.1.1​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneMini/Blockly/Blockly-Changelog#version-111","content":" Mar 28, 2018​  Change the Mode nameChange the default value in flight commandAdd some error messages for debugging mode  ","version":"Next","tagName":"h3"},{"title":"Version 1.1.0​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneMini/Blockly/Blockly-Changelog#version-110","content":" Mar 16, 2018​  Remove &quot;time.&quot; in protocol.pyAdd legacy functionsFix functions about degrees.  ","version":"Next","tagName":"h3"},{"title":"Version 0.2​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDroneMini/Blockly/Blockly-Changelog#version-02","content":" Dec 16, 2017​  The first CoDrone library release for the Python Package Index ","version":"Next","tagName":"h3"},{"title":"Offline App Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Blockly/Offline-App-Documentation","content":"Offline App Documentation","keywords":"","version":"Next"},{"title":"Python","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Python/","content":"Python Python Setup and Installation Function Documentation Python Changelog","keywords":"","version":"Next"},{"title":"Junior Block Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation","content":"","keywords":"","version":"Next"},{"title":"Flight Commands​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#flight-commands","content":" ","version":"Next","tagName":"h2"},{"title":"take off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#take-off","content":" Block​    Description​  This functions makes the drone take off. CoDrone Mini takes off at around 3-4 ft off the ground.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"land​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#land","content":" Block​    Description​  This function makes the drone land by throttling down safely.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"emergency stop​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#emergency-stop","content":" Block​    Description​  Stops all commands to motors. The drone will stop flying immediately.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"go [direction] for [duration] seconds​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#go-direction-for-duration-seconds","content":" Block​    Description​  Moves the drone in a direction for a given duration.  Parameters​    direction: forward, backward, up, down, left, right integer duration: the duration of movement in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"go [direction] for [duration] seconds at [power] % power​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#go-direction-for-duration-seconds-at-power--power","content":" Block​    Description​  Moves the drone in a direction for a given duration and power percentage.  Parameters​    direction: forward, backward, up, down, left, right integer power: the power/speed of the drone between 0 and 100 integer duration: the duration of the move in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn [direction] for [duration] seconds at [power] power​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#turn-direction-for-duration-seconds-at-power-power","content":" Block​    Description​  Turns the CoDrone Mini in a given direction for the given duration at the given power percentage.  Parameters​    direction: the direction of the movement (left, right) integer power: the power/speed of the drone between 0 and 100 integer duration: the duration of the turn in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hover for [duration] seconds​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#hover-for-duration-seconds","content":" Block​    Description​  This function makes the drone hover for a given amount of time.  Parameters​  integer duration: the duration of the hover in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Flight Sequences​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#flight-sequences","content":" ","version":"Next","tagName":"h2"},{"title":"flip left​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#flip-left","content":" Block​    Description​  Makes the drone flip to the left.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"flip right​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#flip-right","content":" Block​    Description​  Makes the drone flip to the right.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"flip backward​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#flip-backward","content":" Block​    Description​  Makes the drone flip backward.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"flip forward​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#flip-forward","content":" Block​    Description​  Makes the drone flip forward.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Status Checkers​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#status-checkers","content":" ","version":"Next","tagName":"h2"},{"title":"code is running​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#code-is-running","content":" Block​    Description​  Returns a True value while your code is running. Use this block instead of &quot;while True&quot; when you want to run a &quot;forever&quot; loop. Use the &quot;Stop&quot; button in Blockly to stop the program.  Parameters​  None  Returns​  boolean running: returns True if program is running, False if user presses &quot;Stop&quot;  Example​      ","version":"Next","tagName":"h3"},{"title":"Lights​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#lights","content":" ","version":"Next","tagName":"h2"},{"title":"set drone LED color to [color], with a brightness of [brightness]​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#set-drone-led-color-to-color-with-a-brightness-of-brightness","content":" Block​    Description​  Sets the color of CoDrone Mini's LED.  Parameters​    color: select a color from the color palette integer brightness: brightness of the LED between 0 and 255   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set drone LED color to [color], and pattern to [pattern] with a speed of [speed]​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#set-drone-led-color-to-color-and-pattern-to-pattern-with-a-speed-of-speed","content":" Block​    Description​  Sets the color of CoDrone Mini's LED blinking pattern. &quot;Blink&quot; flashes the LED on and off and an interval determined by the speed parameter. &quot;Double blink&quot; flashes the LED twice before pausing at the interval determined by the speed parameter.  Parameters​    color: select a color from the color palette pattern: blink or double blink integer speed: the speed of the lighting pattern from 1 to 10   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn LED off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#turn-led-off","content":" Block​    Description​  Turns off CoDrone Mini's LED.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reset LED​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#reset-led","content":" Block​    Description​  Reset's the Codrone Mini's LED back to the default red LED.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Sound​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#sound","content":" ","version":"Next","tagName":"h2"},{"title":"play this note [note] for [duration] seconds​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Junior-Block-Documentation#play-this-note-note-for-duration-seconds","content":" Block​    Description​  Plays a note for a specified amount of time using the buzzer on the CoDrone Mini controller.  Parameters​    note: a note from C3 to B7 integer duration: the duration of the note played, in seconds  Returns​  None  Example​   ","version":"Next","tagName":"h3"},{"title":"Python Changelog","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Python/Python-Changelog","content":"","keywords":"","version":"Next"},{"title":"CoDrone Mini Library Changelog​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneMini/Python/Python-Changelog#codrone-mini-library-changelog","content":" ","version":"Next","tagName":"h2"},{"title":"Version 1.1.3​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneMini/Python/Python-Changelog#version-113","content":" Aug 14, 2018​  New Function:  pair() : Updated to a new function for pairing with the CoDrone. Pair will pair with the nearest, then save your drone info to your project folder and use the next time you pair with no parameters.calibrate() : you can reset and calibrate drone programmatically.move() function updated. It can take 4 parameters move(roll,pitch,yaw,throttle) to move indefinitely  May 21, 2018  ","version":"Next","tagName":"h3"},{"title":"Version 1.1.2​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneMini/Python/Python-Changelog#version-112","content":" May 21, 2018​  Print port name and drone name at the start of the program.Solve setAllRGB() function error (couldn't change the colors when repeated it too fast).  ","version":"Next","tagName":"h3"},{"title":"Version 1.1.1​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneMini/Python/Python-Changelog#version-111","content":" Mar 28, 2018​  Change the Mode nameChange the default value in flight commandAdd some error messages for debugging mode  ","version":"Next","tagName":"h3"},{"title":"Version 1.1.0​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneMini/Python/Python-Changelog#version-110","content":" Mar 16, 2018​  Remove &quot;time.&quot; in protocol.pyAdd legacy functionsFix functions about degrees.  ","version":"Next","tagName":"h3"},{"title":"Version 0.2​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/CoDroneMini/Python/Python-Changelog#version-02","content":" Dec 16, 2017​  The first CoDrone library release for the Python Package Index ","version":"Next","tagName":"h3"},{"title":"Setup and Installation","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Python/Setup-and-Installation","content":"","keywords":"","version":"Next"},{"title":"Setup and Installation​","type":1,"pageTitle":"Setup and Installation","url":"/ko/docs/CoDroneMini/Python/Setup-and-Installation#setup-and-installation","content":" ","version":"Next","tagName":"h2"},{"title":"How to install Python​","type":1,"pageTitle":"Setup and Installation","url":"/ko/docs/CoDroneMini/Python/Setup-and-Installation#how-to-install-python","content":" Install Python on your Mac or Windows machine. If you’re using a guest or limited account, make sure you have access to admin credentials for installing new software on the computer. This is especially important for students using a school computer or parent computer with limited access. If you’re on a Mac computer, you may need to modify the security settings in system preferences in order to download software.  주의 (Last Edited 10/30/23): The latest version of Python (3.12) has an issue with a library that manages packages in virtual environments. Please use Python 3.11 when following along with this tutorial.  Click here to go to the Python website to install v3.11. Follow along with the instructions in the video below. Regardless of the Python version shown in the video, the instructions will still apply.      ","version":"Next","tagName":"h3"},{"title":"How to install Pycharm​","type":1,"pageTitle":"Setup and Installation","url":"/ko/docs/CoDroneMini/Python/Setup-and-Installation#how-to-install-pycharm","content":" Next, install PyCharm Community (free) edition , which is what we’ll use for writing out our Python code and running it on CoDrone Mini.  노트 If you choose not to use PyCharm and prefer your own editor or IDE, you will need to know how to install packages on your platform of choice. If you are not sure how to do this, we recommend following the tutorial for PyCharm instead.  Click here to go to the PyCharm download page and follow the instructions in the video below.      ","version":"Next","tagName":"h3"},{"title":"How to install CoDrone Mini library​","type":1,"pageTitle":"Setup and Installation","url":"/ko/docs/CoDroneMini/Python/Setup-and-Installation#how-to-install-codrone-mini-library","content":" Now you need to create a new project and set it up with the CoDrone Mini library. Follow along with the instructions below. In the tutorial, you will need to copy and paste the import statement into the generated main.py. You do not need to connect your drone yet.  import CoDrone_mini # running this code will show an error in the console if CoDrone Mini library was not installed properly     노트 If a main.py file was not generated, you can make a new one by right clicking on the project name and selecting “New &gt; Python File”. This is for both Windows and Mac.  After opening PyCharm, click on &quot;New Project&quot; to create Python project      Type after the last &quot; \\ &quot; in &quot;Location&quot; to give your project a name (for example, CoDroneMini)The Python interpreter should be the version you installed from the &quot;How to Install Python&quot; section of this page or the most recent version of the Python interpreter.  important If it's not the version you installed, click on &quot;Previously configured interpreter&quot;Click on the &quot; .. &quot; button to display a list of Python interpreters.Finally, select the &quot;System Interpreter&quot; for Python.  Click &quot;Create&quot; to create project and wait until your project is finished loading up.      After your project loads, click on &quot;File &gt; Settings&quot; in the top-right corner of Pycharm window.      The Settings window will pop up. Click on &quot;Project: YourProjectName &gt; Python Interpreter&quot; (YourProjectName is just the name of your project). Click on the &quot; + &quot; button, which is next to the &quot; - &quot; button and above the word &quot;Package&quot;. Clicking the &quot; + &quot; will open a window with a list of Python packages to install.      In the search bar, type &quot;CoDrone&quot; to give you a list of packages containing the name &quot;CoDrone&quot;. Click on &quot;CoDrone-mini&quot; (Do NOT select &quot;CoDrone&quot;). Finally, select &quot;Install Package&quot; to install the &quot;CoDrone-mini&quot; package.      It can take a while to load, but once it's finished installing, it will tell you &quot;Package 'CoDrone-mini' installed successfully&quot;. Exit out this window and click &quot;OK&quot; in the Settings window.   ","version":"Next","tagName":"h3"},{"title":"Updating the Library","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Python/Updating-Library","content":"Updating the Library","keywords":"","version":"Next"},{"title":"What is Python?","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Python/What-is-Python","content":"What is Python?","keywords":"","version":"Next"},{"title":"Senior Block Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation","content":"","keywords":"","version":"Next"},{"title":"Flight Commands​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#flight-commands","content":" ","version":"Next","tagName":"h2"},{"title":"take off​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#take-off","content":" Block​    Description​  Makes the drone take off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"land​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#land","content":" Block​    Description​  Makes the drone land.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"emergency stop​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#emergency-stop","content":" Block​    Description​  Stops all commands to motors. The drone will stop flying immediately.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move([duration] seconds, [roll] %, [pitch] %, [yaw] %, [throttle] %)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#moveduration-seconds-roll--pitch--yaw--throttle-","content":" Block​    Description​  Moves the drone for a certain amount of time (in seconds) in a given direction determined by the flight parameters.  Parameters​  integer duration: the duration of the movement, in seconds integer roll: roll power percentage between -100 and +100 integer pitch: pitch power percentage between -100 and +100 integer yaw: yaw power percentage between -100 and +100 integer throttle: throttle power percentage between -100 and +100   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn([direction] , [duration] seconds, [power] %)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#turndirection--duration-seconds-power-","content":" Block​    Description​  Turns CoDrone Mini left or right for a duration in seconds and at a power percentage from 0 to 100% speed.  Parameters​    direction: left, right integer duration: the duration of turn in seconds integer power: the power of the turn from 0 to 100   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hover([seconds] sec)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#hoverseconds-sec","content":" Block​    Description​  This function makes the drone hover for a duration in seconds.  Parameters​  integer duration: the duration of the hovering in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Flight Variables​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#flight-variables","content":" ","version":"Next","tagName":"h2"},{"title":"set_roll()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#set_roll","content":" Block​    Description​  This function sets the roll direction variable but will not send a move command. Negative values will move the drone to the left and positive values will move the drone to the right.    Parameters​  integer power: the power of the roll movement between -100 and 100   Returns​  None  Exmaple​      ","version":"Next","tagName":"h3"},{"title":"set_pitch()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#set_pitch","content":" Block​    Description​  This function sets the pitch direction variable but will not send a move command. Negative values will move the drone backward and positive values will move the drone forward.    Parameters​  integer power: the power of the pitch movement between -100 and 100   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_yaw()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#set_yaw","content":" Block​    Description​  This function sets the yaw direction variable but will not send a move command. Negative values will turn the drone to the right and positive values will turn the drone to the left.    Parameters​  integer power: the power of the yaw movement between -100 and 100   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_throttle()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#set_throttle","content":" Block​    Description​  This function sets the throttle direction variable but will not send a move command. Negative values will move the drone downward and positive values will move the drone upward.    Parameters​  integer power: the power of the throttle movement between -100 and 100   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move(duration)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#moveduration","content":" Block​    Description​  Moves CoDrone Mini for a duration in seconds in the direction set by the flight variables.  Parameters​  integer duration: the duration of movement in seconds   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#move","content":" Block​    Description​  Moves CoDrone Mini in the direction set by the flight variables with the smallest duration possible (about 0.01 seconds). Since it has no specified duration, it is often used inside of a loop to check sensors simultaneously.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_trim()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#set_trim","content":" Block​    Description​  Sets the trim values to adjust for any drifting while CoDrone Mini is flying. Set the trim values in the opposite direction of drift. For example, if the drone is drifting to the right, set roll to a negative value.  Parameters​  integer roll: the power of the roll movement between -100 and 100 integer pitch: the power of the pitch movement between -100 and 100   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"get_trim()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#get_trim","content":" Block​    Description​  Returns the current trim values. Combine with a print statement to see the results printed to the console.  Parameters​  None  Returns​  integer roll: the power of the roll movement between -100 and 100 integer pitch: the power of the pitch movement between -100 and 100   Example​      ","version":"Next","tagName":"h3"},{"title":"reset_trim()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#reset_trim","content":" Block​    Description​  Resets the trim values to (0,0).  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"get_roll()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#get_roll","content":" Block​    Description​  Returns the current value for the roll flight variable.  Parameters​  None  Returns​  integer roll: the power of the roll movement between -100 and 100   Example​      ","version":"Next","tagName":"h3"},{"title":"get_pitch()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#get_pitch","content":" Block​    Description​  Returns the current value for the pitch flight variable.  Parameters​  None  Returns​  integer pitch: the power of the pitch movement between -100 and 100   Example​      ","version":"Next","tagName":"h3"},{"title":"get_yaw()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#get_yaw","content":" Block​    Description​  Returns the current value for the yaw flight variable.  Parameters​  None  Returns​  integer yaw: the power of the yaw movement between -100 and 100   Example​      ","version":"Next","tagName":"h3"},{"title":"get_throttle()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#get_throttle","content":" Block​    Description​  Returns the current value for the throttle flight variable.  Parameters​  None  Returns​  integer throttle: the power of the throttle movement between -100 and 100   Example​      ","version":"Next","tagName":"h3"},{"title":"Status Checkers​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#status-checkers","content":" ","version":"Next","tagName":"h2"},{"title":"code_is_running()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#code_is_running","content":" Block​    Description​  Returns a True value while your code is running. Use this block instead of &quot;while True&quot; when you want to run a &quot;forever&quot; loop. Use the &quot;Stop&quot; button in Blockly to stop the program.  Parameters​  None  Returns​  boolean running: Returns True if program is running, False if user presses &quot;Stop&quot;  Example​      ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"get_angle()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#get_angle","content":" Block​    Description​  This function returns the roll, pitch, and yaw angles from the gyroscope. The 0 angle is set when pairing.  Parameters​    axis: select roll, pitch or yaw  Returns​  integer angle: angle, in degrees, from the starting position  Example​  For this example, manually turn your drone by hand to see the yaw angle change.      ","version":"Next","tagName":"h3"},{"title":"get_angle()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#get_angle-1","content":" Block​    Description​  This function returns the current battery percentage of the drone battery.  Parameters​  None  Returns​  integer percentage: the battery percentage from 0 to 100  Example​      ","version":"Next","tagName":"h3"},{"title":"get_drone_temp()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#get_drone_temp","content":" Block​    Description​  This block returns the current temperature of the drone in either Celsius or Fahrenheit.  Parameters​    Returns​  float temperature: Temperature of the drone, either Celsius or Fahrenheit  Example​      ","version":"Next","tagName":"h3"},{"title":"get_height()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#get_height","content":" Block​    Description​  This function returns the current estimated height of the drone from the surface at the moment of pairing. This is calculated by the barometer (air pressure sensor).  Parameters​  None  Returns​  float height: the height of the drone in centimeters  Example​      ","version":"Next","tagName":"h3"},{"title":"get_pressure()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#get_pressure","content":" Block​    Description​  This function returns barometer data in Pascals. Note: 1atm = 101325 Pa  Parameters​  None  Returns​  float pressure: the pressure measured from barometer in Pascals  Example​      ","version":"Next","tagName":"h3"},{"title":"reset_sensor()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#reset_sensor","content":" Block​    Description​  Resets the gyroscope angles to 0. The drone will flash while the gyroscope is recalibrating. Do not handle or move the drone during calibration.  Parameters​  None  Returns​  None  Example​  Rotate the drone with your hand on a flat surface. See the angles change by observing the printed values in the console. Stop moving the drone when the screen prints &quot;resetting&quot;. After resetting, the gyroscope angles will return to 0.      ","version":"Next","tagName":"h3"},{"title":"Lights​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#lights","content":" ","version":"Next","tagName":"h2"},{"title":"LED_color()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#led_color","content":" Block​    Description​  Sets the color of CoDrone Mini's LED. Colors are set by using its RGB (red, green, blue) equivalent values.  Parameters​  integer red: the pixel value for the color red between 0 and 255 integer green: the pixel value for the color green between 0 and 255 integer blue: the pixel value for the color blue between 0 and 255 integer brightness: the brightness of the LEDs between 0 and 255   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"LED_color(r,g,b,brightness)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#led_colorrgbbrightness","content":" Block​    Description​  Sets the color of CoDrone Mini's LED blinking pattern. &quot;Blink&quot; flashes the LED on and off and an interval determined by the speed parameter. &quot;Double blink&quot; flashes the LED twice before pausing at the interval determined by the speed parameter.  Parameters​  integer red: the pixel value for the color red between 0 and 255 integer green: the pixel value for the color green between 0 and 255 integer blue: the pixel value for the color blue between 0 and 255 pattern: blink or double blink integer speed: the speed of the lighting pattern from 1 to 10   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn_off_LED()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#turn_off_led","content":" Block​    Description​  Turns off CoDrone Mini's LED.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reset_LED()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#reset_led","content":" Block​    Description​  Reset's the Codrone mini's LED to its default state (solid red LED).  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Sound​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#sound","content":" ","version":"Next","tagName":"h2"},{"title":"play_note(note, [duration] seconds)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#play_notenote-duration-seconds","content":" Block​    Description​  Plays a note for a specified amount of time using the controller buzzer.  Parameters​    note: note from C3 to B7 integer duration: the duration of the buzzer note, in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"play_note([frequency] Hertz, [duration] seconds)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDroneMini/Blockly/Senior-Block-Documentation#play_notefrequency-hertz-duration-seconds","content":" Block​    Description​  Plays a note at a particular frequency for a specified amount of time using the controller buzzer.  Parameters​  integer frequency: The note's frequency in Hertzinteger duration: the duration of the note played in seconds  Returns​  None  Example​   ","version":"Next","tagName":"h3"},{"title":"CoDrone Pro/Lite","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/","content":"CoDrone Pro/Lite CoDrone Pro/Lite Welcome to CoDrone Pro/Lite’s journey. Please click the tab below to go to the page. Blockly Python Arduino","keywords":"","version":"Next"},{"title":"Arduino Changelog","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Arduino/Arduino-Changelog","content":"Arduino Changelog","keywords":"","version":"Next"},{"title":"Arduino","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Arduino/","content":"Arduino Arduino Function Documentation","keywords":"","version":"Next"},{"title":"Setup and Installation","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Arduino/Setup-and-Installation","content":"","keywords":"","version":"Next"},{"title":"Setup and Installation​","type":1,"pageTitle":"Setup and Installation","url":"/ko/docs/CoDronePro_Lite/Arduino/Setup-and-Installation#setup-and-installation","content":"","version":"Next","tagName":"h2"},{"title":"Update Library","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Arduino/Update-Library","content":"Update Library","keywords":"","version":"Next"},{"title":"What is Arduino?","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Arduino/What-is-Arduino","content":"What is Arduino?","keywords":"","version":"Next"},{"title":"Blockly","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Blockly/","content":"Blockly Blockly Junior Block Documentation Senior Block Documentation","keywords":"","version":"Next"},{"title":"Blockly Changelog","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Blockly/Blockly-Changelog","content":"","keywords":"","version":"Next"},{"title":"CoDrone Pro/Lite Library Changelog​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/CoDronePro_Lite/Blockly/Blockly-Changelog#codrone-prolite-library-changelog","content":"","version":"Next","tagName":"h2"},{"title":"Junior Block Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation","content":"","keywords":"","version":"Next"},{"title":"Flight Commands​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#flight-commands","content":" ","version":"Next","tagName":"h2"},{"title":"take off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#take-off","content":" Block​    Description​  This function makes the CoDrone take off from the ground.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"land​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#land","content":" Block​    Description​  This function slowly lands the CoDrone.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"emergency stop​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#emergency-stop","content":" Block​    Description​  Stops all commands to motors. The CoDrone will stop flying immediately.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"go [direction] for [duration] seconds​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#go-direction-for-duration-seconds","content":" Block​    Description​  CoDrone moves to a given direction for a given duration, in seconds.  Parameters​    direction: the direction of flight duration: the duration of flight, in seconds  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"go [direction] for [duration] seconds at [power]% power​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#go-direction-for-duration-seconds-at-power-power","content":" Block​    Description​  CoDrone moves to a given direction for a given duration, in seconds, at a given power.  Parameters​    direction: the direction of flight duration: the duration of flight, in seconds power: the power/speed of the flight  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn [direction] for [duration] seconds at [power]% power​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#turn-direction-for-duration-seconds-at-power-power","content":" Block​    Description​  Turns the CoDrone to a given direction for a given duration, in seconds, at a given power/speed.  Parameters​    direction: the direction of turn duration: the duration of turn, in seconds power: the power/speed of the turn  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn 180 degrees​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#turn-180-degrees","content":" Block​    Description​  Turns around the CoDrone 180 degrees  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hover for [duration] seconds​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#hover-for-duration-seconds","content":" Block​    Description​  Makes the CoDrone hover for a given duration in seconds.  Parameters​  duration: the time the CoDrone should hover  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Flight Sequences​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#flight-sequences","content":" ","version":"Next","tagName":"h2"},{"title":"fly in a square​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#fly-in-a-square","content":" Block​    Description​  CoDrone flies in a square pattern.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"fly in a circle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#fly-in-a-circle","content":" Block​    Description​  CoDrone flies in a circle pattern.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"fly in a spiral​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#fly-in-a-spiral","content":" Block​    Description​  CoDrone flies in a spiral pattern.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hop forward​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#hop-forward","content":" Block​    Description​  CoDrone flies in a forward hop pattern  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"sway​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#sway","content":" Block​    Description​  CoDrone flies in a swaying pattern.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"zigzag​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#zigzag","content":" Block​    Description​  CoDrone flies in a zigzag pattern.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Status Checkers​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#status-checkers","content":" ","version":"Next","tagName":"h2"},{"title":"is code running?​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#is-code-running","content":" Block​    Description​  Returns a True value while your code is running. Use this block instead of &quot;while True&quot; when you want to run a &quot;forever&quot; loop. Use the &quot;Stop&quot; button in Blockly to stop the program.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"get height from ground​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#get-height-from-ground","content":" Block​    Description​  This function returns the current height of the drone from the object directly below its IR sensor.  Parameters​  None  Returns​  height: The current height above the object directly below the drone’s IR height sensor as an int (mm).  Example​      ","version":"Next","tagName":"h3"},{"title":"get battery percentage​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#get-battery-percentage","content":" Block​    Description​  This function returns the current battery percentage of the CoDrone, from 0 to 100.  Parameters​  None  Returns​  percentage: The battery’s percentage as an integer from 0 - 100.  Example​      ","version":"Next","tagName":"h3"},{"title":"get gyro data​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#get-gyro-data","content":" Block​    Description​  This function gets the data from the gyrometer sensor to determine the roll, pitch, and yaw as angles.  Parameters​  None  Returns​  Returns a list of angles: roll, pitch, and yaw, respectively  Example​      ","version":"Next","tagName":"h3"},{"title":"Lights​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#lights","content":" ","version":"Next","tagName":"h2"},{"title":"set arm color to [color], with a brightness of [brightness]​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#set-arm-color-to-color-with-a-brightness-of-brightness","content":" Block​    Description​  CoDrone lights its arms with the given color at a given brightness.  Parameters​    color: The color of the arms' LEDs brightness: The brightness of the arms' LEDs  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set arm color to [color], and pattern to [pattern], with a speed of [speed]​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#set-arm-color-to-color-and-pattern-to-pattern-with-a-speed-of-speed","content":" Block​    Description​  CoDrone lights its arms with the given color and given light pattern at a given speed.  Parameters​    color: The color of the arms' LEDs pattern: The lighting pattern of the arms' LEDs speed: The speed of the lighting pattern  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set eye color to [color], with a brightness of [brightness]​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#set-eye-color-to-color-with-a-brightness-of-brightness","content":" Block​    Description​  CoDrone lights its eyes with the given color at a given brightness.  Parameters​    color: The color of the arms' LEDs brightness: The brightness of the arms' LEDs  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set eye color to [color], and pattern to [pattern], with a speed of [speed]​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#set-eye-color-to-color-and-pattern-to-pattern-with-a-speed-of-speed","content":" Block​    Description​  CoDrone lights its eyes with the given color and given light pattern at a given speed.  Parameters​    color: The color of the eyes' LEDs pattern: The lighting pattern of the eyes' LEDs speed: The speed of the lighting pattern  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"strobe eye lights​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#strobe-eye-lights","content":" Block​    Description​  CoDrone turns on strobing effect for eye lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"strobe arm lights​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#strobe-arm-lights","content":" Block​    Description​  CoDrone turns on strobing effect for arm lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn eyes off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#turn-eyes-off","content":" Block​    Description​  CoDrone's eye lights turn off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn arms off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Junior-Block-Documentation#turn-arms-off","content":" Block​    Description​  CoDrone's arm lights turn off.  Parameters​  None  Returns​  None  Example​   ","version":"Next","tagName":"h3"},{"title":"Offline App Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Blockly/Offline-App-Documentation","content":"Offline App Documentation","keywords":"","version":"Next"},{"title":"Senior Block Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation","content":"","keywords":"","version":"Next"},{"title":"Flight Commands​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#flight-commands","content":" ","version":"Next","tagName":"h2"},{"title":"takeoff()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#takeoff","content":" Block​    Description​  This function makes the CoDrone take off from the ground.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"land()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#land","content":" Block​    Description​  This function lands the CoDrone slowly.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"emergency_stop()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#emergency_stop","content":" Block​    Description​  Stops all commands to motors. The CoDrone will stop flying immediately.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move([duration] sec, [roll]%, [pitch]%, [yaw]%, [throttle]%)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#moveduration-sec-roll-pitch-yaw-throttle","content":" Block​    Description​  Moves CoDrone based on the given roll, pitch, yaw, and throttle power for a given duration, in seconds.  Parameters​  duration: time of movement/flight roll: the power for the roll movement (-100 - 100) pitch: the power for the pitch movement (-100 - 100) yaw: the power for the yaw movement (-100 - 100) throttle: the power for the throttle (-100 - 100)   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn([direction], [duration] seconds, [power]%)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#turndirection-duration-seconds-power","content":" Block​    Description​  Turns the CoDrone to a given direction for a given duration, in seconds, at a given power/speed.  Parameters​    direction: the direction of the turn duration: the duration of the turn power: the power/speed of the turn   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hover([duration] sec)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#hoverduration-sec","content":" Block​    Description​  Makes the CoDrone hover for a given duration, in seconds.  Parameters​  duration: duration of the hover  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Flight Variables​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#flight-variables","content":" ","version":"Next","tagName":"h2"},{"title":"set_roll([power]%)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#set_rollpower","content":" Block​    Description​  This function sets the roll direction variable but will not move the CoDrone. Negative values will move the drone to the left and positive values will move the drone to the right.  Parameters​  power: integer between -100 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_pitch([power]%)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#set_pitchpower","content":" Block​    Description​  This function sets the pitch direction variable but will not move the CoDrone. Negative values will move the drone to the backward and positive values will move the drone to the forward.  Parameters​  power: integer between -100 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_yaw([power]%)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#set_yawpower","content":" Block​    Description​  This function sets the yaw direction variable but will not rotate the CoDrone. Negative values will rotate the drone to the left and positive values will rotate the drone to the right.  Parameters​  power: integer between -100 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set_throttle([power]%)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#set_throttlepower","content":" Block​    Description​  This function sets the throttle direction variable but will not move the CoDrone. Negative values will move the drone to the down and positive values will move the drone up.  Parameters​  power: integer between -100 and 100  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move([duration] sec)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#moveduration-sec","content":" Block​    Description​  Moves the CoDrone for a given duration based on the flight variable blocks preceding this block.  Parameters​  duration: the time of the movement  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#move","content":" Block​    Description​  Moves the CoDrone indefinitely based on the flight variable blocks preceding this block.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"get_roll()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#get_roll","content":" Block​    Description​  Returns the current value for the roll flight variable.  Parameters​  None  Returns​  roll: the power of the roll (-100 - 100)  Example​      ","version":"Next","tagName":"h3"},{"title":"get_pitch()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#get_pitch","content":" Block​    Description​  Returns the current value for the pitch flight variable.  Parameters​  None  Returns​  pitch: the power of the pitch (-100 - 100)  Example​      ","version":"Next","tagName":"h3"},{"title":"get_yaw()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#get_yaw","content":" Block​    Description​  Returns the current value for the yaw flight variable.  Parameters​  None  Returns​  yaw: the power of the yaw (-100 - 100)  Example​      ","version":"Next","tagName":"h3"},{"title":"get_throttle()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#get_throttle","content":" Block​    Description​  Returns the current value for the throttle flight variable.  Parameters​  None  Returns​  throttle: the power of the throttle (-100 - 100)  Example​      ","version":"Next","tagName":"h3"},{"title":"Status Checkers​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#status-checkers","content":" ","version":"Next","tagName":"h2"},{"title":"is_code_running()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#is_code_running","content":" Block​    Description​  Returns a True value while your code is running. Use this block instead of &quot;while True&quot; when you want to run a &quot;forever&quot; loop. Use the &quot;Stop&quot; button in Blockly to stop the program.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Lights​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#lights","content":" ","version":"Next","tagName":"h2"},{"title":"arm_color([red], [green], [blue], [brightness] brightness)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#arm_colorred-green-blue-brightness-brightness","content":" Block​    Description​  Sets the LED color of CoDrone's arms using RGB values and their brightness with value from 1 - 100.  Parameters​  red: Pixel value for the color red green: Pixel value for the color green blue: Pixel value for the color blue brightness: brightness of the LED color  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"eye_color([red], [green], [blue], [brightness] brightness)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#eye_colorred-green-blue-brightness-brightness","content":" Block​    Description​  Sets the LED color of CoDrone's eyes using RGB values and their brightness with value from 1 - 100.  Parameters​  red: Pixel value for the color red green: Pixel value for the color green blue: Pixel value for the color blue brightness: brightness of the LED color  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"arm_default_color([red], [green], [blue], [brightness] brightness)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#arm_default_colorred-green-blue-brightness-brightness","content":" Block​    Description​  Sets the default LED color of CoDrone's arms using RGB values and their brightness with value from 1 - 100, so it will remain that color even after powering off and back on.  Parameters​  red: Pixel value for the color red green: Pixel value for the color green blue: Pixel value for the color blue brightness: brightness of the LED color  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"eye_default_color([red], [green], [blue], [brightness] brightness)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#eye_default_colorred-green-blue-brightness-brightness","content":" Block​    Description​  Sets the default LED color of CoDrone's eyes using RGB values and their brightness with value from 1 - 100, so it will remain that color even after powering off and back on.  Parameters​  red: Pixel value for the color red green: Pixel value for the color green blue: Pixel value for the color blue brightness: brightness of the LED color  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"arm_pattern([red], [green], [blue], [pattern], [speed] speed)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#arm_patternred-green-blue-pattern-speed-speed","content":" Block​    Description​  Sets the LED color of CoDrone's arms using RGB values with a given pattern at a given speed  Parameters​    red: pixel value for the color red green: pixel value for the color green blue: pixel value for the color blue pattern: lighting pattern of the LEDs speed: speed of the lighting pattern  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"eye_pattern([red], [green], [blue], [pattern], [speed] speed)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#eye_patternred-green-blue-pattern-speed-speed","content":" Block​    Description​  Sets the LED color of CoDrone's eyes using RGB values with a given pattern at a given speed  Parameters​    red: pixel value for the color red green: pixel value for the color green blue: pixel value for the color blue pattern: lighting pattern of the LEDs speed: speed of the lighting pattern  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"default_eye_pattern([red], [green], [blue], [pattern], [speed] speed)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#default_eye_patternred-green-blue-pattern-speed-speed","content":" Block​    Description​  Sets default LED color of CoDrone's eyes using RGB values with a given pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on.  Parameters​    red: pixel value for the color red green: pixel value for the color green blue: pixel value for the color blue pattern: lighting pattern of the LEDs speed: speed of the lighting pattern  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"default_arm_pattern([red], [green], [blue], [pattern], [speed] speed)​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#default_arm_patternred-green-blue-pattern-speed-speed","content":" Block​    Description​  Sets default LED color of CoDrone's arms using RGB values with a given pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on.  Parameters​    red: pixel value for the color red green: pixel value for the color green blue: pixel value for the color blue pattern: lighting pattern of the LEDs speed: speed of the lighting pattern  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"arm_strobe()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#arm_strobe","content":" Block​    Description​  CoDrone turns on strobing effect for arm lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"eye_strobe()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#eye_strobe","content":" Block​    Description​  CoDrone turns on strobing effect for eye lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"arm_default_strobe()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#arm_default_strobe","content":" Block​    Description​  Sets a default strobing effect for arm lights, which will still be in effect after it's turned off and on.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"eye_default_strobe()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#eye_default_strobe","content":" Block​    Description​  Sets a default strobing effect for eye lights, which will still be in effect after it's turned off and on.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"arm_off()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#arm_off","content":" Block​    Description​  Turns off all arm lights off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"eye_off()​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/CoDronePro_Lite/Blockly/Senior-Block-Documentation#eye_off","content":" Block​    Description​  Turns off all eye lights off.  Parameters​  None  Returns​  None  Example​   ","version":"Next","tagName":"h3"},{"title":"What is Blockly?","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Blockly/What-is-Blockly","content":"What is Blockly?","keywords":"","version":"Next"},{"title":"Python","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Python/","content":"Python Python Function Documentation","keywords":"","version":"Next"},{"title":"Function Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneMini/Python/Function-Documentation","content":"","keywords":"","version":"Next"},{"title":"Connection​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#connection","content":" ","version":"Next","tagName":"h2"},{"title":"pair()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#pair","content":" Description​  This function connects your controller with the program. You can set debug equal to True if you want to see helpful print statements that can help you debug your code. We recommend setting this to True to check if commands are being skipped. You can also set the specific USB port name.  Syntax​  pair() pair(port_name) pair(debug=False) pair(debug=False, port_name)  Parameters​  string port_name: the port name or number. boolean debug: Defaults to False. True to see helpful print statements for debugging  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # pair automatically, may not always work # drone.pair(debug=True) # sets the debug statements to True # drone.pair(port_name = 'COM3') # pair with a specific port drone.takeoff() drone.hover(3) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"Flight Commands (Start/Stop)​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#flight-commands-startstop","content":" ","version":"Next","tagName":"h2"},{"title":"emergency_stop()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#emergency_stop","content":" Description​  This function immediately stops all commands and motors, so the drone will stop flying immediately. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and emergency stop, it is recommended to run a hover() or time.sleep() in between the takeoff() and emergency_stop(), because the CoDrone Mini might miss the emergency_stop() command.  Syntax​  emergency_stop()  Parameters​  None  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.hover(3) #Recommended to have a hover() or time.sleep(1) before landing drone.emergency_stop() drone.close()     ","version":"Next","tagName":"h3"},{"title":"headless_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#headless_off","content":" Description​  This function turns off headless mode. In this mode, the drone is keeping track of which direction it's facing and will fly relative to which direction it is facing. Remember that the &quot;front&quot; is denoted by the red line on the shell.  Syntax​  headless_off()  Parameters​  None  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.headless_on() # Run the code once, then switch to headless_off() and run again to see the difference. drone.takeoff() drone.set_yaw(20) drone.move(1) drone.set_yaw(0) drone.set_pitch(40) drone.move(1) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"headless_on()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#headless_on","content":" Description​  This function turns on headless mode, meaning that no matter in which direction the drone is facing, it will fly in the directions relative to you. This is ideal for long range drones.  Syntax​  headless_on()  Parameters​  None  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.headless_on() # Run the code once, then switch to headless_off() and run again to see the difference. drone.takeoff() drone.set_yaw(20) drone.move(1) drone.set_yaw(0) drone.set_pitch(40) drone.move(1) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"land()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#land","content":" Description​  This function makes the drone stop all commands, hover, and make a soft landing where it is. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and immediately land, it is recommended to run a hover() or time.sleep() in between the takeoff() and land(), because the CoDrone Mini will often miss the land command otherwise.  Syntax​  land()  Parameters​  None  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.hover(3) # include a hover() or time.sleep() to prevent land() from skipping drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"reset_sensor()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#reset_sensor","content":" Description​  This function will reset the gyro angles back to zero for roll, pitch, and yaw. NOTE: If you're resetting right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the take off might be skipped.  Syntax​  reset_sensor()  Parameters​  None  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() print(&quot;Before &quot;, drone.get_angle()) drone.takeoff() drone.set_yaw(50) drone.move(1) drone.land() print(&quot;After &quot;,drone.get_angle()) drone.reset_sensor() print(&quot;Reset &quot;, drone.get_angle()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"reset_trim()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#reset_trim","content":" Description​  You can reset the roll and pitch trim of the drone in case your drone is drifting. This function will reset the roll and pitch trim values back to zero. NOTE: If you're resetting the trim right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the take off might be skipped.  Syntax​  reset_trim()  Parameters​  None  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.set_trim(5,0) print(drone.get_trim()) drone.takeoff() drone.hover(3) drone.land() drone.reset_trim() print(drone.get_trim()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_trim()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#set_trim","content":" Description​  You can set the roll and pitch trim of the drone in case your drone is drifting. For example, if the drone is drifting to its right, you may want to set the roll to a small negative value. This trim will remain saved, even after powering off until you've changed the trim either programmatically, or done a reset with the remote. NOTE: If you're setting the trim right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the takeoff commmand might be skipped.  Syntax​  set_trim(roll, pitch)  Parameters​  integer roll: the power of the roll, which is from -100 to 100 integer pitch: the power of the pitch, which is from -100 to 100   Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.set_trim(-1, 0) # example: drone is drifting right, so trim to roll left a little bit time.sleep(1) # Add a time.sleep(1) before takeoff if you're planning to set the trim before takeoff drone.takeoff() drone.hover(3) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"takeoff()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#takeoff","content":" Description​  This function makes the drone takeoff and hover. The drone will always hover for 3 seconds in order to stabilize before it executes the next command. If it receives no command for 8 seconds, it will automatically land.  Syntax​  takeoff()  Parameters​  None  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"Flight Commands (Movement)​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#flight-commands-movement","content":" ","version":"Next","tagName":"h2"},{"title":"flip()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#flip","content":" Description​  This function makes the drone do a flip in one of four directions: forward, backward, left, or right. It's recommended that you wait a few seconds in between successive flips, otherwise the sequence may not appear as expected.  Syntax​  flip(direction)  Parameters​  enum Direction: Direction.FORWARD, Direction.BACKWARD, Direction.LEFT, Direction.RIGHT  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini import time from CoDrone_mini import Direction drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.flip(Direction.FORWARD) time.sleep(3) # recommended wait time between flips drone.flip(Direction.LEFT) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"fly_sequence()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#fly_sequence","content":" Description​  This function makes the drone fly in a pre-determined shape. The options are square, spiral, triangle, hop, sway, and zigzag. It's recommended that you make sure the drone is trimmed and hovering stably before running a sequence, otherwise the sequence may not appear as expected.  Syntax​  fly_sequence(sequence)  Parameters​  enum Sequence: SQUARE, SPIRAL, TRIANGLE, HOP, SWAY, ZIGZAG  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini from CoDrone_mini import Sequence drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.fly_sequence(Sequence.ZIGZAG) # Fly zigzag (move left and right 2 times each while move forward) drone.fly_sequence(Sequence.SPIRAL) # Fly Spiral shape drone.fly_sequence(Sequence.SQUARE) # Fly square shape drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"go()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#go","content":" Description​  A simpler Junior level function that represents flight with direction with more natural language. It simply flies in the given direction for a given duration and power.  Syntax​  go(direction) go(direction, duration) go(direction, duration, power)  Parameters​  enum Direction: an enum in Python. It’s the direction of the flight, which can be one of the following: FORWARD, BACKWARD, LEFT, RIGHT, UP, and DOWN. integer duration: the duration of the flight motion in seconds. If undefined, defaults to run indefinitely. integer power: the power at which the drone flies forward. Takes a value from 0 to 100. Defaults to 50 if not defined.  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini from CoDrone_mini import Direction drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() # Try each of these commands by uncommenting them #drone.go(Direction.FORWARD) # Go forward indefinitely at 50% power #drone.go(Direction.UP, 2) # Go up for 5 seconds at 50% power drone.go(Direction.BACKWARD, 3, 40) # Go backwards for 3 seconds at 70% power drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"hover()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#hover","content":" Description​  This function makes the drone hover for a given amount of time. If given no parameters, it will hover indefinitely until given a another command.  Syntax​  hover(duration)  Parameters​  integer duration: the duration of the hovering in seconds.   Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.hover(3) # hover for 3 seconds #drone.hover() # hover indefinitely drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"turn()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#turn","content":" Description​  A function that represents yaw, but with more natural language. It turns CoDrone Mini in the given direction, with the given duration and power.  Syntax​  turn(direction) turn(direction, duration) turn(direction, duration, power)  Parameters​  enum Direction: an enum in Python. It’s the direction of the turn, which can either LEFT or RIGHT. integer duration: the duration of the turn in seconds. If 0, it will turn default to turn indefinitely. integer power: the power at which the drone turns right. Takes a value from 0 to 100. Defaults to 50 if not defined.  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini from CoDrone_mini import Direction drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.turn(Direction.LEFT) # Turn left indefinitely at 50 power drone.turn(Direction.RIGHT, 3, 100) # Turn right for 3 seconds at 100 power drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"Flight Variables​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#flight-variables","content":" ","version":"Next","tagName":"h2"},{"title":"get_pitch()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_pitch","content":" Description​  This is a getter function that gets the value of the pitch variable.  Syntax​  get_pitch()  Parameters​  None  Returns​  integer power: The power of the pitch variable  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # Print current pitch with getter function print(&quot;Current pitch : &quot;, drone.get_pitch()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_roll()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_roll","content":" Description​  This is a getter function that gets the value of the roll variable.  Syntax​  get_roll()  Parameters​  None  Returns​  integer power: The power of the roll variable  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # Print current roll with getter function print(&quot;Current Roll : &quot;, drone.get_roll()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_throttle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_throttle","content":" Description​  This is a getter function that gets the value of the throttle variable.  Syntax​  get_throttle()  Parameters​  None  Returns​  integer power: The power of the throttle variable  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # Print current throttle with getter function print(&quot;Current throttle : &quot;, drone.get_throttle()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_yaw()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_yaw","content":" Description​  This is a getter function that gets the value of the yaw variable.  Syntax​  get_yaw()  Parameters​  None  Returns​  integer power: The power of the yaw variable  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # Print current yaw with getter function print(&quot;Current yaw : &quot;, drone.get_yaw()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"move()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#move","content":" Description​  You can use this function to create more complex flight movements. With no parameters, move() will just run based on whatever the flight variables have been set to with functions like setPitch() and setThrottle() indefinitely. You can also run it for a certain duration. The function also takes multiple parameters, where you can set roll, pitch, yaw, and throttle all at once. You can run it infinitely with 4 parameters, or you can run it for a given duration with 5 parameters. If the drone is not flying, nothing will happen. You must takeoff() first to use a move() function.  Syntax​  move(): runs indefinitely move(duration): runs the given number of seconds move(roll, pitch, yaw, throttle): runs indefinitely move(duration, roll, pitch, yaw, throttle)  Parameters​  integer duration: the duration of the flight motion in seconds. integer roll: the power of the roll, which is from -100 to 100 integer pitch: the power of the pitch, which is from -100 to 100 integer yaw: the power of the yaw, which is from -100 to 100 integer throttle: the power of the throttle, which is from -100 to 100  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.set_pitch(20) drone.move(5) # Move 5 seconds based on the current value of flight variables drone.move() # Move indefinitely based on the current value of flight variables drone.set_pitch(0) # Set pitch back to 0 for the remaining examples drone.move(5, 0, 0, 80, 80) # Move up(throttle) and turn left(yaw) for 5 seconds drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_pitch()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#set_pitch","content":" Description​  This is a setter function that allows you to set the pitch variable. Once you set pitch, you have to use move() to actually execute the movement. The pitch variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to pitch again.  Syntax​  set_pitch(power)  Parameters​  integer power: Sets the pitch variable, between -100 and 100. The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards.  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_pitch(50) drone.move(1) #use move() to execute the movement for 1 second drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_roll()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#set_roll","content":" Description​  This is a setter function that allows you to set the roll variable. Once you set roll, you have to use move() to actually execute the movement. The roll variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to roll again.  Syntax​  set_roll(power)  Parameters​  integer power: Sets the roll variable, between -100 and 100. The number represents the direction and power of the output for that flight motion variable. Negative roll is left, positive roll is right.  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_roll(50) drone.move(1) #use move() to execute the movement for 1 second drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_throttle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#set_throttle","content":" Description​  This is a setter function that allows you to set the throttle variable. Once you set throttle, you have to use move() to actually execute the movement. The throttle variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to throttle again.  Syntax​  set_throttle(power)  Parameters​  integer power: Sets the throttle variable, between -100 and 100.. The number represents the direction and power of the output for that flight motion variable. Negative throttle descends, positive throttle ascends.  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() # Drone goes up for 1 second with 50% power drone.set_throttle(50) drone.move(1) #use move() to execute the movement for 1 second drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_yaw()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#set_yaw","content":" Description​  This is a setter function that allows you to set the yaw variable. Once you set yaw, you have to use move() to actually execute the movement. The yaw variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to yaw again.  Syntax​  set_yaw(power)  Parameters​  integer power: Sets the pitch variable, between -100 and 100. The number represents the direction and power of the output for that flight motion variable. Negative yaw turns left, positive yaw turns right.  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() # Drone turns right for 1 second with 50% power drone.set_yaw(50) drone.move(1) #use move() to execute the movement for 1 second drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"LED-and-Buzzer​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#led-and-buzzer","content":" ","version":"Next","tagName":"h2"},{"title":"LED_color()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#led_color","content":" Description​  This function sets the LED color of the CoDrone Mini's LED using RGB values and their brightness with a value from 1 - 100. NOTE: If you're setting the LED right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the take off might be skipped.  Syntax​  LED_color(red, green, blue, brightness)   Parameters​  integer red: the pixel value for the color red from 0 to 255 integer green: the pixel value for the color green from 0 to 255 integer blue: the pixel value for the color blue from 0 to 255 integer brightness: the brightness of the LEDs from 0 to 100   Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.LED_color(255, 0, 0, 100) # set LED color to red using RGB time.sleep(1) # Add a time.sleep(1) before takeoff if you're planning to set the LED cover before takeoff, otherwise the takeoff might get missed drone.takeoff() drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"LED_pattern()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#led_pattern","content":" Description​  This function sets the color of CoDrone mini LED light and makes it flash in a particular pre-set pattern at a given speed.  Syntax​  LED_pattern(red, green, blue, mode) LED_pattern(red, green, blue, mode, speed)   Parameters​  integer red: the pixel value for the color red from 0 to 255 integer green: the pixel value for the color green from 0 to 255 integer blue: the pixel value for the color blue from 0 to 255 enum Mode: an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, PULSE, FADE_IN, FADE_OUT integer speed: the speed of the lighting pattern from 1 to 10. 1 is slowest, 10 is fastest. Default value is 5.   Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini from CoDrone_mini import Mode drone = CoDrone_mini.CoDrone() drone.pair() time.sleep(1) # to prevent skipping the LED command drone.LED_pattern(0, 100, 0, Mode.PULSE, 5) drone.close()     ","version":"Next","tagName":"h3"},{"title":"play_note()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#play_note","content":" Description​  This function allows you to program the buzzer on the remote, not the drone. This function takes two parameters. The first is the note or frequency desired. The second parameter is how long you want the note to play in seconds. The Note class must be imported to use this function.  Syntax​  play_note(note, duration)play_note(frequency, duration)  Parameters​  enum Note: the note of the buzzer based off of the given Note value from Note.C3 to Note.B7 integer frequency: the note of the buzzer based off of the given frequency in Hertz float duration: The duration of the note in seconds   Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini from CoDrone_mini import Note drone = CoDrone_mini.CoDrone() drone.pair() drone.play_note(Note.C4, 0.5) drone.play_note(Note.D4, 0.5) drone.play_note(Note.E4, 0.5) drone.play_note(Note.F4, 0.5) drone.play_note(Note.G4, 0.5) drone.play_note(440,0.5) # 440 Hz is Note.C4 drone.close()     ","version":"Next","tagName":"h3"},{"title":"reset_LED()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#reset_led","content":" Description​  This function sets the LED color back to red and sets the mode to SOLID, which is the original default color and pattern.  Syntax​  reset_LED()  Parameters​  None  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.reset_LED() drone.close()     ","version":"Next","tagName":"h3"},{"title":"turn_off_LED()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#turn_off_led","content":" Description​  This function turns off the LED.  Syntax​  turn_off_LED()  Parameters​  None  Returns​  None  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.turn_off_LED() drone.close()     ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"get_altitude()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_altitude","content":" Description​  This is a getter function which returns the current altitude of the drone. It uses air pressure from the barometer sensor to estimate the altitude. This function returns the absolute altitude between the drone's current position and &quot;sea level&quot;, not the floor.  Syntax​  get_altitude()  Parameters​  None  Returns​  float altitude: The current height calculated by the difference between the current and the floor altitude (cm).  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() altitude = drone.get_altitude() print(altitude) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_angle","content":" Description​  This function gets the roll, pitch, and yaw angles from the gyrometer sensor.  Syntax​  get_angle()  Parameters​  None  Returns​  List Object angles: A list object with ROLL, PITCH, and YAW properties.  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # print the angle values angle = drone.get_angle() print(angle) print(angle.ROLL, angle.PITCH, angle.YAW) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_battery_percentage()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_battery_percentage","content":" Description​  This function gets the battery percentage of the drone, returning a value from 0 to 100.  Syntax​  get_battery_percentage()  Parameters​  None  Returns​  integer percentage: the battery's percentage from 0 - 100  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() battery = drone.get_battery_percentage() print(battery) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_drone_temp()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_drone_temp","content":" Description​  This is a getter function gets the drone's temperature from the barometer. The sensor reads the drone’s temperature, not the air around it.  Syntax​  get_drone_temp()  Parameters​  None  Returns​  integer temperature: the temperature in Celsius as an integer.  Example Code​  Python​  #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() # print the temperature time.sleep(1) # to prevent skipping for an accurate reading temperature = drone.get_drone_temp() print(temperature) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_height()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_height","content":" Description​  This is a getter function which returns the current height of the drone. It checks sea level from the barometer sensor first and then the altitude from the floor right after it is paired. This function returns the distance between the drone's current position and the floor or any surface below from where it took off from.  Syntax​  get_height()  Parameters​  None  Returns​  float height: the current height calculated by the difference between the current and the floor altitude(cm).  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.hover(3) height = drone.get_height() print(height) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_pressure()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_pressure","content":" Description​  This is a getter function that returns the data from the barometer. The function returns a value in the unit Pascals. Note: 1 atm = 101325 Pa  Syntax​  get_pressure()  Parameters​  None  Returns​  float pressure: The air pressure of the drone in Pascals.  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # print the pressure pressure = drone.get_pressure() print(pressure) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_trim()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneMini/Python/Function-Documentation#get_trim","content":" Description​  This function gets the current trim values of the drone.  Syntax​  get_trim()  Parameters​  None  Returns​  List Object trim values: A list object with ROLL, PITCH, YAW, and THROTTLE properties  Example Code​  Python​  #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # print the pressure trim = drone.get_trim() print(trim) print(trim.ROLL, trim.PITCH, trim.YAW, trim.THROTTLE) drone.close()  ","version":"Next","tagName":"h3"},{"title":"Python Changelog","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Python/Python-Changelog","content":"Python Changelog","keywords":"","version":"Next"},{"title":"Setup and Installation","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Python/Setup-and-Installation","content":"","keywords":"","version":"Next"},{"title":"Setup and Installation​","type":1,"pageTitle":"Setup and Installation","url":"/ko/docs/CoDronePro_Lite/Python/Setup-and-Installation#setup-and-installation","content":"","version":"Next","tagName":"h2"},{"title":"Update Library","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Python/Update-Library","content":"Update Library","keywords":"","version":"Next"},{"title":"What is Python?","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Python/What-is-Python","content":"What is Python?","keywords":"","version":"Next"},{"title":"Function Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation","content":"","keywords":"","version":"Next"},{"title":"Connection​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#connection","content":" ","version":"Next","tagName":"h2"},{"title":"disconnect()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#disconnect","content":" Description​  This function disconnects with the drone that you're connected to.  Syntax​  disconnect()  Parameters​  None  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.hover(1) drone.land() drone.disconnect() # disconnects from drone drone.close()     ","version":"Next","tagName":"h3"},{"title":"pair()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#pair","content":" Description​  This function pairs the BLE board to the CoDrone. After establishing a connection, it always waits for 3 seconds before executing the next command. With Python, pair() with no parameters will pair with the last paired CoDrone, which is saved in a file called &quot;PairInfo.&quot; If it's your first time running pair(), it will just find the nearest CoDrone it can find, then &quot;lock in&quot; with that CoDrone, save it to &quot;PairInfo&quot; and always pair with it until you run pair(drone.Nearest).  Syntax​  pair()  Parameters​  Nearest: Nearest in Python, it will pair with the first drone it finds (which may not always be the nearest CoDrone, in some cases, just the first CoDrone it finds). This function can be used to &quot;unlock&quot; the drone from only pairing with the CoDrone it's been &quot;locked in&quot; with. Once you've paired with a nearest CoDrone, you can run pair() again with no parameters, and it will only pair with the &quot;locked in&quot; CoDrone. address: This is the address of the CoDrone. This is the 4-digit number that identifies the CoDrone.  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # drone.pair(“5349”) # drone.pair(drone.Nearest) # you can set specific port name for pairing especially Windows need/require this # drone.pair(port_name = 'COM3') # drone.pair('1234', 'COM3') # drone.pair(drone.Nearest, 'COM3') drone.takeoff() drone.hover(3) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"Flight Commands (Start/Stop)​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#flight-commands-startstop","content":" ","version":"Next","tagName":"h2"},{"title":"takeoff()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#takeoff","content":" Description​  This function makes the drone take off and begin hovering. The drone will always hover for 3 seconds in order to stabilize before it executes the next command. If it receives no command for 8 seconds, it will automatically land.  Syntax​  takeoff()  Parameters​  None  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # CoDrone takes off from ground drone.hover(3) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"land()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#land","content":" Description​  This function makes the drone stop all commands, hovers, and makes a soft landing where it is. The function will also zero-out all of the flight motion variables to 0.  Syntax​  land()  Parameters​  None  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.hover(3) drone.land() # lands the CoDrone drone.close()     ","version":"Next","tagName":"h3"},{"title":"emergency_stop()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#emergency_stop","content":" Description​  This function immediately stops all commands and stops all motors, so the drone will stop flying immediately. The function will also zero-out all of the flight motion variables to 0.  Syntax​  emergency_stop()  Parameters​  None  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.emergency_stop() # stops commands/motors, falls down drone.close()     ","version":"Next","tagName":"h3"},{"title":"Flight Commands (Movement)​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#flight-commands-movement","content":" ","version":"Next","tagName":"h2"},{"title":"fly_sequence()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#fly_sequence","content":" Description​  This function make drone fly specific shape and hover after finish. The options are square, circle, spiral, triangle, hop, sway, zigzag.  Syntax​  fly_sequence(sequence)  Parameters​  enum Sequence: SQUARE, CIRCLE, SPIRAL, TRIANGLE, HOP, SWAY, ZIGZAG  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Sequence drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.fly_sequence(Sequence.TRIANGLE) # Fly triangle shape drone.fly_sequence(Sequence.SPIRAL) # Fly spiral shape drone.fly_sequence(Sequence.SQUARE) # Fly square shape drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"go_to_height()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#go_to_height","content":" Description​  This is a setter function will make the drone fly to the given height above the object directly below its IR sensor (usually the ground). It’s effective between 20 and 2000 millimeters. It uses the IR sensor to continuously check for its height.  Syntax​  go_to_height(height)  Parameters​  height: An int from 20 to 2000 in millimeters  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # Fly 1500mm away from bottom and hover drone.takeoff() drone.go_to_height(1500) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"go()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#go","content":" Description​  A simpler Junior level function that represents positive flight with a direction, but with more natural language. It simply flies in the given direction for the given duration and power.  Syntax​  go(direction) go(direction, duration) go(direction, duration, power)   Parameters​  enum Direction: an enum in Python. It’s the direction of the flight, which can be one of the following: FORWARD, BACKWARD, LEFT, RIGHT, UP, and DOWN. duration: the duration of the flight motion in seconds. If undefined, defaults to 1 seconds. If duration is 0, it will turn right indefinitely. power: the power at which the drone flies forward. Takes a value from 0 to 100. Defaults to 50 if not defined.  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Direction drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.go(Direction.FORWARD) # Go forward for 1 second at 50% power drone.go(Direction.UP, 5) # Go up for 5 seconds at 50% power drone.go(Direction.BACKWARD, 3, 70) # Go backwards for 3 seconds at 70% power drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"hover()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#hover","content":" Description​  This function makes the drone hover for a given amount of time. If you enter a 0 or None, it will hover indefinitely until given a another command.  Syntax​  hover(duration)  Parameters​  duration: the duration of the hovering in seconds.  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.hover(3) ## hovers in the air for 3 seconds drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"rotate180()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#rotate180","content":" Description​  This function makes the drone rotate 180 degrees. Only rotates in a random direction, because this is a pre-set flight event in the firmware.  Syntax​  rotate180()  Parameters​  None  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.rotate180() drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"turn_degree()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#turn_degree","content":" Description​  A Senior level function that yaws by a given degree in a given direction. This function takes an input degree in an input direction, and turns until it reaches the given degree. In some instances, the drone may turn past the given degree and need to rotate all the way around again before reaching the correct degree.  Syntax​  turn_degree(direction,degree)  Parameters​  enum Direction: an enum in Python. It’s the direction of the turn, which can be one of the following: LEFT and RIGHT enum Degree: an enum in Python. The degree the drone will turn to the right, with its starting position representing 0 degrees,Degree.ANGLE_30, Degree.ANGLE_45, Degree.ANGLE_60, Degree.ANGLE_90, Degree.ANGLE_120, Degree.ANGLE_135, Degree.ANGLE_150, Degree.ANGLE_180, Degree.ANGLE_210, Degree.ANGLE_225, Degree.ANGLE_240, Degree.ANGLE_270, Degree.ANGLE_300, Degree.ANGLE_315, Degree.ANGLE_330  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Direction, Degree drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.turn_degree(Direction.LEFT, Degree.ANGLE_45) # Turn left 45 degrees drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"turn()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#turn","content":" Description​  A function that represents yaw, but with more natural language. It simply turns in the given direction, duration and power.  Syntax​  turn(direction) turn(direction, duration) turn(direction, duration, power)   Parameters​  enum Direction: an enum in Python. It’s the direction of the turn, which can be one of the following: LEFT or RIGHT. duration: the duration of the turn in seconds. If 0, it will turn right indefinitely. Defaults to 1 second if not defined. power: the power at which the drone turns right. Takes a value from 0 to 100. Defaults to 50 if not defined.  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Direction drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.turn(Direction.LEFT) # Turn left for 1 second at -50 power drone.turn(Direction.LEFT, 0) # Turn left at -50 power indefinitely drone.turn(Direction.RIGHT, 3, 100) # Turn right for 3 seconds at 100 power drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"Flight Variables​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#flight-variables","content":" ","version":"Next","tagName":"h2"},{"title":"get_pitch()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_pitch","content":" Description​  This is a getter function that gets the value of the pitch variable.  Syntax​  get_pitch()  Parameters​  None  Returns​  power: returns the power of the pitch variable (int)  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # Print current pitch with getter function print(&quot;Current pitch : &quot;, drone.get_pitch()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_roll()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_roll","content":" Description​  This is a getter function that gets the value of the roll variable.  Syntax​  get_roll()  Parameters​  None  Returns​  power: The power of the roll variable (int)  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # Print current roll with getter function print(&quot;Current Roll : &quot;, drone.get_roll()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_throttle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_throttle","content":" Description​  This is a getter function that gets the value of the throttle variable.  Syntax​  get_throttle()  Parameters​  None  Returns​  power: The power of the throttle variable (int)  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # Print current throttle with getter function print(&quot;Current throttle : &quot;, drone.get_throttle()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_yaw()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_yaw","content":" Description​  This is a getter function that gets the value of the yaw variable.  Syntax​  get_yaw()  Parameters​  None  Returns​  power: The power of the yaw variable (int)  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # Print current yaw with getter function print(&quot;Current yaw : &quot;, drone.get_yaw()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"move()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#move","content":" Description​  You can use this function to create more complex flight movements. With no parameters, move() will just run based on whatever the flight variables have been set to with functions like set_pitch() and set_throttle() indefinitely. You can also run it for a certain duration. The function also takes multiple parameters, where you can set roll, pitch, yaw, and throttle all at once. You can run it infinitely with 4 parameters, or you can run it for a given duration with 5 parameters. If the drone is not flying, nothing will happen.  Syntax​  move() runs infinitely move(duration) move(roll, pitch, yaw, throttle) runs infinitely move(duration, roll, pitch, yaw, throttle)   Parameters​  duration: the duration of the flight motion in seconds. If 0, the duration is infinity. roll: the power of the roll, which is an int from -100 to 100 pitch: the power of the pitch, which is an int from -100 to 100 yaw: the power of the yaw, which is an int from -100 to 100 throttle: the power of the throttle, which is an int from -100 to 100   Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.move() # Move indefinitely based on the current value of flight variables drone.move(5) # Move 5 seconds based on the current value of flight variables drone.move(0, 0, 30, 30) # Move up(throttle) and turn left(yaw) indefinitely drone.move(5, 0, 0, 50, 50) # Move up(throttle) and turn left(yaw) for 5 seconds drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_pitch()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#set_pitch","content":" Description​  This is a setter function that allows you to set the pitch variable.  Syntax​  set_pitch(power)  Parameters​  power: An int from -100 to 100 that sets the pitch variable. The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards.  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_pitch(50) drone.move(1) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_roll()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#set_roll","content":" Description​  This is a setter function that allows you to set the roll variable.  Syntax​  set_roll(power)  Parameters​  power: An int from -100 to 100 that sets the roll variable. The number represents the direction and power of the output for that flight motion variable. Negative roll is left, positive roll is right.  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_roll(50) drone.move(1) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_throttle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#set_throttle","content":" Description​  This is a setter function that allows you to set the throttle variable.  Syntax​  set_throttle(power)  Parameters​  power: An int from -100 to 100 that sets the throttle variable. The number represents the direction and power of the output for that flight motion variable. Negative throttle descends, positive throttle ascends.  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # Drone goes up for 1 second with 50 power drone.set_throttle(50) drone.move(1) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_yaw()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#set_yaw","content":" Description​  This is a setter function that allows you to set the yaw variable.  Syntax​  set_yaw(power)  Parameters​  power: An int from -100 to 100 that sets the yaw variable. The number represents the direction and power of the output for that flight motion variable. Negative yaw turns left, positive yaw turns right.  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # Drone turns right for 1 second with 50 power drone.set_yaw(50) drone.move(1) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"LED​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#led","content":" ","version":"Next","tagName":"h2"},{"title":"arm_color()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#arm_color","content":" Description​  This function sets the LED color of the arms using RGB values and their brightness with value from 1 - 100.  Syntax​  arm_color(color, brightness) arm_color(red, green, blue, brightness)  Parameters​  enum Color: an enum, which can be set using predefined colors out of the list below in &quot;Example Code&quot; under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Color drone = CoDrone.CoDrone() drone.pair() drone.arm_color(Color.Red, 100) # set color to red using Color drone.arm_color(255, 0, 0, 100) # set color to red using RGB drone.close()   LED Color Options​   AliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, DarkOrange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, RebeccaPurple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen, EndOfColors     ","version":"Next","tagName":"h3"},{"title":"arm_default_color()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#arm_default_color","content":" Description​  This function sets the default LED color of the eyes as well as the mode, so it will remain that color even after powering off and back on. The colors set are using RGB values.  Syntax​  arm_default_color(red, green, blue, brightness)  Parameters​  red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Mode drone = CoDrone.CoDrone() drone.pair() # set default arm color to an RGB of (0, 0, 100) with full brightness drone.arm_default_color(0, 0, 100, 100) drone.close()     ","version":"Next","tagName":"h3"},{"title":"arm_default_pattern()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#arm_default_pattern","content":" Description​  This function sets the default color of the arm LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on.  Syntax​  arm_default_pattern(color, mode) arm_default_pattern(color, mode, speed) arm_default_pattern(red, green, blue, mode) arm_default_pattern(red, green, blue, mode, speed)  Parameters​  enum Color: an enum, which can be set using predefined colors out of the list under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 enum Mode: an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING, PULSE, REVERSE_PULSE speed: int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest.  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Mode drone = CoDrone.CoDrone() drone.pair() # set default arm pattern to RGB (0, 125, 155) and double blink quickly drone.arm_default_pattern(0, 125, 155, Mode.DOUBLE_BLINK, 10) drone.close()   ","version":"Next","tagName":"h3"},{"title":"arm_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#arm_off","content":" Description​  This function turns off the arm LEDs  Syntax​  arm_off()  Parameters​  None  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # turn off the arms drone.arm_off() drone.close()     ","version":"Next","tagName":"h3"},{"title":"arm_pattern()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#arm_pattern","content":" Description​  This function sets the color of the arm LED lights to flash in a particular pre-set pattern at a given speed.  Syntax​  arm_pattern(color, mode) arm_pattern(color, mode, speed) arm_pattern(red, green, blue, mode) arm_pattern(red, green, blue, mode, speed)  Parameters​  enum Color: an enum, which can be set using predefined colors out of the list under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 **blue: int value from 0 to 255 enum Mode: an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING, PULSE, REVERSE_PULSE speed: int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest.  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Mode, Color drone = CoDrone.CoDrone() drone.pair() drone.arm_pattern(Color.Red, Mode.DOUBLE_BLINK, 200) # Set arms to double blink red slowly using Color drone.arm_pattern(0, 100, 0, Mode.PULSE, 200) # Set arms to pulse green slowly using RGB drone.close()     ","version":"Next","tagName":"h3"},{"title":"arm_strobe()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#arm_strobe","content":" Description​  This function makes the arms to strobe in various colors  Syntax​  arm_strobe()  Parameters​  None  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # strobe the arms drone.arm_strobe() drone.close()     ","version":"Next","tagName":"h3"},{"title":"eye_color()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#eye_color","content":" Description​  This function sets the LED color of the arms using RGB values and their brightness with value a from 1 - 100.  Syntax​  eye_color(color, brightness) eye_color(red, green, blue, brightness)  Parameters​  enum Color: an enum, which can be set using predefined colors out of the list under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Color drone = CoDrone.CoDrone() drone.pair() drone.eye_color(Color.Red, 100) # set color to red using Color drone.eye_color(255, 0, 0, 100) # set color to red using RGB drone.close()     ","version":"Next","tagName":"h3"},{"title":"eye_default_color()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#eye_default_color","content":" Description​  This function sets the default LED color of the eyes using RGB values and their brightness with a value from 1 - 100. This means the color will remain, even after the CoDrone has been powered off and back on.  Syntax​  eye_default_color(red, green, blue, brightness)  Parameters​  red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Mode drone = CoDrone.CoDrone() drone.pair() # set default eye color to an RGB of (0, 0, 100) with full brightness drone.eye_default_color(0, 0, 100, 100) drone.close()     ","version":"Next","tagName":"h3"},{"title":"eye_default_pattern()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#eye_default_pattern","content":" Description​  This function sets the default color of the eyes LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on.  Syntax​  eye_default_pattern(color, mode) eye_default_pattern(color, mode, speed) eye_default_pattern(red, green, blue, mode) eye_default_pattern(red, green, blue, mode, speed)  Parameters​  enum Color: an enum, which can be set using predefined colors out of the list under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 enum Mode: an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING speed: int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Mode drone = CoDrone.CoDrone() drone.pair() # set default eye pattern to RGB (0, 125, 155) and double blink slowly drone.eye_default_pattern(0, 125, 155, Mode.DOUBLE_BLINK, 200) drone.close()     ","version":"Next","tagName":"h3"},{"title":"eye_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#eye_off","content":" Description​  This function turns off the eye LEDs  Syntax​  eye_off()  Parameters​  None  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # turn off the eyes drone.eye_off() drone.close()     ","version":"Next","tagName":"h3"},{"title":"eye_pattern()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#eye_pattern","content":" Description​  This function sets the color of the eye LED lights to flash in a particular pre-set pattern at a given speed.  Syntax​  eye_pattern(color, mode) eye_pattern(color, mode, speed) eye_pattern(red, green, blue, mode) eye_pattern(red, green, blue, mode, speed)  Parameters​  enum Color: an enum, which can be set using predefined colors out of the list under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 enum Mode: an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING speed: int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Color, Mode drone = CoDrone.CoDrone() drone.pair() drone.eye_pattern(Color.Red, Mode.BLINK, 1) # Set eyes to blink red slowly using Color drone.eye_pattern(255, 0, 0, Mode.DIMMING, 200) # Set eyes to dim red slowly using RGB drone.close()     ","version":"Next","tagName":"h3"},{"title":"eye_strobe()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#eye_strobe","content":" Description​  This function makes the arms to strobe in various colors  Syntax​  eye_strobe()  Parameters​  None  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # strobe the eyes drone.eye_strobe() drone.close()     ","version":"Next","tagName":"h3"},{"title":"reset_default_led()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#reset_default_led","content":" Description​  This function sets the LED color of the eyes and arms back to red and sets the mode to SOLID, which is the original default color.  Syntax​  reset_default_led()  Parameters​  None  Returns​  None  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.reset_default_led() drone.close()     ","version":"Next","tagName":"h3"},{"title":"Status Checker​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#status-checker","content":" ","version":"Next","tagName":"h2"},{"title":"is_flying()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#is_flying","content":" Description​  This function checks whether the drone is flying and returns a boolean  Syntax​  is_flying()  Parameters​  None  Returns​  Boolean: Returns True/False whether the drone is flying  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() #land if flying. if drone.is_flying(): drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"is_ready_to_fly()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#is_ready_to_fly","content":" Description​  This function checks whether the drone is ready to fly by returning a boolean. The drone is ready to fly if it is oriented right-side up, and not flying.  Syntax​  is_ready_to_fly()  Parameters​  None  Returns​  Boolean: Returns True/False whether the drone is ready to fly.  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() #land if flying. if drone.is_ready_to_fly(): drone.takeoff() drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"is_upside_down()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#is_upside_down","content":" Description​  This function checks whether the drone is upside-down and returns a boolean  Syntax​  is_upside_down()  Parameters​  None  Returns​  Boolean: Returns True/False whether the drone is upside-down  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # takeoff when drone isn’t upside down if not drone.is_upside_down(): drone.takeoff() drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"on_low_battery()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#on_low_battery","content":" Description​  Add callback function when CoDrone battery percentage is lower than 50%  Syntax​  on_low_battery(function)  Parameters​  function: a callback function when battery is lower than 50%  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone import Mode # define function for change drone's arm LED green def set_arm_green(): drone.set_arm_LED(0,255,0, Mode.SOLID) drone = CoDrone.CoDrone() drone.pair() #set eventhandler to run self-defined &quot;set_arm_green&quot; function drone.on_low_battery(set_arm_green) drone.close()     ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"get_accelerometer()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_accelerometer","content":" Description​  This function gets the accelerometer sensor data, which returns x, y, and z.  Syntax​  get_accelerometer()  Parameters​  None  Returns​  class AccelData: Returns an acceleration class with x-, y-, and z-acceleration levels  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the acceleration of drone acceleration = drone.get_accelerometer() print(acceleration.X, acceleration.Y, acceleration.Z) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_angular_speed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_angular_speed","content":" Description​  This function gets the data from the gyrometer sensor for the roll, pitch, and yaw angular speed.  Syntax​  get_angular_speed()  Parameters​  None  Returns​  class GyroAngleData: Returns a class with angular speed data  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the angular speed of drone gyrodata = drone.get_angular_speed() print(gyrodata.ROLL, gyrodata.PITCH, gyrodata.YAW) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_battery_percentage()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_battery_percentage","content":" Description​  This function gets the battery percentage of the drone, returning a value from 0 to 100.  Syntax​  get_battery_percentage()  Parameters​  None  Returns​  percentage: The battery’s percentage as an integer from 0 - 100.  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # stop the drone if battery is lower than 10 percent. battery = drone.get_battery_percentage() if battery &lt; 10: drone.emergency_stop() drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_battery_voltage()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_battery_voltage","content":" Description​  This function gets the voltage of the battery.  Syntax​  get_battery_voltage()  Parameters​  None  Returns​  voltage: The voltage of the battery as an a float  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the battery voltage of drone. battery = drone.get_battery_voltage() print(battery) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_drone_temp()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_drone_temp","content":" Description​  This is a getter function gets the data from the drone’s temperature sensor. Importantly, it reads the drone’s temperature, not the air around it.  Syntax​  get_drone_temp()  Parameters​  None  Returns​  temperature: The temperature in Celsius as an integer.  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() ## print the temperature of drone temperature = drone.get_drone_temp() print(temperature) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_gyro_angles()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_gyro_angles","content":" Description​  This function gets the data from the gyrometer sensor to determine the roll, pitch, and yaw as angles.  Syntax​  get_gyro_angles()  Parameters​  None  Returns​  class AngleData: Returns a class that contains angle data  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the angles of drone GyroAngles = drone.get_gyro_angles() print(GyroAngles.ROLL, GyroAngles.PITCH, GyroAngles.YAW) drone.close()   Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the angles of drone GyroAngles = drone.get_gyro_angles() print(GyroAngles.ROLL, GyroAngles.PITCH, GyroAngles.YAW) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_height()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_height","content":" Description​  This is a getter function gets the current height of the drone from the object directly below its IR sensor.  Syntax​  get_height()  Parameters​  None  Returns​  height: The current height above the object directly below the drone’s IR height sensor as an int (mm).  Example Code​  #Python code import CoDrone from CoDrone import Direction import time drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # fly between 500mm and 1000mm for i in range(200): height = drone.get_height() if height &gt; 1000: drone.go(Direction.DOWN) elif height &lt; 500: drone.go(Direction.UP) time.sleep(0.1) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_opt_flow_position()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_opt_flow_position","content":" Description​  This function gets the x and y coordinates from the optical flow sensor. Keep in mind, the positioning does not take rotation into account.  Syntax​  get_opt_flow_position()  Parameters​  None  Returns​  class OptFlowData: it returns a class in Python indicating optical flow position  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the optical flow position x,y value position = drone.get_opt_flow_position() print(position.X, position.Y) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_pressure()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_pressure","content":" Description​  This is a getter function gets the data from the barometer sensor.  Syntax​  getPressure()  Parameters​  None  Returns​  pressure: The barometer’s air pressure in millibars at (0.13 resolution).  Example Code​  Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the pressure pressure = drone.get_pressure() print(pressure) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_state()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_state","content":" Description​  This function gets the state of the drone, as in whether it’s: ready, takeoff, flight, flip, stop, landing, reverse, accident, error.  Syntax​  get_state()  Parameters​  None  Returns​  string state: Returns a string indicating a state (READY, TAKE_OFF, FLIGHT, FLIP, STOP, LANDING, REVERSE, ACCIDENT, ERROR)  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # take off the drone if state is not on flight state = drone.get_state() if state != &quot;FLIGHT&quot;: drone.takeoff() drone.hover(3) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_trim()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#get_trim","content":" Description​  This function gets the current trim values of the drone.  Syntax​  get_trim()  Parameters​  None  Returns​  class TrimData: returns a class indicating trim levels  Example Code​  #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() #print current drone's trim value trim = drone.get_trim() print(trim.ROLL, trim.PITCH, trim.YAW, trim.THROTTLE) drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_plot_sensor()/draw_plot_sensor()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Python/Function-Documentation#set_plot_sensordraw_plot_sensor","content":" Description​  This function is used for drawing sensor data. The function should be used in pairs, with set_plot_sensor() starting the recording process, and draw_plot_sensor() doing the actual drawing process. You can plot the height sensor, the temperature sensor, the gyro angles, gyro raw sensor values, the image flow sensor, and the accelerometer sensor.  Syntax​  set_plot_sensor(sensor)/draw_plot_sensor()  Parameters​  class PlotType: PlotType.height, PlotType.angle, PlotType.temperature, PlotType.gyro, PlotType.image_flow, PlotType.accel  Returns​  None  Example Code​  #Python code import CoDrone from CoDrone.protocol import PlotType import time drone= CoDrone.CoDrone() drone.pair(drone.Nearest) # set up sensor for plotting. It will grab sensor data every second drone.set_plot_sensor(PlotType.height) # drone.set_plot_sensor(PlotType.height, PlotType.angle, PlotType.temperature, PlotType.gyro, PlotType.image_flow, PlotType.accel) # PlotType.angle, PlotType.temperature, PlotType.gyro, PlotType.image_flow, PlotType.accel drone.takeoff() time.sleep(5) drone.land() drone.draw_plot_sensor() drone.close()  ","version":"Next","tagName":"h3"},{"title":"Function Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation","content":"","keywords":"","version":"Next"},{"title":"Connection​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#connection","content":" ","version":"Next","tagName":"h2"},{"title":"disconnect()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#disconnect","content":" Description​  This function disconnects with the drone that you're connected to.  Syntax​  disconnect()  Parameters​  None  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //below this have to code in setup //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.hover(3); CoDrone.land(); CoDrone.disconnect(); // disconnects } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"pair()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#pair","content":" Description​  This function pairs the BLE board to the CoDrone. After establishing a connection, it always waits for 3 seconds before executing the next command. Pair works a bit differently between Arduino and Python. With the Arduino-based remote, pair() with no parameters will pair with the last paired CoDrone. If it's your first time running pair(), it will just find the nearest CoDrone it can find, then &quot;lock in&quot; with that CoDrone, save it to &quot;PairInfo&quot; and always pair with it until you run pair(drone.Nearest).  Syntax​  pair() pair(Nearest) pair(bluetoothAddress)  Parameters​  Nearest: If you specify Nearest in Arduino, it will pair with the first drone it finds (which may not always be the nearest CoDrone, in some cases, just the first CoDrone it finds). This function can be used to &quot;unlock&quot; the drone from only pairing with the CoDrone it's been &quot;locked in&quot; with. Once you've paired with a nearest CoDrrone, you can run pair() again with no parameters, and it will only pair with the &quot;locked in&quot; CoDrone. address: This is the address of the CoDrone. In Arduino, this is a 6-index array of bytes representing the Bluetooth address.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //below this have to code in setup CoDrone.begin(115200); //IMPORATNT: You would only run ONE of the 3 options below /* 1) This will pair with the last drone that the remote was paired to. If this is the first time pairing, * this function will pair with whatever first drone it finds, and &quot;lock in&quot; to that drone and only pair with * that drone */ CoDrone.pair(); /* 2) This will pair with the nearest drone that the BLE board finds. You can use this function to &quot;unlock&quot; a * remote that's been &quot;locked in&quot; to a drone. So first run this code, then just upload and run with &quot;CoDrone.pair()&quot; * to &quot;lock in&quot; to that drone */ CoDrone.pair(Nearest); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"Flight Commands (Start/Stop)​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#flight-commands-startstop","content":" ","version":"Next","tagName":"h2"},{"title":"emergencyStop()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#emergencystop","content":" Description​  This function immediately stops all commands and stops all motors, so the drone will stop flying immediately. The function will also zero-out all of the flight motion variables to 0.  Syntax​  emergencyStop()  Parameters​  None  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); // take off and hover for 3 second CoDrone.emergencyStop(); // emergency stop } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"land()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#land","content":" Description​  This function makes the drone stop all commands, hovers, and makes a soft landing where it is. The function will also zero-out all of the flight motion variables to 0.  Syntax​  land()  Parameters​  None  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //below this have to code in setup //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); // take off and hover for 3 second CoDrone.hover(3); // hover for 3 second CoDrone.land(); //landing } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"takeoff()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#takeoff","content":" Description​  This function makes the drone take off and begin hovering. The drone will always hover for 3 seconds in order to stabilize before it executes the next command. If it receives no command for 8 seconds, it will automatically land.  Syntax​  takeoff()  Parameters​  None  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //below this have to code in setup //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); // take off and hover for 3 second CoDrone.hover(3); // hover for 3 second CoDrone.land(); //landing } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"Flight Commands (Movement)​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#flight-commands-movement","content":" ","version":"Next","tagName":"h2"},{"title":"flySequence()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#flysequence","content":" Description​  This function make drone fly specific shape and hover after finish. The options are square, circle, spiral, triangle, hop, sway, zigzag  Syntax​  flySequence(sequence)  Parameters​  const Sequence: SQUARE, CIRCLE, SPIRAL, TRIANGLE, HOP, SWAY, ZIGZAG  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.flySequence(TRIANGLE); // Fly triangle shape CoDrone.flySequence(SPIRAL); // Fly spiral shape CoDrone.flySequence(SQUARE); // Fly square (right -&gt; forward -&gt; left -&gt; backward) CoDrone.land(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"goToHeight()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#gotoheight","content":" Description​  This is a setter function will make the drone fly to the given height above the object directly below its IR sensor (usually the ground). It’s effective between 20 and 2000 millimeters. It uses the IR sensor to continuously check for its height.  Syntax​  goToHeight(height)  Parameters​  height: An int from 20 to 2000 in millimeters  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.goToHeight(1000); // Fly 1000mm away from bottom and hover } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"go()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#go","content":" Description​  A simpler Junior level function that represents positive flight with a direction, but with more natural language. It simply flies in the given direction for the given duration and power.  Syntax​  go(direction) go(direction, duration) go(direction, duration, power)  Parameters​  const Direction: a constant in Arduino. It’s the direction of the flight, which can be one of the following: FORWARD, BACKWARD, LEFT, RIGHT, UP, and DOWN. duration: the duration of the flight motion in seconds. If undefined, defaults to 1 seconds. If duration is 0, it will turn right indefinitely. power: the power at which the drone flies forward. Takes a value from 0 to 100. Defaults to 50 if not defined.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.go(FORWARD); // Go forward at 50% power for 1 second CoDrone.go(UP, 5); // Go up for 5 seconds at 50% power CoDrone.go(BACKWARD, 3, 70) // Go backwards for 3 seconds at 70% power } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"hover()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#hover","content":" Description​  This function makes the drone hover for a given amount of time. If you enter a 0 or None, it will hover indefinitely until given a another command.  Syntax​  hover(duration)  Parameters​  duration: the duration of the hovering in seconds.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); // take off and hover for 3 second CoDrone.hover(3); // hover for 3 second CoDrone.land(); //landing } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"rotate180()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#rotate180","content":" Description​  This function makes the drone rotate 180 degrees. Only rotates in a random direction, because this is a pre-set flight event in the firmware.  Syntax​  rotate180()  Parameters​  None  Returns​  None  Example Code​      ","version":"Next","tagName":"h3"},{"title":"turnDegree()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#turndegree","content":" Description​  A Senior level function that yaws by a given degree in a given direction. This function takes an input degree in an input direction, and turns until it reaches the given degree. In some instances, the drone may turn past the given degree and need to rotate all the way around again before reaching the correct degree.  Syntax​  turnDegree(direction, degree)  Parameters​  const Direction: LEFT or RIGHT const Degree: a constant in Arduino. The degree the drone will turn to the right, with its starting position representing 0 degrees, ANGLE_30, ANGLE_45, ANGLE_60, ANGLE_90, ANGLE_120, ANGLE_135, ANGLE_150, ANGLE_180, ANGLE_210, ANGLE_225, ANGLE_240, ANGLE_270, ANGLE_300, ANGLE_315, ANGLE_330  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.turnDegree(LEFT, ANGLE_45); // Turn left 45 degrees } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"turn()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#turn","content":" Description​  A function that represents yaw, but with more natural language. It simply turns in the given direction, duration and power.  Syntax​  turn(direction) turn(direction, duration) turn(direction, duration, power)  Parameters​  const Direction: a constant in Arduino. It’s the direction of the turn, which can be one of the following: LEFT or RIGHT. duration: the duration of the turn in seconds. If 0, it will turn right indefinitely. Defaults to 1 second if not defined. power: the power at which the drone turns right. Takes a value from 0 to 100. Defaults to 50 if not defined.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.turn(LEFT); // Turn left for 1 second at 50 power CoDrone.turn(LEFT, 0); // Turn left at 50 power indefinitely CoDrone.turn(RIGHT, 5, 100); // Turn right for 5 seconds at 100 power } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"Flight Variables​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#flight-variables","content":" ","version":"Next","tagName":"h2"},{"title":"getPitch()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getpitch","content":" Description​  This is a getter function that gets the value of the pitch variable.  Syntax​  getPitch()  Parameters​  None  Returns​  power: The power of the pitch variable (int)  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // save current pitch value in variable “current_pitch” int current_pitch = CoDrone.getPitch(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"getRoll()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getroll","content":" Description​  This is a getter function that gets the value of the roll variable.  Syntax​  getRoll()  Parameters​  None  Returns​  power: The power of the roll variable (int)  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // save current roll value in variable “current_roll” int current_roll = CoDrone.getRoll(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"getThrottle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getthrottle","content":" Description​  This is a getter function that gets the value of the throttle variable.  Syntax​  getThrottle()  Parameters​  None  Returns​  power: The power of the throttle variable (int)  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // save current throttle value in variable “current_throttle” int current_throttle = CoDrone.getThrottle(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"getYaw()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getyaw","content":" Description​  This is a getter function that gets the value of the yaw variable.  Syntax​  getYaw()  Parameters​  None  Returns​  power: The power of the yaw variable (int)  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // save current yaw value in variable “current_yaw” int current_yaw = CoDrone.getYaw(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"move()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#move","content":" Description​  You can use this function to create more complex flight movements. With no parameters, move() will just run based on whatever the flight variables have been set to with functions like setPitch() and setThrottle() indefinitely. You can also run it for a certain duration. The function also takes multiple parameters, where you can set roll, pitch, yaw, and throttle all at once. You can run it infinitely with 4 parameters, or you can run it for a given duration with 5 parameters. If the drone is not flying, nothing will happen.  Syntax​  move(): runs infinitely move(duration) move(roll, pitch, yaw, throttle): runs infinitely move(duration, roll, pitch, yaw, throttle)  Parameters​  duration: the duration of the flight motion in seconds. If 0, the duration is infinity. roll: the power of the roll, which is an int from -100 to 100 pitch: the power of the pitch, which is an int from -100 to 100 yaw: the power of the yaw, which is an int from -100 to 100 throttle: the power of the throttle, which is an int from -100 to 100  Returns​  None  Example Code​  #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); // take off // Move indefinitely with pitch set to 50 CoDrone.setPitch(50); CoDrone.move(); // Move 5 seconds to the right with roll set to 50 CoDrone.setRoll(50); CoDrone.move(5); CoDrone.move(0, 0, 0, 80, 80); // Move up(throttle) and turn left(yaw) indefinitely CoDrone.move(5, 0, 0, 80, 80); // Move up(throttle) and turn left(yaw) for 5 seconds CoDrone.land(); //land } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"setPitch()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#setpitch","content":" Description​  This is a setter function that allows you to set the pitch variable.  Syntax​  setPitch(power)  Parameters​  power: An int from -100 to 100 that sets the pitch variable. The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.setPitch(60); // set pitch power for 60% CoDrone.move(5); // move drone for 5 seconds CoDrone.land(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"setRoll()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#setroll","content":" Description​  This is a setter function that allows you to set the roll variable.  Syntax​  setRoll(power)  Parameters​  power: An int from -100 to 100 that sets the roll variable. The number represents the direction and power of the output for that flight motion variable. Negative roll is left, positive roll is right.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.setRoll(60); // set roll power for 60% CoDrone.move(5); // move drone for 5 seconds CoDrone.land(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"setThrottle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#setthrottle","content":" Description​  This is a setter function that allows you to set the throttle variable.  Syntax​  setThrottle(power)  Parameters​  power: An int from -100 to 100 that sets the throttle variable. The number represents the direction and power of the output for that flight motion variable. Negative throttle descends, positive throttle ascends.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.setThrottle(60); // set throttle power for 60% CoDrone.move(5); // move drone for 5 seconds CoDrone.land(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"setYaw()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#setyaw","content":" Description​  This is a setter function that allows you to set the yaw variable.  Syntax​  setYaw(power)  Parameters​  power: An int from -100 to 100 that sets the yaw variable. The number represents the direction and power of the output for that flight motion variable. Negative yaw turns left, positive yaw turns right.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.setYaw(60); // set yaw power for 60% CoDrone.move(5); // move drone for 5 seconds CoDrone.land(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"LED​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#led","content":" ","version":"Next","tagName":"h2"},{"title":"armColor()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#armcolor","content":" Description​  This function sets the LED color of the arms using RGB values and their brightness with value from 1 - 100.  Syntax​  armColor(color, brightness) armColor(red, green, blue, brightness)  Parameters​  const Color: a const in Arduino, which can be set using predefined colors out of the list below in &quot;Example Code&quot; under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light   Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.armColor(White, 100); // set color to red using Color CoDrone.armColor(255, 0, 0, 100); // set color to red using RGB } void loop(){ }   LED Color options​  \tAliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, DarkOrange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, RebeccaPurple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen, EndOfColor     ","version":"Next","tagName":"h3"},{"title":"armDefaultColor()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#armdefaultcolor","content":" Description​  This function sets the default LED color of the eyes as well as the mode, so it will remain that color even after powering off and back on. The colors set are using RGB values.  Syntax​  armDefaultColor(red, green, blue, brightness)  Parameters​  red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light   Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // set default arm color to an RGB of (0, 120, 155) with full brightness CoDrone.armDefaultColor(0, 120, 155, 100); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"armDefaultPattern()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#armdefaultpattern","content":" Description​  This function sets the default color of the arm LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on.  Syntax​  armDefaultPattern(color, mode) armDefaultPattern(color, mode, speed) armDefaultPattern(red, green, blue, mode) armDefaultPattern(red, green, blue, mode, speed)  Parameters​  const Color: a const which can be set using predefined colors out of the list under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 const Mode: an const in Arduino which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING, PULSE, REVERSE_PULSE speed: int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // set default arm pattern to blue using RGB and double blink slowly CoDrone.armDefaultPattern(0, 0, 100, BLINK, 150); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"armOff()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#armoff","content":" Description​  This function turns off the arm LEDs  Syntax​  armOff()  Parameters​  None  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.armOff(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"armPattern()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#armpattern","content":" Description​  This function sets the color of the arm LED lights to flash in a particular pre-set pattern at a given speed.  Syntax​  armPattern(color, mode) armPattern(color, mode, speed) armPattern(red, green, blue, mode) armPattern(red, green, blue, mode, speed)  Parameters​  const color: a const in Arduino which can be set using predefined colors out of the list under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 const mode: a const in Arduino which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING, PULSE, REVERSE_PULSE speed: int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.armPattern(Red, DOUBLE_BLINK, 200); // Set arms to double blink red slowly using Color CoDrone.armPattern(0, 0, 255, PULSE, 200); // Set arms to pulse blue slowly using RGB } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"armStrobe()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#armstrobe","content":" Description​  This function makes the arms to strobe in various colors  Syntax​  armStrobe()  Parameters​  None  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // strobe the arms CoDrone.armStrobe(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"eyeColor()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#eyecolor","content":" Description​  This function sets the LED color of the arms using RGB values and their brightness with value a from 1 - 100.  Syntax​  eyeColor(color, brightness) eyeColor(red, green, blue, brightness)  Parameters​  const color: a const in Arduino which can be set using predefined colors out of the list under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light   Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.eyeColor(White, 100); // set color to red using Color CoDrone.eyeColor(255, 0, 0, 100); // set color to red using RGB } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"eyeDefaultColor()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#eyedefaultcolor","content":" Description​  This function sets the default LED color of the eyes using RGB values and their brightness with a value from 1 - 100. This means the color will remain, even after the CoDrone has been powered off and back on.  Syntax​  eyeDefaultColor(red, green, blue, brightness)  Parameters​  red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // set default eye color to an RGB of (0, 0, 100) with full brightness CoDrone.eyeDefaultColor(0, 120, 155, 100); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"eyeDefaultPattern()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#eyedefaultpattern","content":" Description​  This function sets the default color of the eyes LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on.  Syntax​  eyeDefaultPattern(color, mode) eyeDefaultPattern(color, mode, speed) eyeDefaultPattern(red, green, blue, mode) eyeDefaultPattern(red, green, blue, mode, speed)  Parameters​  const color: a const in Arduino which can be set using predefined colors out of the list under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 const mode: a const in Arduino which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING speed: int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // set default arm pattern to blue using RGB and blink quickly CoDrone.eyeDefaultPattern(0,0,100, BLINK, 20); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"eyeOff()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#eyeoff","content":" Description​  This function turns off the eye LEDs  Syntax​  eyeOff()  Parameters​  None  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // turn off the eyes CoDrone.eyeOff(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"eyePattern()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#eyepattern","content":" Description​  This function sets the color of the eye LED lights to flash in a particular pre-set pattern at a given speed.  Syntax​  eyePattern(color, mode) eyePattern(color, mode, speed) eyePattern(red, green, blue, mode) eyePattern(red, green, blue, mode, speed)  Parameters​  const color: a const in Arduino which can be set using predefined colors out of the list under &quot;LED Color Options&quot; red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 const mode: a const in Arduino which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING speed: int value from 0 - 255, which represents the speed of the pattern. 255 is slowest, 0 is fastest.  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.eyePattern(Red, DOUBLE_BLINK, 1); // Set eyes to double blink red quickly using Color CoDrone.eyePattern(255, 0, 0, DOUBLE_BLINK, 10); // Set eyes to double blink red quickly using RGB } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"eyeStrobe()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#eyestrobe","content":" Description​  This function makes the arms to strobe in various colors  Syntax​  eyeStrobe()  Parameters​  None  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // strobe the eyes CoDrone.eyeStrobe(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"resetDefaultLED()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#resetdefaultled","content":" Description​  This function sets the LED color of the eyes and arms back to red and sets the mode to SOLID, which is the original default color.  Syntax​  resetDefaultLED()  Parameters​  None  Returns​  None  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // Reset Drone’s LED to holding the Red color CoDrone.resetDefaultLED(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"Status Checkers​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#status-checkers","content":" ","version":"Next","tagName":"h2"},{"title":"isFlying()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#isflying","content":" Description​  This function checks whether the drone is flying and returns a boolean  Syntax​  isFlying()  Parameters​  None  Returns​  Boolean: Returns True/False whether the drone is flying  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // If drone is flying land the drone if(CoDrone.isFlying()==true) CoDrone.land(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"isReadyToFly()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#isreadytofly","content":" Description​  This function checks whether the drone is ready to fly by returning a boolean. The drone is ready to fly if it is oriented right-side up, and not flying.  Syntax​  isReadyToFly()  Parameters​  None  Returns​  Boolean: Returns True/False whether the drone is ready to fly.  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // if drone is ready to fly, take off the drone if(CoDrone.isReadyToFly() == true) CoDrone.takeoff() } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"isUpsideDown()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#isupsidedown","content":" Description​  This function checks whether the drone is upside-down and returns a boolean  Syntax​  isUpsideDown()  Parameters​  None  Returns​  Boolean: Returns True/False whether the drone is upside-down  Example Code​  //Arduino code #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); if(CoDrone.isUpsideDown()==false) // if drone is not upside down take off the drone CoDrone.takeoff(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"onLowBattery()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#onlowbattery","content":" Description​  Add callback function when CoDrone battery percentage is lower than 50%  Syntax​  onLowBattery(function)  Parameters​  function: a callback function when battery is lower than 50%  Returns​  None  Example Code​  //Arduino code //Not supported     ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"getAccelerometer()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getaccelerometer","content":" Description​  This function gets the accelerometer sensor data, which returns x, y, and z. It outputs as a struct in Arduino.  Syntax​  getAccelerometer()  Parameters​  None  Returns​  struct acceldata: Returns a struct with acceleration data.  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } void loop(){ // Struct for get accelerometer data acceldata accel; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active); //link module mode change =&gt; Active accel = CoDrone.getAccelerometer(); //save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute); //link module mode change =&gt; Mute delay(100); Serial.println(&quot;&quot;); Serial.println(&quot;--------- Now -----------&quot;); Serial.print(&quot;accel x : \\t&quot;); Serial.println(accel.x); Serial.print(&quot;accel y : \\t&quot;); Serial.println(accel.y); Serial.print(&quot;accel z : \\t&quot;); Serial.println(accel.z); }     ","version":"Next","tagName":"h3"},{"title":"getAngularSpeed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getangularspeed","content":" Description​  This function gets the data from the gyrometer sensor for the roll, pitch, and yaw angular speed.  Syntax​  getAngularSpeed()  Parameters​  None  Returns​  struct gyrodata: Returns a struct with angular speed data.  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } void loop(){ // Struct for get Angular speed(gyro) data gyrodata gyro; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active); //link module mode change =&gt; Active gyro = CoDrone.getAngularSpeed(); //save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute); //link module mode change =&gt; Mute delay(100); Serial.println(&quot;&quot;); Serial.println(&quot;--------- Now -----------&quot;); Serial.print(&quot;gyro roll : \\t&quot;); Serial.println(gyro.roll); Serial.print(&quot;gyro pitch : \\t&quot;); Serial.println(gyro.pitch); Serial.print(&quot;gyro yaw : \\t&quot;); Serial.println(gyro.yaw); }     ","version":"Next","tagName":"h3"},{"title":"getBatteryPercentage()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getbatterypercentage","content":" Description​  This function gets the battery percentage of the drone, returning a value from 0 to 100.  Syntax​  getBatteryPercentage()  Parameters​  None  Returns​  percentage: The battery’s percentage as an integer from 0 - 100.  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } void loop(){ int batteryPercentage; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active); //link module mode change =&gt; Active batteryPercentage = CoDrone.getBatteryPercentage(); //save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute); //link module mode change =&gt; Mute delay(100); Serial.println(&quot;&quot;); Serial.println(&quot;--------- Now -----------&quot;); Serial.print(&quot;batteryPercentage : \\t&quot;); Serial.println(batteryPercentage); }     ","version":"Next","tagName":"h3"},{"title":"getBatteryVoltage()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getbatteryvoltage","content":" Description​  This function gets the voltage of the battery  Syntax​  getBatteryVoltage()  Parameters​  None  Returns​  voltage: The voltage of the battery as an a float  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } void loop(){ int batteryVoltage; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active); //link module mode change =&gt; Active batteryVoltage = CoDrone.getBatteryVoltage(); //save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute); //link module mode change =&gt; Mute delay(100); Serial.println(&quot;&quot;); Serial.println(&quot;--------- Now -----------&quot;); Serial.print(&quot;batteryVoltage : \\t&quot;); Serial.println(batteryVoltage); }     ","version":"Next","tagName":"h3"},{"title":"getDroneTemp()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getdronetemp","content":" Description​  This is a getter function gets the data from the drone’s temperature sensor. Importantly, it reads the drone’s temperature, not the air around it.  Syntax​  getDroneTemp()  Parameters​  None  Returns​  temperature: The temperature in Celsius as an integer.  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } void loop(){ int temperature; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active); //link module mode change =&gt; Active temperature = CoDrone.getDroneTemp(); //save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute); //link module mode change =&gt; Mute delay(100); Serial.println(&quot;&quot;); Serial.println(&quot;--------- Now -----------&quot;); Serial.print(&quot;temperature : \\t&quot;); Serial.println(temperature); }     ","version":"Next","tagName":"h3"},{"title":"getGyroAngles()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getgyroangles","content":" Description​  This function gets the data from the gyrometer sensor to determine the roll, pitch, and yaw as angles.  Syntax​  getGyroAngles()  Parameters​  None  Returns​  struct angledata: Returns a struct with angle data.  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } void loop(){ // Struct for get angles(attitude) data angledata angle; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active); //link module mode change =&gt; Active angle = CoDrone.getGyroAngles(); //save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute); //link module mode change =&gt; Mute delay(100); Serial.println(&quot;&quot;); Serial.println(&quot;--------- Now -----------&quot;); Serial.print(&quot;angle roll : \\t&quot;); Serial.println(angle.roll); Serial.print(&quot;angle pitch : \\t&quot;); Serial.println(angle.pitch); Serial.print(&quot;angle yaw : \\t&quot;); Serial.println(angle.yaw); }     ","version":"Next","tagName":"h3"},{"title":"getHeight()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getheight","content":" Description​  This is a getter function gets the current height of the drone from the object directly below its IR sensor.  Syntax​  getHeight()  Parameters​  None  Returns​  height: The current height above the object directly below the drone’s IR height sensor as an int (mm).  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } void loop(){ int height; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active); //link module mode change =&gt; Active height = CoDrone.getHeight(); //save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute); //link module mode change =&gt; Mute delay(100); Serial.println(&quot;&quot;); Serial.println(&quot;--------- Now -----------&quot;); Serial.print(&quot;height : \\t&quot;); Serial.println(height); }     ","version":"Next","tagName":"h3"},{"title":"getOptFlowPosition()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getoptflowposition","content":" Description​  This function gets the x and y coordinates from the optical flow sensor. Keep in mind, the positioning does not take rotation into account.  Syntax​  getOptFlowPosition()  Parameters​  None  Returns​  struct optdata: Returns a struct with optical flow sensor data  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } void loop(){ // Struct for get optical flow sensor data optdata opt; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active); //link module mode change =&gt; Active opt = CoDrone.getOptFlowPosition(); //save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute); //link module mode change =&gt; Mute delay(100); Serial.println(&quot;&quot;); Serial.println(&quot;--------- Now -----------&quot;); Serial.print(&quot;opt x : \\t&quot;); Serial.println(opt.x); Serial.print(&quot;opt y : \\t&quot;); Serial.println(opt.y); }     ","version":"Next","tagName":"h3"},{"title":"getPressure()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getpressure","content":" Description​  This is a getter function gets the data from the barometer sensor.  Syntax​  getPressure()  Parameters​  None  Returns​  pressure: The barometer’s air pressure in millibars at (0.13 resolution).  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } void loop(){ int pressure; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active); //link module mode change =&gt; Active pressure = CoDrone.getPressure(); //save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute); //link module mode change =&gt; Mute delay(100); Serial.println(&quot;&quot;); Serial.println(&quot;--------- Now -----------&quot;); Serial.print(&quot;pressure : \\t&quot;); Serial.println(pressure); }     ","version":"Next","tagName":"h3"},{"title":"getState()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#getstate","content":" Description​  This function gets the state of the drone, as in whether it’s: ready, takeoff, flight, flip, stop, landing, reverse, accident, error.  Syntax​  getState()  Parameters​  None  Returns​  enum state: Returns an enum value (fMode_Ready, fMode_TakeOff, fMode_Flight, fMode_Flip, fMode_Stop, fMode_Landing, fMode_Reverse, fMode_Accident, fMode_Error).  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); int state; state = CoDrone.getState(); //save request data delay(50); if(state == fMode_Ready) CoDrone.takeoff(); CoDrone.hover(3); CoDrone.land(); } void loop(){ }     ","version":"Next","tagName":"h3"},{"title":"getTrim()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDronePro_Lite/Arduino/Function-Documentation#gettrim","content":" Description​  This function gets the current trim values of the drone.  Syntax​  getTrim()  Parameters​  None  Returns​  struct trimdata: Returns a struct with trim data  Example Code​  //Arduino code //Code for print request data to serial monitor #include&lt;CoDrone.h&gt; //header void setup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } void loop(){ // Struct for get trim data trimdata trim; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active); //link module mode change =&gt; Active trim = CoDrone.getTrim(); //save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute); //link module mode change =&gt; Mute delay(100); Serial.println(&quot;&quot;); Serial.println(&quot;--------- Now -----------&quot;); Serial.print(&quot;trim roll : \\t&quot;); Serial.println(trim.roll); Serial.print(&quot;trim pitch : \\t&quot;); Serial.println(trim.pitch); Serial.print(&quot;trim yaw : \\t&quot;); Serial.println(trim.yaw); Serial.print(&quot;trim throttle : \\t&quot;); Serial.println(trim.throttle); }  ","version":"Next","tagName":"h3"},{"title":"Function Documentation","type":0,"sectionRef":"#","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation","content":"","keywords":"","version":"Next"},{"title":"Connection​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#connection","content":" ","version":"Next","tagName":"h2"},{"title":"pair()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#pair","content":" Description​  This function connects your controller with the program. You can also set the specific USB port name.  Syntax​  pair() pair(portname)  Parameters​  string portname: A string containing the port name or number.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # pair automatically, may not always work # drone.pair(port_name = 'COM3') # pair with a specific port drone.takeoff() drone.hover(1) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"Flight Commands (Start / Stop)​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#flight-commands-start--stop","content":" ","version":"Next","tagName":"h2"},{"title":"take_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#take_off","content":" Description​  This function makes the drone takeoff and hover. The drone will always hover for 1 second in order to stabilize before it executes the next command.  Syntax​  takeoff()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"land()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#land","content":" Description​  This function makes the drone stop all commands, hover, and make a soft landing where it is. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and immediately land, it is recommended to run a hover() or time.sleep() in between the takeoff() and land(), because the CoDrone EDU may miss the land command otherwise.  Syntax​  land()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) # include a hover() or time.sleep() to prevent land() from skipping drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"emergency_stop()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#emergency_stop","content":" Description​  This function immediately stops all commands and motors, so the drone will stop flying immediately. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and emergency stop, it is recommended to run a hover() or time.sleep() in between the takeoff() and emergency_stop(), because the CoDrone EDU might miss the emergency_stop() command.  Syntax​  emergency_stop()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) #Recommended to have a hover() or time.sleep(1) before landing drone.emergency_stop() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_trim()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#set_trim","content":" Description​  You can set the roll and pitch trim of the drone in case your drone is drifting. For example, if the drone is drifting to its right, you may want to set the roll to a small negative value. This trim will remain saved, even after powering off until you've changed the trim either programmatically, or done a reset with the remote. NOTE: If you're setting the trim right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the takeoff commmand might be skipped.  Syntax​  set_trim(roll, pitch)  Parameters​  integer roll: the power of the roll (-100 - 100) integer pitch: the power of the pitch (-100 - 100)  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() drone.set_trim(-5, 0) # example: drone is drifting right, so trim to roll left a little bit time.sleep(1) # Add a time.sleep(1) before takeoff if you're planning to set the trim before takeoff drone.takeoff() drone.hover(3) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"reset_trim()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#reset_trim","content":" Description​  You can reset the roll and pitch trim of the drone in case your drone is drifting. This function will reset the roll and pitch trim values back to zero.  Syntax​  reset_trim()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.set_trim(5,0) print(drone.get_trim()) drone.takeoff() drone.hover(3) drone.land() drone.reset_trim() print(drone.get_trim()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"reset_sensor()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#reset_sensor","content":" Description​  This function will reset the gyro angles back to zero for roll, pitch, and yaw. NOTE: If you're resetting right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the take off might be skipped.  Syntax​  reset_sensor()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() print(&quot;Before&quot;) print(&quot;X angle:&quot;, drone.get_x_angle()) print(&quot;Y angle:&quot;, drone.get_y_angle()) print(&quot;Z angle:&quot;, drone.get_z_angle()) drone.takeoff() drone.set_yaw(50) drone.move(1) drone.land() print(&quot;After&quot;) print(&quot;X angle:&quot;, drone.get_x_angle()) print(&quot;Y angle:&quot;, drone.get_y_angle()) print(&quot;Z angle:&quot;, drone.get_z_angle()) drone.reset_sensor() print(&quot;Reset&quot;) print(&quot;X angle:&quot;, drone.get_x_angle()) print(&quot;Y angle:&quot;, drone.get_y_angle()) print(&quot;Z angle:&quot;, drone.get_z_angle()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"Flight Commands (Movement)​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#flight-commands-movement","content":" ","version":"Next","tagName":"h2"},{"title":"avoid_wall()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#avoid_wall","content":" Description​  A looped method that makes the drone fly forward until it reaches a desired distance based on the front range sensor. The range of front sensor is from 0cm-100cm  Syntax​  avoid_wall() avoid_wall(timeout) avoid_wall(distance) avoid_wall(timeout, distance)  Parameters​  integer timeout: timeout is an optional parameter that is the duration in seconds that the function will run. the default value is 2 integer distance: distance is an optional parameter that is the distance in centimeters the drone will stop at in front of an object. the default value is 70  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # fly forward until a wall is found 50 cm away. run this loop for 10 seconds. drone.avoid_wall(10, 50) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"circle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#circle","content":" Description​  Flies the drone in the shape of a circle.  Syntax​  circle() circle(speed, direction)  Parameters​  integer speed: optional parameter that is the speed the drone will move (0 - 100). default value is 75. integer direction: optional parameter that determines the direction of the circle. 1 is right, -1 is left. default value is 1.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # default circle parameters (75, 1) drone.circle() drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"detect_wall()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#detect_wall","content":" Description​  Returns True when a distance below the threshold is reached. The sensor range is up to 1.5 meters (150cm)  Syntax​  detect_wall() detect_wall(distance)  Parameters​  integer distance: An optional parameter that is the threshold in centimeters that will return True. The default value is 50  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # if a wall is detected in less than 500mm true will be returned. if drone.detect_wall(): print(&quot;wall detected!&quot;) else: print(&quot;no wall detected!&quot;) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"flip()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#flip","content":" Description​  This functions makes the drone flip backward, forward, right, or left. Make sure your battery percentage is over 50% for the flip to execute.  Syntax​  flip() flip(direction)  Parameters​  string direction: optional parameter that is the direction the drone will flip. default is &quot;back&quot;  Returns​  None  Example Code​  Add a hover or delay after the flip if you need to stabilize before your next command. The drone takes 3-4 seconds after a flip before it can do another flight command.  #Python code import time from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) drone.flip(&quot;back&quot;) # send flip command time.sleep(4) # wait for flip to complete drone.set_pitch(30) # move forward for 1 second drone.move(1) drone.set_pitch(-30) # move backward for 1 second drone.move(1) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"hover()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#hover","content":" Description​  This function makes the drone hover for a given amount of time. If given no parameters, it will hover indefinitely until given a another command.  Syntax​  hover(duration)  Parameters​  integer duration: Duration of the hovering in seconds  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"keep_distance()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#keep_distance","content":" Description​  A looped method that makes the drone fly forward until it reaches a desired distance. Once the desired distance in reached the drone will maintain that distance. The sensor range is up to 150 cm.  Syntax​  keep_distance() keep_distance(timeout) keep_distance(distance) keep_distance(timeout, distance)  Parameters​  integer timeout: the duration in seconds that the function will execute. The default value is 2 seconds. integer distance: the distance in centimeters the drone will stop and maintain distance in front of an object. The default value is 50 centimeters.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # maintain a distance of 60cm from an object once detected for 10 seconds drone.keep_distance(10, 60) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"move()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#move","content":" Description​  The move command will move the drone based on the set flight variables (set_pitch, set_roll, etc). If given a parameter the move command will execute the movement for the given amount of seconds. If given no parameter then the drone will execute the move command indefinitley. You must takeoff() first to use a move() function.  Syntax​  move(duration)  Parameters​  integer duration: Duration of the movement in seconds  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Drone goes up for 1 second with 50 power drone.set_pitch(50) drone.move(1) # move command executes the movement for 1 second drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"print_move_values()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#print_move_values","content":" Description​  Prints the current values of roll, pitch, yaw, and throttle flight variables.  Syntax​  print_move_values()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.set_pitch(50) drone.set_roll(50) drone.print_move_values() # will print pitch and roll at 50 and throttle and yaw at 0 drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"reset_move()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#reset_move","content":" Description​  The reset_move command will reset the values of roll, pitch, yaw, and throttle to 0.  Syntax​  reset_move() reset_move(attempts)  Parameters​  integer attempts: Optional parameter that sends the reset_move command multiple times.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.set_pitch(50) drone.set_roll(50) drone.reset_move() # reset the pitch and roll to 0. drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"sendControl()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#sendcontrol","content":" Description​  Send roll, pitch, yaw, and throttle values to the drone.  Syntax​  sendControl(roll, pitch, yaw, throttle)  Parameters​  integer roll: Sets the roll variable (-100 to 100). negative is left, positive is right integer pitch: Sets the pitch variable (-100 to 100). negative is backwards, positive is forwards integer yaw: Sets the yaw variable (-100 to 100). negative is left, positive is right integer throttle: Sets the throttle variable (-100 to 100). negative is down, positive is up  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.sendControl(0, 30, 0, 0) # setting pitch to 30 time.sleep(1) # wait for 1 second while the drone is moving forward drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"sendControlWhile()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#sendcontrolwhile","content":" Description​  Send roll, pitch, yaw, and throttle values to the drone continously for the given duration in milliseconds  Syntax​  sendControlWhile(roll, pitch, yaw, throttle, duration)  Parameters​  integer roll: Sets the roll variable (-100 to 100). negative is left, positive is right integer pitch: Sets the pitch variable (-100 to 100). negative is backwards, positive is forwards integer yaw: Sets the yaw variable (-100 to 100). negative is left, positive is right integer throttle: Sets the throttle variable (-100 to 100). negative is down, positive is up integer duration: A duration in milliseconds  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.sendControlWhile(0, 30, 0, 0,1000) # set pitch to 30 and move for 1000 ms (1 second) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_pitch()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#set_pitch","content":" Description​  This is a setter function that allows you to set the pitch variable. Once you set pitch, you have to use move() to actually execute the movement. The pitch variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to pitch again.  Syntax​  set_pitch(power)  Parameters​  integer power: Sets the pitch variable (-100 - 100). The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Drone goes forward for 1 second with 50 power drone.set_pitch(50) drone.move(1) # move command executes the movement for 1 second drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_roll()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#set_roll","content":" Description​  This is a setter function that allows you to set the roll variable. Once you set roll, you have to use move() to actually execute the movement. The roll variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to roll again.  Syntax​  set_roll(power)  Parameters​  integer power: Sets the roll variable (-100 - 100). The number represents the direction and power of the output for that flight motion variable. Negative roll is left, positive roll is right.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_roll(50) drone.move(1) # move command executes the movement for 1 second drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_throttle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#set_throttle","content":" Description​  This is a setter function that allows you to set the throttle variable. Once you set throttle, you have to use move() to actually execute the movement. The throttle variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to throttle again.  Syntax​  set_throttle(power)  Parameters​  integer power: Sets the pitch variable (-100 - 100). The number represents the direction and power of the output for that flight motion variable. Negative throttle is down, positive throttle is up.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Drone goes up for 1 second with 50 power drone.set_throttle(50) drone.move(1) # move command executes the movement for 1 second drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_yaw()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#set_yaw","content":" Description​  This is a setter function that allows you to set the yaw variable. Once you set yaw, you have to use move()to actually execute the movement. The yaw variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to yaw again.  Syntax​  set_yaw(power)  Parameters​  integer power: Sets the pitch variable (-100 - 100). The number represents the direction and power of the output for that flight motion variable. Negative yaw is left, positive yaw is right.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Drone turns right for 1 second with 50 power drone.set_yaw(50) drone.move(1) # move command executes the movement for 1 second drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"spiral()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#spiral","content":" Description​  Flies the drone in the shape of a downward spiral.  Syntax​  spiral() spiral(speed, seconds, direction)  Parameters​  integer speed: optional parameter that is the speed the drone will move (0 - 100). default value is 50. integer seconds: optional parameter that is the duration in seconds the drone flies in a downward spiral. default value is 5. integer direction: optional parameter that determines the direction of the spiral. 1 is right, -1 is left. default value is 1.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # default spiral parameters (50, 5, 1) drone.spiral() drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"square()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#square","content":" Description​  Flies the drone in the shape of a square.  Syntax​  square() square(speed, seconds, direction)  Parameters​  integer speed: optional parameter that is the speed the drone will move (0 - 100). default value is 50. integer seconds: optional parameter that is the duration in seconds the drone flies for each side of the square. default value is 5. integer direction: optional parameter that determines the direction of the square. 1 is right, -1 is left. default value is 1.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # default square parameters (60, 1, 1) drone.square() drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"sway()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#sway","content":" Description​  Flies the drone in a swaying motion.  Syntax​  sway() sway(speed, seconds, direction)  Parameters​  integer speed: optional parameter that is the speed the drone will move (0 - 100). default value is 30. integer seconds: optional parameter that is the duration in seconds the drone will fly in each &quot;sway&quot; motion. default value is 2. integer direction: optional parameter that determines the direction of the sway. 1 is right, -1 is left. default value is 1.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # default sway parameters (30, 2, 1) drone.sway() drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"triangle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#triangle","content":" Description​  Flies the drone in the shape of a triangle.  Syntax​  triangle() triangle(speed, seconds, direction)  Parameters​  integer speed: optional parameter that is the speed the drone will move (0 - 100). default value is 60. integer seconds: optional parameter that is the duration in seconds the drone flies for each side of the triangle. default value is 1. integer direction: optional parameter that determines the direction of the triangle. 1 is right, -1 is left. default value is 1.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # default triangle parameters (60, 1, 1) drone.triangle() drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"turn_degree()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#turn_degree","content":" Description​  Turns right or left with absolute reference frame to drone's initial heading. Positive degrees turn to right and negative degrees turn to the left.  Syntax​  turn_degree(degree, timeout, p_value)  Parameters​  integer degree: angle of turn in degrees (-180 - 180) integer timeout: optional parameter that is duration in seconds that drone will try to turn. default value is 3. integer p_value: optional parameter that is the gain of the proportional controller, if this increased CDE will turn quicker, the smaller the slower. default value is 10.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.turn_degree(90) # drone will turn left 90 degrees drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"turn_left()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#turn_left","content":" Description​  Turns the drone left using the built in gyroscope. The default degree is 90.  Syntax​  turn_left() turn_left(degree) turn_left(timeout) turn_left(degree, timeout)  Parameters​  integer degree: optional parameter that turns the drone in the given degree. default value is 90. integer timeout: optional parameter that is duration in seconds that drone will try to turn. default value is 3.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.turn_left() # make a 90 degree left turn. drone.hover(1) # wait for 1 second in the air drone.turn_left(30, 3) # make a 30 degree left turn with a 3 second timeout. drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"turn_right()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#turn_right","content":" Description​  Turns the drone right using the built in gyroscope. The default degree is 90.  Syntax​  turn_right() turn_right(degree) turn_right(timeout) turn_right(degree, timeout)  Parameters​  integer degree: optional parameter that turns the drone in the given degree. default value is 90. integer timeout: optional parameter that is duration in seconds that drone will try to turn. default value is 3.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.turn_right() # make a 90 degree right turn. drone.hover(1) # wait for 1 second in the air drone.turn_right(30, 3) # make a 30 degree right turn with a 3 second timeout. drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"go()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#go","content":" Description​  Sends roll, pitch, yaw, throttle values continuously to the drone for duration (seconds)  Syntax​  go(roll, pitch, yaw, throttle, duration)  Parameters​  integer roll: roll power (-100 - 100) integer pitch: pitch power (-100 - 100) integer yaw: yaw power (-100 - 100) integer throttle: throttle power (-100 - 100) integer duration: Duration of the movement in seconds  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.go(50, 50, 0, 0, 5) # Drone flies diagonally forward and right for 5 seconds drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"move_forward()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#move_forward","content":" Description​  Moves the drone forward for the given distance and unit for that distance.  Syntax​  move_forward(distance) move_forward(distance, unit, speed)  Parameters​  integer distance: the numerical value of the value to move string unit: The unit of measurement for the distance flown. Available units are &quot;cm&quot; (centimeter), &quot;ft&quot; (feet), &quot;in&quot; (inches), &quot;m&quot; (meter). integer speed: default 1 meter per second. Max is 2 meters/second  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() drone.takeoff() drone.move_forward(distance=50, units=&quot;cm&quot;, speed=1) time.sleep(3) # make sure to add a delay so the drone has enough time to fly drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"move_backward()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#move_backward","content":" Description​  Moves the drone backward for the given distance and unit for that distance.  Syntax​  move_backward(distance) move_backward(distance, unit, speed)  Parameters​  integer distance: the numerical value of the value to move string unit: The unit of measurement for the distance flown. Available units are &quot;cm&quot; (centimeter), &quot;ft&quot; (feet), &quot;in&quot; (inches), &quot;m&quot; (meter). integer speed: default 1 meter per second. Max is 2 meters/second  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() drone.takeoff() drone.move_backward(distance=50, units=&quot;cm&quot;, speed=1) time.sleep(3) # make sure to add a delay so the drone has enough time to fly drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"move_left()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#move_left","content":" Description​  Moves the drone left for the given distance and unit for that distance.  Syntax​  move_left(distance) move_left(distance, unit, speed)  Parameters​  integer distance: the numerical value of the value to move string unit: The unit of measurement for the distance flown. Available units are &quot;cm&quot; (centimeter), &quot;ft&quot; (feet), &quot;in&quot; (inches), &quot;m&quot; (meter). integer speed: default 1 meter per second. Max is 2 meters/second  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() drone.takeoff() drone.move_left(distance=50, units=&quot;cm&quot;, speed=1) time.sleep(3) # make sure to add a delay so the drone has enough time to fly drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"move_right()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#move_right","content":" Description​  Moves the drone right for the given distance and unit for that distance.  Syntax​  move_right(distance) move_right(distance, unit, speed)  Parameters​  integer distance: the numerical value of the value to move string unit: The unit of measurement for the distance flown. Available units are &quot;cm&quot; (centimeter), &quot;ft&quot; (feet), &quot;in&quot; (inches), &quot;m&quot; (meter). integer speed: default 1 meter per second. Max is 2 meters/second  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() drone.takeoff() drone.move_right(distance=50, units=&quot;cm&quot;, speed=1) time.sleep(3) # make sure to add a delay so the drone has enough time to fly drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"send_absolute_position()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#send_absolute_position","content":" Description​  Sends a movement command to the drone based on its absolute position from its takeoff location. Note: A sleep command for the length of the movement may be needed after using this movement command. The 'x' position of the drone is forwards and reverse. The 'y' position of the drone is left and right. The 'z' position of the drone is up and down.        Syntax​  send_absolute_position(positionX, positionY, positionZ, velocity, heading, rotationalVelocity)  Parameters​  float positionX: The X position of the drone (-10 ~ 10). Forward is positive. Backwards is negative. float positionY: The Y position of the drone (-10 ~ 10). Left is positive. Right is negative. float positionZ: The Z position of the drone (-10 ~ 10). Up is positive. Down is negative. float velocity: The velocity of the drone in meters per second (0.5 ~ 10). The movement speed of the drone. integer heading: Heading value in degrees (-360 - 360). Positive turns the drone left. Negative turns the drone right. integer rotationalVelocity: The rotational velocity of the drone in degrees per second (0 - 360). Left and right rotation speed of the drone.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Sending the drone forward from its takeoff location 0.5 meters moving at 0.5 m/s drone.send_absolute_position(0.5, 0, 1, 0.5, 0, 0) time.sleep(1) # Sleep command needed in order for this movement to execute. # Sending the same command will cause the drone to hover around # the same area since this command uses absolute positioning from the takeoff location drone.send_absolute_position(0.5, 0, 1, 0.5, 0, 0) time.sleep(1) drone.land()     ","version":"Next","tagName":"h3"},{"title":"LED​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#led","content":" ","version":"Next","tagName":"h2"},{"title":"controller_LED_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_led_off","content":" Description​  Turns off the controller LEDs.  Syntax​  controller_LED_off()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_LED_off() drone.close()     ","version":"Next","tagName":"h3"},{"title":"drone_LED_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#drone_led_off","content":" Description​  Turns off the drone LED.  Syntax​  drone_LED_off()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.drone_LED_off() drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_controller_LED()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#set_controller_led","content":" Description​  This function sets the LED color and brightness of the CoDrone EDU controller's LEDs. This is done by setting RGB values (0 - 255) and brightness level (0 - 100).  Syntax​  set_controller_LED(red, green, blue, brightness)  Parameters​  integer red: pixel value for the color red (0 - 255) integer green: pixel value for the color green (0 - 255) integer blue: pixel value for the color blue (0 - 255) integer brightness: brightness of the controller LED (0 - 100)  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.set_controller_LED(0, 0, 255, 100) drone.close()     ","version":"Next","tagName":"h3"},{"title":"set_drone_LED()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#set_drone_led","content":" Description​  This function sets the LED color and brightness of the CoDrone EDU's LED. This is done by setting RGB values (0 - 255) and brightness level (0 - 100).  Syntax​  set_drone_LED(red, green, blue, brightness)  Parameters​  integer red: pixel value for the color red (0 - 255) integer green: pixel value for the color green (0 - 255) integer blue: pixel value for the color blue (0 - 255) integer brightness: brightness of the drone LED (0 - 100)  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.set_drone_LED(0, 0, 255, 100) drone.close()     ","version":"Next","tagName":"h3"},{"title":"Status Checkers​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#status-checkers","content":" ","version":"Next","tagName":"h2"},{"title":"controller_buzzer()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_buzzer","content":" Description​  Plays a note using the controller's buzzer.  Syntax​  controller_buzzer(note, duration)  Parameters​  integer/Note note: frequency of the note, in Hertz or a Note objectinteger duration: Duration of the note in milliseconds  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_buzzer(400, 300) drone.controller_buzzer(600, 300) drone.close()     ","version":"Next","tagName":"h3"},{"title":"drone_buzzer()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#drone_buzzer","content":" Description​  Plays a note using the drone's buzzer.  Syntax​  drone_buzzer(note, duration)  Parameters​  integer/Note note: frequency of the note, in Hertz or a Note objectinteger duration: Duration of the note in milliseconds  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.drone_buzzer(400, 300) drone.drone_buzzer(600, 300) drone.close()     ","version":"Next","tagName":"h3"},{"title":"start_drone_buzzer()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#start_drone_buzzer","content":" Description​  This function allows the drone buzzer to be played in the background while other commands are given to the drone.  Syntax​  start_drone_buzzer(note)  Parameters​  integer/Note note: the frequency of the note, in Hertz or a Note object  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.start_drone_buzzer(500) # starting the buzzer # these commands run while the buzzer runs in the background for i in range(5): drone.set_drone_LED(255, 0, 0, 100) time.sleep(0.5) drone.set_drone_LED(0, 255, 0, 100) time.sleep(0.5) drone.stop_drone_buzzer() # stops the buzzer drone.close()     ","version":"Next","tagName":"h3"},{"title":"stop_drone_buzzer()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#stop_drone_buzzer","content":" Description​  Stops the drone buzzer if started in the background.  Syntax​  stop_drone_buzzer()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.start_drone_buzzer(500) # starting the buzzer # these commands run while the buzzer runs in the background for i in range(5): drone.set_drone_LED(255, 0, 0, 100) time.sleep(0.5) drone.set_drone_LED(0, 255, 0, 100) time.sleep(0.5) drone.stop_drone_buzzer() # stops the buzzer drone.close()     ","version":"Next","tagName":"h3"},{"title":"start_controller_buzzer()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#start_controller_buzzer","content":" Description​  This function allows the controller buzzer to be played in the background while other commands are given to the drone.  Syntax​  start_controller_buzzer(note)  Parameters​  integer/Note note: the frequency of the note, in Hertz or a Note object  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.start_controller_buzzer(Note.A4) # starting the buzzer # these commands run while the buzzer runs in the background for i in range(3): drone.set_controller_LED(255, 0, 0, 100) time.sleep(0.5) drone.set_controller_LED(0, 255, 0, 100) time.sleep(0.5) drone.stop_controller_buzzer() # stops the buzzer drone.close()     ","version":"Next","tagName":"h3"},{"title":"stop_controller_buzzer()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#stop_controller_buzzer","content":" Description​  Stops the controller buzzer if started in the background.  Syntax​  stop_controller_buzzer()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.start_controller_buzzer(440) # starting the buzzer # these commands run while the buzzer runs in the background for i in range(3): drone.set_controller_LED(255, 0, 0, 100) time.sleep(0.5) drone.set_controller_LED(0, 255, 0, 100) time.sleep(0.5) drone.stop_controller_buzzer() # stops the buzzer drone.close()     ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"get_battery()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_battery","content":" Description​  This function returns the current battery level percentage of the drone.  Syntax​  get_battery()  Parameters​  None  Returns​  integer battery percentage: The current battery percentage of the drone's battery.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() battery = drone.get_battery() print(battery) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_bottom_range()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_bottom_range","content":" Description​  This is a getter function which returns the current bottom range of the drone. The default unit of measurement is centimeters. This function uses the bottom range sensor to measure distance from the drone to the surface below the drone.  Syntax​  get_bottom_range() get_bottom_range(unit=&quot;cm&quot;) — &quot;m&quot;, &quot;mm&quot;, and &quot;in&quot; are other options for unit  Parameters​  string unit: The unit of measurement that is chosen for the height distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified cm is chosen by default.  Returns​  integer bottom range: The current bottom range calculated by the bottom range sensor (cm default). -100 or 0 when the sensor returns an error. 999.9 when the detected object is out of range (1.5 meters) or the sensor timed out.  Example Code​  #Python code import time from codrone_edu.drone import * drone = Drone() drone.pair() max_bottom_range = 100 drone.takeoff() drone.set_throttle(20) current_bottom_range = drone.get_bottom_range(&quot;cm&quot;) while current_bottom_range &lt;= max_bottom_range: drone.move() current_bottom_range = drone.get_bottom_range(&quot;cm&quot;) print(current_bottom_range) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_temperature()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_temperature","content":" Description​  This is a getter function gets the drone's temperature from the barometer. The sensor reads the drone’s temperature, not the air around it. Default unit is Celcius.  Syntax​  get_temperature() get_temperature(unit)  Parameters​  string unit: A string for the unit of temperature of the drone. Available units are &quot;C&quot; (Celcius), &quot;F&quot; (Fahrenheit), and &quot;K&quot; (Kelvin).  Returns​  integer temperature: The temperature of the drone in the given unit as a float. Default unit is Celcius.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() temperature = drone.get_temperature() print(temperature) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_flight_state()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_flight_state","content":" Description​  get_flight_state() is a getter function that gets the current flight state of the drone.  Syntax​  get_flight_state()  Parameters​  None  Returns​  string state: The current flight state of the drone.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() print(drone.get_flight_state()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_flow_x()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_flow_x","content":" Description​  This getter function gets the relative position value calculated by the optical flow sensor from the x direction (forward and reverse).    Syntax​  get_flow_x() get_flow_x(unit=&quot;cm&quot;) — &quot;m&quot;, &quot;mm&quot;, and &quot;in&quot; are other options for unit  Parameters​  string unit: The unit of measurement that is chosen for the distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified &quot;cm&quot; is chosen by default.  Returns​  integer relative x-position: The relative position value calculated by the optical flow sensor from the x direction. (cm default).  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.set_pitch(50) drone.move(1) print(drone.get_flow_x()) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_flow_y()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_flow_y","content":" Description​  This getter function gets the relative position value calculated by the optical flow sensor from the y direction (left and right).    Syntax​  get_flow_y() get_flow_y(unit=&quot;cm&quot;) — &quot;m&quot;, &quot;mm&quot;, and &quot;in&quot; are other options for unit  Parameters​  integer unit: The unit of measurement that is chosen for the distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified &quot;cm&quot; is chosen by default.  Returns​  integer relative y-positionThe relative position value calculated by the optical flow sensor from the y direction. (cm default).  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.set_roll(50) drone.move(1) print(drone.get_flow_y()) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_front_range()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_front_range","content":" Description​  This is a getter function which returns the current Range from the front range sensor. The default unit of measurement is centimeters. This function uses the front range sensor to measure distance from the drone to the surface in front of the drone.  Syntax​  get_front_range() get_front_range(unit=&quot;cm&quot;) — &quot;m&quot;, &quot;mm&quot;, and &quot;in&quot; are other options for unit  Parameters​  string unit: A string for the unit of measurement that is chosen for the range distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified &quot;cm&quot; is chosen by default.  Returns​  integer front range: The current range calculated by the front range sensor (cm by default). -10 or 0 when the sensor returns an error value. 999 when the detected object is out of range (1.5 meters) or the sensor timed out.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) distance = drone.get_front_range() print(distance) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_pos_x()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_pos_x","content":" Description​  Getter function that gets the x position of the drone. (x is forwards and backwards)    Syntax​  get_pos_x() get_pos_x(unit=&quot;cm&quot;) — &quot;m&quot;, &quot;mm&quot;, and &quot;in&quot; are other options for unit  Parameters​  string unit: The unit of measurement that is chosen for the position distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified cm is chosen by default.  Returns​  integer x-position: The current x position of the drone.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_pos_x()) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_pos_y()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_pos_y","content":" Description​  Getter function that gets the y position of the drone. (y is left and right)    Syntax​  get_pos_y() get_pos_y(unit=&quot;cm&quot;) — &quot;m&quot;, &quot;mm&quot;, and &quot;in&quot; are other options for unit  Parameters​  string unit: The unit of measurement that is chosen for the position distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified cm is chosen by default.  Returns​  integer y-position: The current y position of the drone.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_pos_y()) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_pos_z()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_pos_z","content":" Description​  Getter function that gets the z position of the drone. (z is up and down)    Syntax​  get_pos_z() get_pos_z(unit=&quot;cm&quot;) — &quot;m&quot;, &quot;mm&quot;, and &quot;in&quot; are other options for unit  Parameters​  string unit: The unit of measurement that is chosen for the position distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified cm is chosen by default.  Returns​  integer z-position: The current z position of the drone.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_pos_z()) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_position_data()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_position_data","content":" Description​  get_position_data is a getter function that retuns a list of position data for the drone. The 'x' position of the drone is forwards and reverse. The 'y' position of the drone is left and right. The 'z' position of the drone is up and down.      Syntax​  get_position_data() get_position_data(delay)  Parameters​  float delay: the delay in seconds before the position data is returned. default value is 0.01.  Returns​  list position data: A list of position data for the drone. The list contains the current time of the running program [0], x position data [1], y position data [2], z position data [3].  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() data = drone.get_position_data() print(data) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_pressure()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_pressure","content":" Description​  This is a getter function that returns the data from the barometer. The function returns a value in the unit Pascals. Note: 1atm = 101325 Pa  Syntax​  get_pressure()  Parameters​  None  Returns​  float pressure: air pressure measured by barometer in Pascals.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # print the pressure pressure = drone.get_pressure() print(pressure) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_trim()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_trim","content":" Description​  This function gets the current trim values of the drone.  Syntax​  get_trim()  Parameters​  None  Returns​  list trim data: A list of trim data — [0] for roll trim and [1] for pitch trim  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # print the trim values trim = drone.get_trim() print(trim) print(trim[0]) print(trim[1]) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_x_accel()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_x_accel","content":" Description​  Getter function that gets the x acceleration of the drone. (x is forwards and backwards)    Syntax​  get_x_accel()  Parameters​  None  Returns​  integer x-acceleration: The current x acceleration of the drone.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_x_accel()) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_x_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_x_angle","content":" Description​  This is a getter function which returns the current X angle from the gyroscope in the drone. This angle is on the &quot;roll&quot; axis.  Syntax​  get_x_angle()  Parameters​  None  Returns​  integer roll angle: The current angle in regards to the X direction in degrees.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() print(drone.get_x_angle()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_y_accel()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_y_accel","content":" Description​  Getter function that gets the y acceleration of the drone. (y is left and right)    Syntax​  get_y_accel()  Parameters​  None  Returns​  integer y-acceleration: The current y acceleration of the drone.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_y_accel()) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_y_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_y_angle","content":" Description​  This is a getter function which returns the current Y angle from the gyroscope in the drone. This angle is on the &quot;pitch&quot; axis.  Syntax​  get_y_angle()  Parameters​  None  Returns​  integer pitch angle: The current angle in regards to the Y direction, in degrees.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() print(drone.get_y_angle()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_z_accel()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_z_accel","content":" Description​  Getter function that gets the z acceleration of the drone. (z is up and down)    Syntax​  get_z_accel()  Parameters​  None  Returns​  integer z-acceleration: The current z acceleration of the drone.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_z_accel()) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_z_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_z_angle","content":" Description​  This is a getter function which returns the current Z angle from the drone. This is angle is the &quot;yaw&quot; direction.  Syntax​  get_z_angle()  Parameters​  None  Returns​  integer yaw angle: The current angle in regards to the Z direction.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() print(drone.get_z_angle()) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_height()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_height","content":" Description​  This is a getter function which returns the current height of the drone. The default unit of measurement is centimeters. This function uses the bottom range sensor to measure distance from the drone to the surface below the drone.  Syntax​  get_height() get_height(unit=&quot;cm&quot;) — &quot;m&quot;, &quot;mm&quot;, and &quot;in&quot; are other options for unit  Parameters​  string unit: The unit of measurement that is chosen for the height distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified cm is chosen by default.  Returns​  integer height: The current range calculated by the bottom range sensor (cm default). -100 or 0 when the sensor returns an error. 999.9 when the detected object is out of range (1.5 meters) or the sensor timed out.  Example Code​  #Python code import time from codrone_edu.drone import * drone = Drone() drone.pair() max_height = 100 drone.takeoff() drone.set_throttle(20) current_height = drone.get_height(&quot;cm&quot;) while current_height &lt;= max_height: drone.move() current_height = drone.get_height(&quot;cm&quot;) print(current_height) drone.land() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_back_color()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_back_color","content":" Description​  get_back_color() is a getter function that calls get_color_data() but only returns the data for the back color sensor.  Syntax​  get_back_color()  Parameters​  None  Returns​  back color data: Returns the back color sensor data.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() color_data = drone.get_back_color() print(color_data) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_color_data()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_color_data","content":" Description​  Getter function that gets a list of color data from the drone.  Syntax​  get_color_data()  Parameters​  None  Returns​  list color data: Returns a list of color data.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() color_data = drone.get_color_data() drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_front_color()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_front_color","content":" Description​  get_front_color() is a getter function that calls get_color_data() but only returns the data for the front color sensor.  Syntax​  get_front_color()  Parameters​  None  Returns​  front color data: Returns the back color sensor data.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() color_data = drone.get_front_color() print(color_data) drone.close()     ","version":"Next","tagName":"h3"},{"title":"load_classifier()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#load_classifier","content":" Description​  load_classifier() is a function that can load a custom color set onto the CoDrone EDU. If no custom color set is given then the default color set is loaded. There is also an option to show the color set as a graph.  Syntax​  load_classifier() load_classifier(dataset, show_graph)  Parameters​  string dataset: An optional parameter to load a custom color set. If no color set is given then the default color set will be used.boolean show_graph: An optional boolean parameter that will show a graph of the color set data. The default value is False.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # This example assumes the &quot;custom_color_data&quot; directory exists drone.load_classifier(&quot;custom_color_data&quot;) color_data = drone.get_color_data() color = drone.predict_colors(color_data) print(color) drone.close()     ","version":"Next","tagName":"h3"},{"title":"predict_colors()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#predict_colors","content":" Description​  Predicts what color the color sensors are currently seeing.  Syntax​  predict_colors(color_data)  Parameters​  list color_data: loaded from drone.get_color_data()  Returns​  list predictions: A prediction of which color the front and back color sensors are currently seeing, as a list.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.load_classifier(&quot;color_data_file&quot;) color_data = drone.get_color_data() color = drone.predict_colors(color_data) print(color) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_colors()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_colors","content":" Description​  get_colors() is a getter function that returns one of the 8 pre-calibrated colors (provided in the color cards).  Syntax​  get_colors()  Parameters​  None  Returns​  list predictions: Returns a list containing the front and back color sensor predictions as strings (Red, Green, Yellow, Blue, Cyan, Magenta, Black, White, Unknown)  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() colors = drone.get_colors() print(colors) drone.close     ","version":"Next","tagName":"h3"},{"title":"new_color_data()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#new_color_data","content":" Description​  new_color_data() is a function that creates a new dataset of custom color prediction data.  Syntax​  new_color_data(label, data, dataset)  Parameters​  string label: label name that will be used for the filename. list data: HSV data samples string dataset: Folder name where the text file will be stored.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() dataset = &quot;color_data&quot; colors = [&quot;green&quot;, &quot;purple&quot;, &quot;red&quot;, &quot;lightblue&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;white&quot;] for color in colors: data = [] samples = 500 for i in range(1): print(&quot;Sample: &quot;, i+1) next = input(&quot;Press enter to calibrate &quot; + color) print(&quot;0% &quot;, end=&quot;&quot;) for j in range(samples): color_data = drone.get_color_data()[0:9] data.append(color_data) time.sleep(0.005) if j % 10 == 0: print(&quot;-&quot;, end=&quot;&quot;) print(&quot; 100%&quot;) drone.new_color_data(color, data, dataset) print(&quot;Done calibrating.&quot;)     ","version":"Next","tagName":"h3"},{"title":"append_color_data()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#append_color_data","content":" Description​  append_color_data() is a function that adds onto an existing dataset of custom color prediction data. the dataset parameter must already exist in order to use this function.  Syntax​  append_color_data(label, data, dataset)  Parameters​  string label: label name that will be used for the filename. list data: HSV data samples string dataset: Folder name where the text file will be stored.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() dataset = &quot;color_data&quot; colors = [&quot;green&quot;, &quot;purple&quot;, &quot;red&quot;, &quot;lightblue&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;white&quot;] for color in colors: data = [] samples = 500 for i in range(1): print(&quot;Sample: &quot;, i+1) next = input(&quot;Press enter to calibrate &quot; + color) print(&quot;0% &quot;, end=&quot;&quot;) for j in range(samples): color_data = drone.get_color_data()[0:9] data.append(color_data) time.sleep(0.005) if j % 10 == 0: print(&quot;-&quot;, end=&quot;&quot;) print(&quot; 100%&quot;) drone.append_color_data(color, data, dataset) print(&quot;Done calibrating.&quot;)     ","version":"Next","tagName":"h3"},{"title":"height_from_pressure()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#height_from_pressure","content":" Description​  This function gets the drone's current height in centimeters based on the initial pressure sensor reading. You must call set_initial_pressure() to establish a reference point.  Syntax​  height_from_pressure() height_from_pressure(b, m)  Parameters​  float b: slope intercept in pascals (default is set to 0) float m: slope in centimeters/pascals (default is set to 9.34)  Returns​  float height: Estimated height in centimeters relative to starting position.  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.set_initial_pressure() # Take an initial pressure reading as a reference for i in range(300): print(drone.height_from_pressure(), &quot; centimeters&quot;) time.sleep(0.2)     ","version":"Next","tagName":"h3"},{"title":"set_initial_pressure()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#set_initial_pressure","content":" Description​  This function saves an initial pressure reading to the drone. This function is used in combination with other functions such as height_from_pressure()  Syntax​  set_initial_pressure()  Parameters​  None  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # Here is where we save our initial pressure. Now the 'height_from_pressure()' function has a reference for height drone.set_initial_pressure() # The drone will not take off in this example but by moving it up and down manually the resulting height will print for i in range(300): print(drone.height_from_pressure(), &quot; millimeters&quot;) time.sleep(0.2)     ","version":"Next","tagName":"h3"},{"title":"get_angular_speed_x()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_angular_speed_x","content":" Description​  This function returns the current angular speed in degrees per second around the x-axis (&quot;roll&quot; axis).  Syntax​  get_angular_speed_x()  Parameters​  None  Returns​  integer angular speed: positive or negative angle speed in degrees per second  Example Code​  Tilt the drone left and right while the program runs to see the angular speed change. Then, hold the drone as still as possible and watch angular speed drop.  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() for i in range(100): print(drone.get_angular_speed_x()) time.sleep(0.05) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_angular_speed_y()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_angular_speed_y","content":" Description​  This function returns the current angular speed in degrees per second around the y-axis (&quot;pitch&quot; axis).  Syntax​  get_angular_speed_y()  Parameters​  None  Returns​  integer angular speed: positive or negative angle speed in degrees per second  Example Code​  Tilt the drone forward and backward while the program runs to see the angular speed change. Then, hold the drone as still as possible and watch angular speed drop.  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() for i in range(100): print(drone.get_angular_speed_y()) time.sleep(0.05) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_angular_speed_z()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_angular_speed_z","content":" Description​  This function returns the current angular speed in degrees per second around the z-axis (&quot;yaw&quot; axis).  Syntax​  get_angular_speed_z()  Parameters​  None  Returns​  integer angular speed: positive or negative angle speed in degrees per second  Example Code​  Turn the drone left and right on a flat surface while the program runs to see the angular speed change. Then, hold the drone as still as possible and watch angular speed drop.  #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() for i in range(100): print(drone.get_angular_speed_z()) time.sleep(0.05) drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_sensor_data()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_sensor_data","content":" Description​  This functions returns a list of 31 values including time stamps and sensor values. It requests 5 distinct lists of data and compiles them into one list. This function returns data more quickly than individual sensor requests.  Syntax​  get_sensor_data() get_sensor_data(delay)  Parameters​  integer delay: The delay in seconds for each sensor request (out of 5). The total delay will be 5x this delay value. The default value is 0.1 seconds.  Returns​  list sensor data: A list of length 31 consisted of sensor data.  data[0] Altitude time stampdata[1] Temperature in Celsiusdata[2] Pressure (Pascals)data[3] Elevation output from barometer (meters)data[4] Height value output from bottom range sensor (meters)data[5] Motion data time stampdata[6] acceleration X Int16 2 Byte -1568 ~ 1568 (-156.8 ~ 156.8) m/s2 x 10 Xdata[7] acceleration Y Int16 2 Byte -1568 ~ 1568 (-156.8 ~ 156.8) m/s2 x 10 Ydata[8] acceleration Z Int16 2 Byte -1568 ~ 1568 (-156.8 ~ 156.8) m/s2 x 10 Zdata[9] gyroRoll: Int16 2 Byte -2000 ~ 2000 degree/second Rolldata[10] gyroPitch Int16 2 Byte -2000 ~ 2000 degree/second Pitchdata[11] gyroYaw Int16 2 Byte -2000 ~ 2000 degree/second Yawdata[12] angleRoll Int16 2 Byte -180 ~ 180 degree Rolldata[13] anglePitch Int16 2 Byte -180 ~ 180 degree Pitchdata[14] angleYaw Int16 2 Byte -180 ~ 180 degree Yawdata[15] Position data time stampdata[16] x Float32 4 Byte - X axis in metersdata[17] y Float32 4 Byte - Y axis in metersdata[18] z Float32 4 Byte - z axis in metersdata[19] Range sensor data time stampdata[20] Front range sensor (millimeters)data[21] Bottom range sensor (millimeters)data[22] Drone state time stampdata[23] modeSystem (system operating mode)data[24] modeFlight (flight controller operating mode)data[25] modeControlFlight (flight control mode)data[26] modeMovement (moving state)data[27] headless (headless setting status)data[28] sensorOrientation (sensor orientation)data[29] battery parcentage leveldata[30] current speed setting  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # collect multiple data points data = drone.get_sensor_data() for i in range(len(data)): print(i, data[i]) # print out each data point drone.close()     ","version":"Next","tagName":"h3"},{"title":"get_error_data()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_error_data","content":" Description​  This command requests if the drone is in an error state. One or more of the following error states can be printed to console.  Motion_Calibrating: Drone is calibrating.Motion_NoAnswer: Gyroscope Accelerometer is unresponsive and may be damaged.Motion_WrongValue: Gyroscope Accelerometer is giving erroneous data.Motion_NotCalibrated: Gyroscope Accelerometer is not calibrated.Pressure_NoAnswer: Barometer is unresponsive.Pressure_WrongValue: Barometer is giving erroneous data.RangeGround_NoAnswer: Bottom Range sensor is unresponsive.RangeGround_WrongValue: Bottom range sensor has given an incorrect value.Flow_NoAnswer: Optical flow sensor is unresponsive.Flow_CannotRecognizeGroundImage: Optical flow sensor is giving erroneous data due to the image.  Syntax​  get_error_data() get_error_data(delay)  Parameters​  float delay: The delay in seconds that the command will wait for a response. The default value is 0.1.  Returns​  string error state: text consisting of one or more error messages  Example Code​  Turn the drone left and right on a flat surface while the program runs to see the angular speed change. Then, hold the drone as still as possible and watch angular speed drop.  #Python code from time import sleep from codrone_edu.drone import * from codrone_edu.protocol import * drone = Drone() drone.pair() # For demonstration purposes, activate motion calibration drone.sendCommand(CommandType.ClearBias) sleep(0.1) for i in range(10): drone.get_error_data() # see motion error state during calibration time.sleep(0.5) drone.close()     ","version":"Next","tagName":"h3"},{"title":"Controller​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller","content":" ","version":"Next","tagName":"h2"},{"title":"down_arrow_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#down_arrow_pressed","content":" Description​  A function that determines if the controller's down arrow button has been pressed.  Syntax​  down_arrow_pressed()  Parameters​  None  Returns​  boolean pressed down: True if the down arrow button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.down_arrow_pressed(): print(&quot;down arrow button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"get_button_data()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_button_data","content":" Description​  get_button_data() is a function that will return a list of information about the most recent button pressed.  Syntax​  get_button_data()  Parameters​  None  Returns​  list button data: A list of data that includes the time of the current program, the number associated with the most recent button pressed, and finally the state of the most recent button pressed. (Down, Pressed, Up)  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_button_data())     ","version":"Next","tagName":"h3"},{"title":"h_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#h_pressed","content":" Description​  A function that determines if the controller's H button has been pressed.  Syntax​  h_pressed()  Parameters​  None  Returns​  boolean pressed H: True if the H button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.h_pressed(): print(&quot;H button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"l1_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#l1_pressed","content":" Description​  A function that determines if the controller's L1 button has been pressed.  Syntax​  l1_pressed()  Parameters​  None  Returns​  boolean pressed L1: True if the L1 button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.l1_pressed(): print(&quot;L1 button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"l2_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#l2_pressed","content":" Description​  A function that determines if the controller's L2 button has been pressed.  Syntax​  l2_pressed()  Parameters​  None  Returns​  boolean pressed L2: True if the L2 button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.l2_pressed(): print(&quot;L2 button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"left_arrow_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#left_arrow_pressed","content":" Description​  A function that determines if the controller's left arrow button has been pressed.  Syntax​  left_arrow_pressed()  Parameters​  None  Returns​  boolean pressed left: True if the left arrow button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.left_arrow_pressed(): print(&quot;left arrow button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"p_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#p_pressed","content":" Description​  A function that determines if the controller's P button has been pressed.  Syntax​  p_pressed()  Parameters​  None  Returns​  boolean pressed P: True if the P button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.p_pressed(): print(&quot;P button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"power_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#power_pressed","content":" Description​  A function that determines if the controller's power button has been pressed. Since pressing the power button also switches the drone to flight mode, this function only detects alternate button presses. In other words, the function can only detect a power button press when in LINK state.  Syntax​  power_pressed()  Parameters​  None  Returns​  boolean pressed power: True if the power button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.power_pressed(): print(&quot;power button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"r1_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#r1_pressed","content":" Description​  A function that determines if the controller's R1 button has been pressed.  Syntax​  r1_pressed()  Parameters​  None  Returns​  boolean pressed R1: True if the R1 button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.r1_pressed(): print(&quot;R1 button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"r2_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#r2_pressed","content":" Description​  A function that determines if the controller's R2 button has been pressed.  Syntax​  r2_pressed()  Parameters​  None  Returns​  boolean pressed R2: True if the R2 button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.r2_pressed(): print(&quot;R2 button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"right_arrow_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#right_arrow_pressed","content":" Description​  A function that determines if the controller's right arrow button has been pressed.  Syntax​  right_arrow_pressed()  Parameters​  None  Returns​  boolean pressed right: True if the right arrow button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.right_arrow_pressed(): print(&quot;right arrow button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"s_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#s_pressed","content":" Description​  A function that determines if the controller's S button has been pressed.  Syntax​  s_pressed()  Parameters​  None  Returns​  boolean pressed S: True if the S button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.s_pressed(): print(&quot;S button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"up_arrow_pressed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#up_arrow_pressed","content":" Description​  A function that determines if the controller's up arrow button has been pressed.  Syntax​  up_arrow_pressed()  Parameters​  None  Returns​  boolean pressed up: True if the up arrow button is pressed or held. Otherwise the function will return false.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.up_arrow_pressed(): print(&quot;up arrow button has been pressed!&quot;)     ","version":"Next","tagName":"h3"},{"title":"get_joystick_data()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_joystick_data","content":" Description​  get_joystick_data() is a getter function that gets a list of data about the state of both joysticks on the controller.  Syntax​  get_joystick_data()  Parameters​  None  Returns​  list joystick data: A list of data that includes the time of the current program, and information about the left and right joysticks.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_joystick_data())     ","version":"Next","tagName":"h3"},{"title":"get_left_joystick_x()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_left_joystick_x","content":" Description​  get_left_joystick_x() is a getter function that gets the position of the left joystick's x position.  Syntax​  get_left_joystick_x()  Parameters​  None  Returns​  integer left joystick x-value: A value between -100 and 100 depending on the x position of the left joystick.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_left_joystick_x())     ","version":"Next","tagName":"h3"},{"title":"get_left_joystick_y()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_left_joystick_y","content":" Description​  get_left_joystick_y() is a getter function that gets the position of the left joystick's y position.  Syntax​  get_left_joystick_y()  Parameters​  None  Returns​  integer left joystick y-value: A value between -100 and 100 depending on the y position of the left joystick.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_left_joystick_y())     ","version":"Next","tagName":"h3"},{"title":"get_right_joystick_x()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_right_joystick_x","content":" Description​  get_right_joystick_x() is a getter function that gets the position of the right joystick's x position.  Syntax​  get_right_joystick_x()  Parameters​  None  Returns​  integer right joystick x-value: A value between -100 and 100 depending on the x position of the right joystick.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_right_joystick_x())     ","version":"Next","tagName":"h3"},{"title":"get_right_joystick_y()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#get_right_joystick_y","content":" Description​  get_right_joystick_y() is a getter function that gets the position of the right joystick's y position.  Syntax​  get_right_joystick_y()  Parameters​  None  Returns​  integer right joystick y-value: A value between -100 and 100 depending on the y position of the right joystick.  Example Code​  #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_right_joystick_y())     ","version":"Next","tagName":"h3"},{"title":"Screen​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#screen","content":" ","version":"Next","tagName":"h2"},{"title":"controller_clear_screen()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_clear_screen","content":" Description​  Clears all drawings from the controller screen  Syntax​  controller_clear_screen() controller_clear_screen(pixel)  Parameters​  string pixel: optional parameter that assigns all pixels to either white or black. white is the default value.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_create_canvas()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_create_canvas","content":" Description​  Creates a new image object for drawing  Syntax​  controller_create_canvas()  Parameters​  None  Returns​  Image image: Returns a new image object that is 127 x 63 pixels  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() image = drone.controller_create_canvas() # see controller_draw_canvas for how to draw on this new image object drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_arc()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_arc","content":" Description​  Draws an arc (a portion of a circle outline) between the start and end angles, inside the given bounding box.  Syntax​  controller_draw_arc(arc_list, start_angle, end_angle, image, pixel_width)  Parameters​  list arc_list: Two points to define the bounding box. Sequence of [(x0, y0), (x1, y1)], where x1 &gt;= x0 and y1 &gt;= y0. integer start_angle: Starting angle, in degrees. Angles are measured from 3 o’clock, increasing clockwise. integer end_angle: Ending angle, in degrees. Image image: image object created from create_image_canvas(). integer pixel_width: optional parameter that is the line width, in pixels. default value is 1.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = drone.controller_create_canvas() # create image object arc_list = [(20, 40), (50, 50)] drone.controller_draw_arc(arc_list, 0, 180, image) # set arc onto image object drone.controller_draw_canvas(image) # draw image onto controller screen drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_canvas()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_canvas","content":" Description​  Draws custom image canvas onto the controller screen  Syntax​  controller_draw_canvas(image)  Parameters​  Image image: image object to be drawn onto the controller screen  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = drone.controller_create_canvas() # create image object arc_list = [(20, 40), (50, 50)] ellipse_list = [(10, 10), (40, 40)] chord_list = [(60, 20), (100, 50)] drone.controller_draw_ellipse(ellipse_list, image) # draw onto image object drone.controller_draw_arc(arc_list, 0, 180, image) drone.controller_draw_chord(chord_list, 0, 180, image) drone.controller_draw_canvas(image) # draw image onto controller screen drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_chord()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_chord","content":" Description​  Same as controller_draw_arc(), but connects the end points with a straight line.  Syntax​  controller_draw_chord(arc_list, start_angle, end_angle, image, pixel_width)  Parameters​  list chord_list: Two points to define the bounding box. Sequence of [(x0, y0), (x1, y1)], where x1 &gt;= x0 and y1 &gt;= y0. integer start_angle: Starting angle, in degrees. Angles are measured from 3 o’clock, increasing clockwise. integer end_angle: Ending angle, in degrees. Image image: image object created from create_image_canvas(). integer pixel_width: optional parameter that is the line width, in pixels. default value is 1.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = drone.controller_create_canvas() # create image object chord_list = [(20, 40), (50, 50)] drone.controller_draw_chord(chord_list, 0, 180, image) # set chord onto image object drone.controller_draw_canvas(image) # draw image onto controller screen drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_ellipse()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_ellipse","content":" Description​  Draws an ellipse inside the given bounding box.  Syntax​  controller_draw_ellipse(ellipse_list, image, fill_in, pixel_width)  Parameters​  list ellipse_list: Two points to define the bounding box. Sequence of [(x0, y0), (x1, y1)] where x1 &gt;= x0 and y1 &gt;= y0. Image image: image object created from create_image_canvas(). integer fill_in: optional parameter. None by default. 0 will fill with black. integer pixel_width: optional parameter that is the line width, in pixels. default value is 1.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = drone.controller_create_canvas() # create image object ellipse_list = [(10, 10), (40, 40)] drone.controller_draw_ellipse(ellipse_list, image) # set ellipse onto image object drone.controller_draw_canvas(image) # draw image onto controller screen drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_image()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_image","content":" Description​  Draws image when given a pixel_list of image data  Syntax​  controller_draw_image(pixel_list)  Parameters​  list pixel_list: the list of image data. can be obtained using get_image_data() function.  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = get_image_data(&quot;example.png&quot;) # where example.png is an image in the same directory as the program drone.controller_draw_image(image) # draws the image onto the controller's screen drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_line()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_line","content":" Description​  Draws a line between points (x1, y1) and (x2, y2)  (x1,y1) \\ \\ \\ \\ (x2,y2)   Syntax​  controller_draw_line(x1, y1, x2, y2, pixel, line_type)  Parameters​  integer x1: point 1 x coordinate integer y1: point 1 y coordinate integer x2: point 2 x coordinate integer y2: point 2 y coordinate string pixel: optional parameter that changes the pixel color of the line. default value is Black string line_type: optional parameter that is the type of line drawn. default is Solid  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing drone.controller_draw_line(0,0, 60, 60) drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_point()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_point","content":" Description​  Draws a single pixel at the point (x,y)  Syntax​  controller_draw_point(x, y, pixel)  Parameters​  integer x: x coordinate integer y: y coordinate string pixel: optional parameter that changes the pixel color of the line. default value is Black  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing drone.controller_draw_point(10, 10) # place a pixel at the (10,10) coordinate drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_polygon()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_polygon","content":" Description​  The polygon outline consists of straight lines between the given coordinates, plus a straight line between the last and the first coordinate.  Syntax​  controller_draw_polygon(point_list)  Parameters​  list point_list: the list of coordinates  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() point_list_square = ((10, 10), (30, 10), (30, 30), (10, 30)) # creating a list of coordinates drone.controller_draw_polygon(point_list_square) drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_rectangle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_rectangle","content":" Description​  Draws a rectangle onto the controller screen starting from point (x,y) and extends to given height and width  width (x,y)|---------------| | | height |_______________|   Syntax​  controller_draw_rectangle(x, y, width, height, pixel, fill, line_type)  Parameters​  integer x: top left corner x coordinate integer y: top left corner y coordinate integer width: width of rectangle integer height: height of rectangle string pixel: optional parameter that changes the pixel color of the line. default value is Black boolean fill: optional parameter to fill in the rectangle or not. default value is False string line_type: optional parameter that is the type of line drawn. default is Solid  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() drone.controller_draw_rectangle(30, 15, 50, 30) drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_square()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_square","content":" Description​  Draws a square on the controller screen starting from point (x,y) and will extend to the given width  width (x,y)|------| | | width |______|   Syntax​  controller_draw_square(x, y, width, pixel, fill, line_type)  Parameters​  integer x: top left corner x coordinate integer y: top left corner y coordinate integer width: width of square string pixel: optional parameter that changes the pixel color of the line. default value is Black boolean fill: optional parameter to fill in the square or not. default value is False string line_type: optional parameter that is the type of line drawn. default is Solid  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() drone.controller_draw_square(10, 10, 25) drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_string_align()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_string_align","content":" Description​  Draws a string from the given x_start, x_end and y positions. The string can be aligned along the x_start and x_end positions  Syntax​  controller_draw_string_align(x_start, x_end, y, string, alignment, string_font, pixel_color)  Parameters​  integer x_start: starting x position integer x_end: ending x position integer y: y position string string: the string to write string alignment: optional parameter that is the alignment between x_start and x_end. can align Left, Right, or Center. default value is Center integer string_font: optional parameter that is the font of the string to be written. default value is LiberationMono5x8 integer pixel_color: optional parameter that is the pixel color of the written string. default value is Black  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() drone.controller_draw_string_align(0, 70, 0, &quot;Hello, world!&quot;) drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_draw_string()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_draw_string","content":" Description​  Draws a string from the given x_start, x_end and y positions. The string can be aligned along the x_start and x_end positions  Syntax​  controller_draw_string(x, y, string, string_font, pixel_color)  Parameters​  integer x: starting x position integer y: starting y position string string: the string to write integer string_font: optional parameter that is the font of the string to be written. default value is LiberationMono5x8 string pixel_color: optional parameter that is the pixel color of the written string. default value is Black  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() drone.controller_draw_string(0, 0, &quot;Hello, world!&quot;) drone.close()     ","version":"Next","tagName":"h3"},{"title":"controller_preview_canvas()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/CoDroneEDU/Python/Function-Documentation#controller_preview_canvas","content":" Description​  Creates a pop up window to preview your current image object on your computer screen.  Syntax​  controller_preview_canvas(image)  Parameters​  Image image: image object to be previewed  Returns​  None  Example Code​  #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = drone.controller_create_canvas() # create image object arc_list = [(20, 40), (50, 50)] ellipse_list = [(10, 10), (40, 40)] chord_list = [(60, 20), (100, 50)] drone.controller_draw_ellipse(ellipse_list, image) # draw onto image object drone.controller_draw_arc(arc_list, 0, 180, image) drone.controller_draw_chord(chord_list, 0, 180, image) drone.controller_preview_canvas(image) # draw image onto controller screen drone.close()    ","version":"Next","tagName":"h3"},{"title":"Privacy Policy","type":0,"sectionRef":"#","url":"/ko/docs/privacy-policy","content":"Privacy Policy 교육 및 어린이 개인 정보 정책 Last Updated: Jun 18, 2024 Robolink, Inc. (&quot;Robolink&quot;, &quot;our&quot;, &quot;us&quot;, or &quot;we&quot;) provides learning robotics materials to schools and individuals (our &quot;Services&quot;). We provide these Services via our dedicated online portals that contain lessons, content and materials (&quot;Education Portals&quot;). In order to provide the Education Portals and our Services, we collect limited personal information. When we use the term &quot;personal information&quot;, we mean individually identifiable information about you, the user. This includes, for instance, your name or email. Is this Privacy Notice for You? If you are using our Education Portals, you’ve come to the right place to learn about how we protect your personal information! Our Education Portals are directed to mixed audiences, meaning that this may include children under 13 (&quot;Child Users&quot;). Our Education Portals include the following tools and URLs: Basecamp, our lesson portal, located at https://learn.robolink.com/Our web-based block coding platform, located at https://codrone.robolink.com/edu/blockly/Our documentation site, located at https://docs.robolink.comOur technical support site, located at https://robolink.helpdocs.io This Education and Children’s Privacy Notice (&quot;Privacy Notice&quot;) describes how we collect and use your personal information when you visit the Education Portals and use our Services. Please read it carefully! Overview You can use our Education Portals without creating an account or logging into an existing account. If you don’t create an account, we will collect limited information about your device and usage of the Education Portals via cookies – we explain this in more detail [here]. If you do create an account, we collect limited information. If you are a Child User, we provide your parent or legal guardians (&quot;Parent&quot;) control over the data that we collect. Below is a quick overview of our data collection practices, which are described in greater detail in this Privacy Notice. What you need to know Collection of Information. Because our Education Portals may be used by Child Users, we take special steps when collecting and processing information through our Education Portals, by limiting the personal information that we collect and how we use that information. We also provide Parents control over the data that we collect.Usage and Disclosure of Information. We use the information that we collect solely to provide our Education Portals and our Services, and to support the internal operations of our business and Services. These limited purposes include maintaining and analyzing the functioning of the Education Portals, providing our Services (e.g., tracking your progress), and providing customer service. When you visit Education Portals, we also collect certain usage data, to support our internal operations, enforce our Terms of Use, and comply with applicable laws. We do not use that information to target children with ads and we do not share, sell, or transfer your information. We only disclose your information to our service providers who help us support the internal operations of the Education Portals.Children’s Privacy. We explain this in more detail in the Children’s Privacy section of this Privacy Notice. It is located here and provides additional information about how Child Users can use our Education Portals and Services and how we process the information from Child Users.Schools. When educational institutions and teachers (&quot;Schools&quot;) use our information in an educational setting, we have special agreements in place that restrict our use of any information obtained about student users (&quot;Students&quot;). In addition to the information in this Privacy Notice, the Additional Information about Schools and Student Use describes our obligations to Schools and their Students in more detail. Information about Robolink The operator of the Education Portals is Robolink, Inc. You can contact us at privacy@robolink.com if you have any questions. We are located at: 5075 Shoreham Pl, Ste 110 San Diego, CA 92122. 1. Information We Collect We collect information in the following ways, depending on how you use the Education Portals: From you directly, such as when you create an account.From others, such as when we work with Schools in an educational setting, or from your Parent if you are a Child User.Automatically, including information about how you use the Education Portals and the devices you use to access them. To gather this information, we use cookies, as explained below. a. Information you provide to us Visiting the Education Portals You may visit and use our Education Portals without submitting any personal information, in which case we will only collect information via automated means (i.e., cookies), as explained below. Creating an Account If you create an account, we collect the following information from you: Educators or Students over the age of 13: username, email address and password;Parents: first and last name, username, email address and password.Child Users: Child Users may not create an account on their own. Please review the Additional Information about Children’s Privacy section below for information on our collection of information when you create an account. Using Zumi If you use a Zumi device, you will be asked to connect your device using a username that is stored locally on the device – Robolink does not store and cannot access this information. You may also opt to turn on the camera functionality and take photos. If you do so, any photos will be stored on your device – Robolink does not store and cannot access this information. b. Automatically collected information When you visit and interact with the Education Portals, we automatically collect information about your device, browser, and activity: Cookies. We use cookies to automatically collect information. Information that we get from cookies (or similar technologies) serves different purposes: to maintain and analyze how the Education Portals work, identify any suspicious activities so we can try to protect users from fraud and other inappropriate activities, or understand how you use the Education Portals and track your progress. We may rely on cookies placed by authorized service providers, such as Google Analytics. We do not use any tracking technologies for behavioral advertising on our Education Portals. Robolink does not serve behavioral advertising to or retarget ads to Child Users or any users who visit the Education Portals.Most browsers provide choices with respect to these technologies. For example, by modifying your browser preferences, you may have the choice to accept all cookies or be notified when a cookie is set. You can learn more about cookies and how they work at www.allaboutcookies.org, or by visiting your browser preferences.Through the use of cookies, we collect: Device and usage information. We collect information about the device you use to connect to the Education Portals. This information includes your device’s IP address, your device type, browser type, internet service provider, operating system, and unique device identifiers. This also includes activity and usage information, such as the frequency with which you use the Education Portals, how long you stay connected, the pages that you navigate to, any links that you view, and other ways that you interact with the Education Portals.Location Information. When you access the Education Portals, we may collect information about your device’s location by inferring your general location via your device’s IP address. Location information does not include street name and name of city or precise geolocation. Do not track. Although we do our best to honor the privacy preferences of our users, we do not respond to &quot;Do Not Track&quot; signals from your browser at this time. For more information about &quot;Do Not Track&quot;, visit www.allaboutdnt.com.We do not use persistent identifiers such as your IP address to track your activities over time and across different websites and online services.Robotics devices such as Zumi or Drones. These devices may collect sensor data to detect colors and air pressure. Robolink does not have access to this information in an identifiable manner. c. Information received from third parties From time to time, we process personal information from third parties, which may include information from Schools when the Services and Education Portals are used in an educational setting, as described in Additional Information about Schools and Student Use. We may also receive information from Parents who create accounts for Child Users. 2. Google Analytics We use Google Analytics to analyze traffic to the Education Portals. Google Analytics helps us understand how visitors and users engage with the Education Portals. To learn more about Google Analytics’ data practices, please visit Google’s support page. You may also opt-out by clicking here. Our Google Analytics configuration is set to disable information collected via Google Analytics from being shared with Google products and services. 3. How We Use Your Information We use your personal information to: Operate and administer the Education Portals and our Services. We use your personal information to provide, administer and manage the Education Portals, including to register your account and enable you to log in if you choose to do so, and track your progress.Provide support and communicate with you. When we respond to your inquiries or support requests, we will use your personal information to assist you, as well as any additional information that you provide. We also use your information to send you important updates about changes to this Privacy Notice or other terms and policies, and information about your transaction(s).Measure and analyze the functioning of the Education Portals. We use information to analyze how our users use the Education Portals. This includes using information to identify issues and bugs, change existing features or test new features.Maintain security and prevent fraud. We use personal information to: Maintain the security and integrity of the Education Portals;Detect, prevent, investigate, and protect our users, the business, and others from fraud, unauthorized transactions, and other unsafe activity; andProtect the safety, rights, or property of any person and our business. Comply with our legal obligations. To comply with applicable laws and regulations and valid legal requests, we may use your personal information. This includes tax and reporting obligations.As otherwise necessary or appropriate. We will use your personal information for other purposes at your direction or with your consent. 4. When We Disclose Your Information We disclose your personal information to support the internal operations of our Education Portals and Services. We may disclose personal information as follows: To our affiliates. We may disclose your personal information to and among our affiliates, subsidiaries, and other companies under common control and ownership for purposes consistent with this Privacy Notice.To our service providers. We disclose your personal information to third parties that provide services to us. This includes services that assist with cloud storage and system hosting, information security, fraud prevention, payment processing, analytics, and legal matters. Our list of service providers can be accessed here.To Schools that use the Education Portals in an educational setting. We may disclose users’ information to Schools that use the Education Portals in an educational setting, as described in more detail below.To comply with legal requirements. We will disclose personal information when we believe that the disclosure is reasonably necessary to comply with applicable laws and regulations, as well as valid legal processes or legal requests.In connection with a change of control. Over time, Robolink may grow and reorganize. We may share your information, including personal information with affiliates such as a parent company, subsidiaries, joint venture partners or other companies that we control or that are under common control with us, in which case we will require those companies to agree to use your personal information in a way that is consistent with this Privacy Notice. In the event of a change to our organizations such that all or a portion of Robolink or its assets are acquired by or merged with a third-party, or in any other situation where personal information that we have collected from users would be one of the assets transferred to or acquired by that third-party, this Privacy Notice will continue to apply to your information, and any acquirer would only be able to handle your personal information as per this Privacy Notice (unless you give consent to a new privacy notice). We will provide you with notice of an acquisition within thirty (30) days following the completion of such a transaction, by posting on our homepage and by email to your email address that you provided to us. If you do not consent to the use of your personal information by such a successor company, subject to applicable law, you may request its deletion from the company.In the unlikely event that Robolink goes out of business, or files for bankruptcy, we will protect your personal information, and will not sell it to any third-party. To others, at your direction or as necessary. We will disclose your personal information to other parties at your direction or with your consent. We may also disclose your personal information to other parties if we believe it necessary or appropriate to: Protect our business;Protect our rights, privacy, safety, or property, or those of others; orTo allow us to pursue available legal remedies or limit damages that we may sustain. If we disclose your personal information for reasons not listed above, we will notify you of such disclosure at the time of information collection as required by applicable laws. 5. Third-Party Websites Some links on the Education Portals may redirect you to third-party websites and services that Robolink does not operate. How these websites and services use your personal information is governed by their own privacy policies. We encourage you to review and understand their privacy policies before disclosing any personal information to them. 6. Information Security &amp; Data Retention We implement and maintain reasonable administrative, physical, and technical measures designed to safeguard and protect personal information under our control from unauthorized access, use, and disclosure. Nevertheless, because no data transmission or storage system is completely secure, we cannot guarantee the security of your information. Here are some ways to protect your personal information: Create a username that does not reveal your identityCreate (and keep) a strong password – do not reuse passwordsKeep your password to yourself! We retain personal information only as long as is reasonably necessary to fulfill the purpose for which it was collected. 7. Processing in the United States Robolink operates its business, including the Education Portals, in the United States and processes personal information in the United States. As such, when you visit the Education Portals or submit information, your personal information may be processed outside of the country or region in which you reside. 8. Additional Information about Children’s Privacy Age Verification and Parents The section below supplements this Privacy Notice and explains how we collect information from Child Users on the Education Portals and in connection with our Services. IT IS IMPORTANT THAT YOU READ THIS IF YOU ARE A CHILD USER OR A PARENT, TO UNDERSTAND HOW WE COLLECT AND USE YOUR INFORMATION. As explained in more detail below, if you are a Child User and want to create an account, you will need to provide your Parent’s email so that we can contact them. Only your Parent will be able to create an account for you. a. Age Verification All users on the Education Portals, including Parents, teachers, and Students, may view lessons, content, and documentation without creating an account (or logging in). However, users cannot track their progress when they are not logged in (note that the documentation portal does not allow or require user registration). This is how it works: Users who are not Parents or teachers and who wish to register on the Education Portals as &quot;Students&quot; are asked to enter their date of birth for purposes of complying with COPPA.f a user’s response indicates that the Student is a Child User, the Child User is prompted to submit a Parent’s email address so that Robolink may contact the Child User’s Parent via email with information about how to create the account.Robolink does not knowingly permit Child Users to create an account without the consent of a Parent (or School). If you are a Parent and discover that your child under the age of 13 has registered without your consent, please contact us at privacy@robolink.com to request that we delete your Child User’s personal information from our systems. b. Parental Consent and Account Creation Parents may follow the instructions contained in an email sent by Robolink to the Parent’s email address provided by the Child User at registration. Once a Parent of a Child User creates a Parent account, they can create a Child User student account for their Child User. For Child User student accounts, we only collect username and password and the Parent whose account it is associated with. Only the Parent account can create a username for a Child User student account. Parents can revoke a Child User’s permissions to use the Education Portals at any time by deleting the account. To do so, Parents can log into their account and delete any Child User account associated with theirs. We strongly recommend that Parents select a username that does not relate to or identify the real name of the Child User. The Child User’s username can only be changed by the Parent. If a Parent does not create an account after receiving the email and links from Robolink, Child Users can continue to access the materials on the Education Portals without registering for an account. Limited Information Collection, Use and Sharing a. Information We Collect About Child Users Robolink collects username and password for the Child User account. Robolink also collects device and usage information via cookies (as explained here). This is information about the Child User’s use of the Education Portal and includes lessons completed and progress only if the Child User is logged in. Robolink limits its collection of personal information from Child Users: Child Users cannot input additional information about themselves, and Child Users cannot make their information publicly available.Child Users cannot receive emails from Robolink – any such emails are sent to the Child User’s Parent associated with the Child User’s account. b. How We Use and Share Child User Information We use personal information to provide the Education Portals and our Services only, as described in section 3 (&quot;How We Use Your Information&quot;) above. We use the Parent’s email address to communicate messages about the Child User’s account. Robolink does not use Child Users’ personal information for non-educational commercial purposes (e.g., advertising). We disclose information as set forth here in more detail. This includes: To our service providers who work on our behalf and help us operate and administer the Education Portals and our ServicesTo a Parent or with a Parent’s consentTo Schools, if applicable (please see the section titled Additional Information about Schools and Student Use for more information)In connection with business transfers (e.g., mergers and acquisitions, bankruptcy sales) under certain circumstancesTo comply with applicable laws and fulfill our own legal obligations, and when reasonably necessary to protect the security and safety of our users, Education Portals and Services, or when permitted by law. Robolink uses Google Analytics for the sole purpose of providing support for its internal operations. c. No Third-Party Tracking for Targeted Advertising Robolink does not use advertising cookies or tracking technologies on the Education Portals, and specifically does not serve any targeted advertising to Child Users. We do not disclose personal information of Child Users for direct marketing purposes or for targeted advertising purposes. In addition, we have taken steps to ensure that there is no Ad Partner technology on the Education Portals. d. Accessing, Modifying or Deleting your Child’s Account As a Parent, you have the ability to access and control information about your Child User. You can log into your Parent account, and review , delete or update the information associated with your account, including a Child User’s information. Please contact privacy@robolink.com if you need further assistance. We will require proper authentication before proceeding with any request. In some cases, administrative controls, including the ability to delete an account, are held by the School, in which case you must direct your request to the School. For more information, please review the Additional Information about Schools and Student Use section below. To learn more about COPPA, you can visit the Federal Trade Commission’s COPPA website: https://www.ftc.gov/news-events/topics/protecting-consumer-privacy-security/kids-privacy-coppa. 9. Your Choices You have certain choices and may exercise certain rights with respect to our use of your personal information. Please note that rights and requests may be subject to applicable exceptions. a. Exercise your marketing choices We may send you periodic marketing and promotional emails (and will obtain your consent to do so, where required by law). If you no longer wish to receive our marketing and promotional communications, you may opt-out of receiving them by following the opt-out or unsubscribe instructions included in any communication that you receive from us. Please note that even if you opt-out of receiving promotional communications from us, we may still send you administrative and transactional messages from which you cannot opt-out. b. California Consumer Notice Under California Civil Code Section 1789.3, California residents are entitled to the following specific consumer rights notice: if you have a question or complaint regarding our Education Portals, please send an email to privacy@robolink.com. You may also contact us by writing to us at the address provided below under [Contact Information]. California residents may contact the Complaint Assistance Unit of the Division of Consumer Services of the California Department of Consumer Affairs: In writing at 400 R Street, Suite 1080, Sacramento, California 95814; orBy telephone at (916) 445-1254 or (800) 952-5210. California Shine the Light Law. The &quot;Shine the Light&quot; requirements under California Civil Code §1798.83 do not apply to the individuals covered under this Privacy Notice because we do not engage in activities covered by this law. 10. Contact Information You may contact us about this Privacy Notice or our privacy practices at privacy@robolink.com or by writing to us at: Robolink, Inc. 5075 Shoreham Pl, Ste 110 San Diego, CA 92122 11. Additional Information about Schools and Student Use This section supplements this Privacy Notice when Robolink collects personal information in connection with Schools’ use of the Services and Education Portals. a. School Ownership of Information When our Services and Education Portals are used by Schools (including school districts and teachers) as part of Schools’ educational programs, personal information about or relating to the Students may include information defined as &quot;education records&quot; by the Family Educational Rights and Privacy Act (&quot;FERPA&quot;) or similar state Student data privacy laws, depending on the School. We refer to this information as &quot;Student Personal Information&quot; throughout this section. FERPA is a federal law that prevents Schools from releasing certain information about your child to vendors such as Robolink absent certain restrictions and additional obligations. When Schools provide Student information in connection with their use of the Services and Education Portals, we have special agreements in place with Schools that use the Services and Education Portals for educational purposes. Those agreements require us to comply with certain restrictions, including the following: The School controls the personal information of its Students, and Robolink will use it only according to terms of the contract and for the purpose of benefiting the School; Robolink will assist the School in responding to requests from Parents or eligible Students to inspect and review personal information and categories of data being held, including correction;Robolink will not share information obtained from the School with third parties, unless this is specifically consented to; andRobolink is restricted from using the information for marketing, including behavioral advertising or targeting, or profile-building. Robolink may use aggregated anonymized data and de-identified metadata for internal operations purposes such as improving the functioning of the Education Portals and Services and conducting research to validate and improve the Education Portals and Services. b. Information Security and Breach Notification If Robolink becomes aware of a systems security breach by an unauthorized party or that any user data was used for an unauthorized purpose, we will comply with relevant state and other data breach laws. We will notify users of any breach resulting in unauthorized release of data electronically, at minimum, and without unreasonable delay so that you can take appropriate steps. The notification will include: date of the breach, the types of information that were subject to the breach, general description of what occurred, and steps Robolink is taking to address the breach. We work with Schools to protect Student Personal Information in compliance with FERPA and, for School Users who are under 13, COPPA, as explained in our section titled Additional Information about Children’s Privacy. If you have any questions general or about reviewing, modifying, or deleting the personal information of a Student, please contact your School directly. You may also contact us at privacy@robolink.com. 12. Changes to this Notice The &quot;Last Updated&quot; date at the top of this page indicates when this Privacy Notice was last revised. We may from time to time update this Privacy Notice to reflect changes in our information handling and privacy practices or applicable law. We won’t reduce your rights under this Privacy Notice without your explicit consent. If we make any significant changes, we’ll provide prominent notice by posting a notice on the Education Portals and notifying you by email (using the email address you provided) within 30 days before the change takes effect, so you can review and make sure you know about them. We encourage you to review this Privacy Notice from time to time, to stay informed about our collection, use, and disclosure of personal information. If you don’t agree with any changes to the Privacy Notice, you may terminate your account. By continuing to use the Education Portals and Services after the revised Privacy Notice has become effective, you acknowledge that you accept and agree to the current version of the Privacy Notice.","keywords":"","version":"Next"},{"title":"Terms of Use","type":0,"sectionRef":"#","url":"/ko/docs/terms-of-use","content":"Terms of Use Terms of Use Last Updated: May 15, 2024 OVERVIEW Thank you for visiting this website, which is operated by Robolink, Inc. (&quot;Robolink&quot;, &quot;we&quot;, or &quot;us&quot;). These Terms of Service (&quot;Terms&quot;) apply to our business website at https://www.robolink.com/ (our &quot;Business Site&quot;). These Terms also apply when you purchase our robotics kits (&quot;Products&quot;) via our Business Site. Additionally, these Terms apply to our learning materials available at the following &quot;Education Portals&quot; hosted by Robolink (&quot;Education Services&quot;): Basecamp, our lesson portal: https://learn.robolink.com/Our web-based block coding platform: https://codrone.robolink.com/edu/blockly/Our documentation website: https://docs.robolink.comOur technical support website: https://robolink.helpdocs.io Throughout these Terms, our Business Site and our Education Portals are referred to as &quot;Site(s)&quot; and our provision of learning materials and information through the Education Portals are referred to as our &quot;Education Services&quot;. Please read these Terms carefully before accessing or using our Site(s). By accessing or visiting our Site(s), purchasing or using any Products, and/or purchasing or using our Education Services, you agree to be bound by these Terms, including those additional terms and conditions and policies referenced herein and/or available by hyperlink. If you do not agree to all the terms and conditions of these Terms, you may not access or use the Site(s), purchase Products or use any Education Services. If these Terms are considered an offer, acceptance is expressly limited to these Terms. These Terms apply to all Users of the Site(s), including without limitation Users who are browsers, vendors, customers, merchants, and/or contributors of content. If you are entering into this Agreement on behalf of a company or other legal entity, you represent that you have the authority to bind such entity to these Terms, in which case the terms &quot;you&quot;, &quot;your&quot; or &quot;User&quot; shall refer to such entity. This also includes personnel of educational institutions (&quot;Schools&quot;) entering into this Agreement on behalf of their School, as explained in further detail in Section 2 of these Terms. If you do not have such authority, or if you do not agree with these Terms, you must not accept this Agreement and may not use the Education Services. IMPORTANT: PLEASE CAREFULLY REVIEW SECTION 20 (&quot;MUTUAL ARBITRATION AGREEMENT: BINDING ARBITRATION; CLASS ACTION WAIVER&quot;) SET FORTH BELOW, AS IT WILL REQUIRE YOU TO RESOLVE DISPUTES WITH ROBOLINK ON AN INDIVIDUAL BASIS THROUGH FINAL AND BINDING ARBITRATION AND WAIVING YOUR RIGHT TO A CLASS ACTION. SECTION 20 OF THESE TERMS (THE &quot;ARBITRATION AGREEMENT&quot;) PROVIDES THAT ANY CLAIMS THAT YOU AND ROBOLINK HAVE AGAINST EACH OTHER, INCLUDING, WITHOUT LIMITATION, ANY CLAIMS THAT AROSE OR WERE ASSERTED BEFORE THE EFFECTIVE DATE OF THESE TERMS, WILL, WITH LIMITED EXCEPTIONS, BE SUBMITTED TO BINDING AND FINAL ARBITRATION. UNLESS YOU OPT-OUT OF THE ARBITRATION AGREEMENT, YOU WILL ONLY BE PERMITTED TO PURSUE CLAIMS AND SEEK RELIEF AGAINST ROBOLINK ON AN INDIVIDUAL BASIS, NOT AS A PLAINTIFF OR CLASS MEMBER IN ANY CLASS OR REPRESENTATIVE ACTION OR PROCEEDING. TO THE FULLEST EXTENT PERMITTED BY LAW, YOU ALSO WAIVE YOUR RIGHT TO SEEK RELIEF IN A COURT OF LAW AND TO HAVE A JURY TRIAL ON YOUR CLAIMS. PLEASE SEE SECTION 20 FOR MORE INFORMATION REGARDING THIS ARBITRATION AGREEMENT, THE POSSIBLE EFFECTS OF THIS ARBITRATION AGREEMENT, AND HOW TO OPT OUT OF THE ARBITRATION AGREEMENT. THESE TERMS ALSO CONTAIN RELEASES, LIMITATIONS ON LIABILITY, AND PROVISIONS ON INDEMNITY, AND ASSUMPTION OF RISK, ALL OF WHICH MAY LIMIT YOUR LEGAL RIGHTS AND REMEDIES. PLEASE REVIEW THEM CAREFULLY. We reserve the right to refuse access to the Site(s) and/or the Service(s) to anyone for any reason at any time. 1. ONLINE STORE TERMS WHEN YOU PURCHASE OUR PRODUCTS Our Business Site and e-commerce are hosted on Shopify Inc. They provide us with the online e-commerce platform that allows us to sell our Products to you. Shopify is not responsible for any of our Products. By agreeing to these Terms, you represent you are at least the age of majority in your state or province of residence, or you are the age of majority in your state or province of residence and you have given us your consent to allow any of your minor dependents or child Users to use the Site(s). Each of the following terms and policies are incorporated into these Terms: Purchase Order Terms: https://www.robolink.com/pages/purchase-order Refund Policy: https://www.robolink.com/policies/refund-policy Shipping and Return Policy: https://www.robolink.com/pages/shipping-policy Privacy Notice: [LINK] Education and Children’s Privacy Notice: [LINK] Warranty Policy: https://www.robolink.com/pages/warranty-policy You agree to pay all fees incurred by you or on your behalf through the Site(s), at the prices in effect when such charges are incurred including, without limitation, all shipping and handling charges. You authorize us to charge all sums for the orders you make to the payment method specified at the time. In addition, you remain responsible for any taxes that may be applicable to your transactions. You authorize us to charge all applicable amounts for the orders you make to the payment method specified at the time of purchase. You are responsible for obtaining any and all licenses, including, without limitation FAA and drone licenses of any kind prior to using any Products. 2. USE OF THE EDUCATION SERVICES BY SCHOOLS AND USERS Please read this Section carefully as it relates to the purchase or use of our Education Services. a. Authority to Bind If you are an employee or staff of a School entering into this Agreement on behalf of your School (&quot;School Personnel&quot;), you represent that you have the authority to bind such entity to these Terms, in which case the terms &quot;you&quot;, &quot;your&quot; or &quot;User&quot; shall refer to such entity. If you do not have such authority, or if you do not agree with these Terms, you must not accept this Agreement and may not use the Education Services. You are responsible for your Users of the Site(s), Products and Education Services and their compliance with these Terms. b. Ownership of School Information We each agree that all rights, including all intellectual property rights, in School information, content and materials (&quot;School Data&quot;) shall remain the exclusive property of the School, and Robolink has a limited, nonexclusive license in such School Data for the purpose of performing its obligations as outlined in the Agreement. This Agreement does not give Robolink any rights, implied or otherwise, to School Data, except as expressly stated in the Agreement. This includes the right to sell or trade School User Data (defined below) provided by the School. The Education Services may allow Schools to track and gather a range of data and information regarding your employees, agents, independent contractors, and students (&quot;School User Data&quot;). School User Data may include personal information (&quot;PI&quot;) and other non-public information, such as student data, metadata, and User content. You shall retain all title to and ownership of and all proprietary rights with respect to School User Data, and shall be solely responsible for its use thereof. You are also responsible for securing and backing up your School User Data. You hereby grant Robolink a worldwide, royalty-free, and non-exclusive license to access and use School User Data for the sole purpose of enabling Robolink to provide the Education Services, and for the limited purposes set forth in Robolink’s Education and Children’s Privacy Notice. With respect to School User Data, Robolink agrees to the following: Robolink is acting as a service provider under your direct control with respect to your students’ use of the Education Portals or Education Services;Robolink will only request the personal information required to provide the Education Services.Robolink will not use personal information for purposes other than those disclosed hereunder, including within Robolink’s Education and Children’s Privacy Notice.Robolink will not disclose student data that is has collected as set forth in this Section to a third party without direction and consent from you.Robolink will maintain appropriate physical, technical, and administrative safeguards to protect student personal information.Robolink will create and maintain a comprehensive security incident response policy and plan, to notify you in the event of a breach; andRobolink will destroy personal information on termination of these Terms or as set forth in its data retention policies when there is no legitimate reason to maintain such information.Notwithstanding the foregoing, Robolink may use de-identified or aggregated data as permitted by applicable laws or for its own purposes provided it does not or cannot identify any individual. c. Parental Consent for School Users Under 13 Schools and School Personnel are authorized to obtain prior verifiable parental consent in compliance with the Children’s Online Privacy Protection Act (&quot;COPPA&quot;) for any of your Users who are under age 13 and who may access or use the Education Services. Robolink will provide you with a copy of or link to its Education and Children’s Privacy Notice, and a COPPA consent form for your use, and you represent and warrant you will use such consent form to obtain prior verifiable parental consent from parents or guardians as required under COPPA. You will certify your compliance with this Section upon Robolink’s request. 3. RIGHTS TO ACCESS AND USE FOR EDUCATIONAL PURPOSES Subject to your compliance with these Terms, Robolink hereby grants you the right to access and use the Education Services we offer to your School through the Education Services. These rights are strictly limited to your educational, and non-commercial use of the Education Services in connection with your schoolwork, if you are a student, or the assignment of schoolwork or monitoring of an associated student’s progress, if you are School Personnel or a parent. 4. MODIFICATIONS TO THE PRODUCTS, EDUCATION SERVICES AND PRICES Prices for our Products and/or Education Service(s) are subject to change without notice. We reserve the right to modify or discontinue the Education Service(s) (or any part or content thereof) at any time without notice. We shall not be liable to you or to any third-party for any modification, price change, suspension, or discontinuance of the Products or Education Service(s). 5. TRADEMARKS AND INTELLECTUAL PROPERTY The Robolink name, the Robolink logo, and all related names, logos, product and service names, designs, and slogans are trademarks of Robolink or its affiliates or licensors. You must not use such marks without the prior written permission of Robolink. All other names, logos, product and service names, designs, and slogans on the Site(s) or as used in connection with the Education Services and/or Products are the trademarks of their respective owners. Robolink owns all intellectual property rights in and to the content and materials on the Site(s), Education Services and Products. There are no implied rights. 6. ACCURACY OF BILLING AND ACCOUNT INFORMATION We reserve the right to refuse any order you place with us. We may, in our sole discretion, limit or cancel quantities purchased per person, per household or per order. These restrictions may include orders placed by or under the same customer account, the same credit card, and/or orders that use the same billing and/or shipping address. In the event we make a change to or cancel an order, we may attempt to notify you by contacting the e-mail and/or billing address/phone number provided at the time the order was made. We reserve the right to limit or prohibit orders that, in our sole judgment, appear to be placed by dealers, resellers, or distributors. You agree to provide current, complete, and accurate purchase and account information for all purchases made at our store. You agree to update your account and other information promptly, including your e-mail address, credit card numbers and expiration dates, so we can complete your transactions and contact you as needed. For more detail, please review our Returns Policy. 7. OPTIONAL TOOLS We may provide you with access to third-party tools, which we do not monitor or have control over any input. You acknowledge and agree we provide access to such tools&quot; as is&quot; and &quot;as available&quot; without any warranties, representations, or conditions of any kind, and without any endorsement. We shall have no liability whatsoever arising from or relating to your use of optional third-party tools. Any use by you of optional tools offered through the Site(s) is entirely at your own risk and discretion. You should ensure you are familiar with and approve of the terms the relevant third-party providers require. From time to time, we may offer new services and/or features through the Site(s) or Education Services (including the release of new tools and resources). Such new features and/or services shall also be subject to these Terms. 8. THIRD-PARTY LINKS Certain content, products, and services available via our Site(s) and/or Education Service(s) may include materials from third-parties. Third-party links on this Site(s) may direct you to third-party websites not affiliated with us. We are not responsible for examining or evaluating the content or accuracy and we do not warrant and will not have any liability or responsibility for any third-party materials or websites, or for any other materials, products, or services of third-parties. We are not liable for any harm or damages related to the purchase or use of goods, services, resources, content, or any other transactions made in connection with any third-party websites. Please carefully review the third-party’s policies and practices and make sure you understand them before you engage in any transaction. Complaints, claims, concerns, or questions regarding third-party products should be directed to the third-party. 9. USER COMMENTS, FEEDBACK, AND OTHER SUBMISSIONS If, at our request, you send certain specific submissions (for example contest entries), or without a request from us you send creative ideas, suggestions, proposals, plans, or other materials, whether online, by email, by postal mail, or otherwise (collectively &quot;comments&quot;), you agree that we may, at any time, without restriction, edit, copy, publish, distribute, translate, and otherwise use in any medium any comments you forward to us. We are and shall be under no obligation (1) to maintain any comments in confidence; (2) to pay compensation for any comments; or (3) to respond to any comments. We may, but have no obligation to, monitor, edit, or remove content we determine in our sole discretion are unlawful, offensive, threatening, libelous, defamatory, pornographic, obscene, or otherwise objectionable or violates any party’s intellectual property or these Terms. You agree your comments will not violate any right of any third-party, including copyright, trademark, privacy, personality, or other personal or proprietary right. You further agree that your comments will not contain libelous or otherwise unlawful, abusive or obscene material, or contain any computer virus or other malware that in any way could affect the operation of the Service(s) or any related Site(s). You may not use a false e-mail address, pretend to be someone other than yourself, or otherwise mislead us or third-parties as to the origin of any comments. You are solely responsible for any comments you make and their accuracy. We take no responsibility and assume no liability for any comments posted by you or any third-party. 10. PERSONAL INFORMATION Your submission of personal information through the store is governed by these Terms and our Privacy Notice when you purchase our Products from our Business Site and our Education and Children’s Privacy Notice when you use the Education Portals and Education Services. By purchasing or using our Products or Education Services, you agree that you have read our Privacy Notice and/or Education and Children’s Privacy Notice. 11. ACCURACY, COMPLETENESS, AND TIMELINESS Product availability on our Site(s) is subject to stock availability and not guaranteed, If Products are not available by the time your order processes we will notify you via email. Please note that while we have tried to display accurately the colors of Products, the actual colors you see will depend on your monitor or mobile device and may not be accurate. Additionally, from time to time there may be information on our Site(s) that contains typographical errors, inaccuracies, or omissions that may relate to Product descriptions, pricing, and/or availability. As a result, we do not guarantee the accuracy or completeness of any information on the Site(s), including prices, Product images, specifications, and/or availability. We reserve the right to correct any errors, inaccuracies, or omissions and to change or update information at any time without prior notice (including after you have submitted your order). If you do not wish to continue your purchase after pricing or other information has been corrected, please contact us right away. We reserve the right to refuse or cancel any order you place on the Site(s), including for pricing errors. We reserve the right to limit quantities on orders placed by the same account, on orders placed by the same method of payment, and on orders that use the same billing or shipping address. We reserve the right to, in our sole discretion, prohibit purchases of any Products to resellers, dealers, and distributors. We are not responsible for information made available on the Site(s) that is not accurate, complete, or current. The material on the Site(s) is provided for general information only and should not be relied upon or used as the sole basis for making decisions without consulting primary, more accurate, more complete, or more timely sources of information. Any reliance on the material on the Site(s) is at your own risk. The Site(s) may contain certain historical information. Historical information, necessarily, is not current and is provided for your reference only. We reserve the right to modify the contents of the Site(s) at any time, although we have no obligation to update any information on the Site(s). You agree it is your responsibility to monitor changes to the Site(s). 12. PROHIBITED USES In addition to other prohibitions as set forth in the Terms, you are prohibited from using the Site(s), Products or Education Services, or any content therein: (a) for any unlawful purpose; (b) to solicit others to perform or participate in any unlawful acts; (c) to violate any international, federal, provincial or state regulations, rules, laws, or local ordinances; (d) to infringe upon or violate our intellectual property rights or the intellectual property rights of others; (e) to harass, abuse, insult, harm, defame, slander, disparage, intimidate, or discriminate based on gender, sexual orientation, religion, ethnicity, race, age, national origin, or disability; (f) to submit false or misleading information; (g) to upload or transmit viruses or any other type of malicious code that will or may be used in any way that will affect the functionality or operation of the Service(s) or of any related Site(s), other websites, or the Internet; (h) to collect or track the personal information of others; (i) to spam, phish, pharm, pretext, spider, crawl, or scrape; (j) for any obscene or immoral purpose; or (k) to interfere with or circumvent the security features of the Service(s) or any related Site(s), other websites, or the Internet. We reserve the right to terminate your use of the Service(s) or any related Site(s) for violating any of the prohibited uses. Further, you must not: Modify copies of any materials from the Site(s).Use or copy any designs, illustrations, photographs, content, video or audio sequences, or any graphics other than for your personal, non-commercial, or educational use.Delete or alter any copyright, trademark, or other proprietary rights notices from copies of materials from the Site(s).Access or use for any commercial purposes any part of the Site(s) or any Education Services or materials available through the Site(s). 13. DISCLAIMER OF WARRANTIES WE DO NOT GUARANTEE, REPRESENT, OR WARRANT THAT YOUR USE OF OUR SITE(S), PRODUCTS OR THE EDUCATION SERVICES WILL BE UNINTERRUPTED, TIMELY, SECURE, OR ERROR-FREE. WE DO NOT WARRANT THE RESULTS THAT MAY BE OBTAINED FROM THE USE OF THE SITE(S), PRODUCTS OR THE EDUCATION SERVICES WILL BE ACCURATE OR RELIABLE. YOU AGREE THAT FROM TIME TO TIME WE MAY CEASE OFFERING THE SITE(S), PRODUCTS AND/OR THE EDUCATION SERVICES FOR INDEFINITE PERIODS OF TIME, WITHOUT NOTICE TO YOU. YOU EXPRESSLY AGREE YOUR USE OF, OR INABILITY TO USE, THE SITE(S), PRODUCTS AND/OR THE EDUCATION SERVICES IS AT YOUR SOLE RISK. EXCEPT AS OTHERWISE EXPRESSLY PROVIDED, THE SITE(S), THE EDUCATION SERVICES, AND ALL PRODUCTS DELIVERED TO YOU ARE PROVIDED ‘AS IS’ AND ‘AS AVAILABLE’ FOR YOUR USE, WITHOUT ANY REPRESENTATION, WARRANTIES, OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ALL IMPLIED WARRANTIES OR CONDITIONS OF MERCHANTABILITY, MERCHANTABLE QUALITY, FITNESS FOR A PARTICULAR PURPOSE, DURABILITY, TITLE, AND NON-INFRINGEMENT. You understand your content (not including credit card information), may be transferred unencrypted and involve (a) transmissions over various networks, and (b) changes to conform and adapt to technical requirements of connecting networks or devices. 14. LIMITATION OF LIABILITY AND RELEASE IN NO CASE SHALL ROBOLINK, ROBOLINK’S DIRECTORS, OFFICERS, EMPLOYEES, AFFILIATES, AGENTS, CONTRACTORS, INTERNS, SUPPLIERS, SERVICE PROVIDERS, OR LICENSORS BE LIABLE WITH RESPECT TO ANY SUBJECT MATTER OF THESE TERMS OR RELATED THERETO UNDER ANY CONTRACT, NEGLIGENCE, STRICT LIABILITY, OR OTHER THEORY: (A) FOR ANY ERRORS, INTERRUPTION OR LOSS OF USE, LOSS OR INACCURACY OR CORRUPTION OF DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, SERVICES OR TECHNOLOGY, OR LOSS OF BUSINESS, INJURY, LOSS, CLAIM; (B) ANY INDIRECT, INCIDENTAL, PUNITIVE, SPECIAL, OR CONSEQUENTIAL DAMAGES OF ANY KIND; AND (C) FOR ANY DIRECT DAMAGES, COSTS, LOSSES OF LIABILITIES IN AMOUNTS THAT TOGETHER WITH AMOUNTS ASSOCIATED WITH ALL OTHER CLAIMS, EXCEED THE GREATER OF ONE HUNDRED DOLLARS ($100.00), OR THE FEES PAID TO US FOR THE ORDER RELATED TO THE DAMAGE, ARISING FROM YOUR USE OF THE SITE, OR FOR ANY OTHER CLAIM RELATED IN ANY WAY TO THE PRODUCTS OR YOUR USE OF THE SITE, INCLUDING, BUT NOT LIMITED TO, ANY ERRORS OR OMISSIONS IN ANY CONTENT, OR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF THE SITE OR ANY CONTENT (OR PRODUCT) POSTED, TRANSMITTED, OR OTHERWISE MADE AVAILABLE VIA THE SITE, EVEN IF ADVISED OF THEIR POSSIBILITY. BECAUSE SOME STATES OR JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR THE LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES, IN SUCH STATES OR JURISDICTIONS, OUR LIABILITY SHALL BE LIMITED TO THE MAXIMUM EXTENT PERMITTED BY LAW. YOU VOLUNTARILY AND FREELY ASSUME ALL OF THE RISKS AND DANGERS THAT MAY OCCUR DURING OR AS A RESULT OF USING OUR PRODUCTS, SITE(S) OR THE EDUCATION PORTALS, INCLUDING BY WAY OF EXAMPLE AND NOT LIMITATION, THE RISK OF INJURY, DEATH, AND PROPERTY DAMAGE, EVEN IF CAUSED BY OUR NEGLIGENCE OR NEGLIGENCE OF OUR OFFICERS, DIRECTORS, EMPLOYEES, CONSULTANTS, CONTRACTORS, AGENTS, OR PARTNERS (&quot;RELEASED PARTIES&quot;). You hereby agree to fully and forever discharge and release the Released Parties from any and all claims you may have or hereinafter have for any injury, temporary or permanent disability, death, damages, liabilities, expenses and/or causes of action, now known or hereafter known in any jurisdiction in the world, attributable or relating in any manner to your or your User’s use of the Products, whether caused by our negligence or by any other reason. You understand and agree this Release is intended to be, and is, a complete release, as much as allowed by law, of any responsibility of the Released Parties for all personal injuries, temporary or permanent disability, death, and/or property damage sustained by you while using the Products. YOU EXPRESSLY WAIVE ALL RIGHTS CONFERRED BY SECTION 1542 OF THE CALIFORNIA CIVIL CODE, OR ANY SUBSTANTIALLY SIMILAR LAW, WHICH STATES IN SUBSTANCE: A GENERAL RELEASE DOES NOT EXTEND TO CLAIMS THE CREDITOR OR RELEASING PARTY DOES NOT KNOW OR SUSPECT TO EXIST IN HIS OR HER FAVOR AT THE TIME OF EXECUTING THE RELEASE AND, IF KNOWN BY HIM OR HER, WOULD HAVE MATERIALLY AFFECTED HIS OR HER SETTLEMENT WITH THE DEBTOR OR RELEASED PARTY. 15. INDEMNIFICATION You agree to indemnify, defend, and hold harmless Robolink and our parent, subsidiaries, affiliates, partners, officers, directors, agents, contractors, licensors, service providers, subcontractors, suppliers, interns, and employees, harmless from any claim or demand, including reasonable attorneys’ fees, made by any third-party due to or arising out of your content or your breach of these Terms, or the documents they incorporate by reference, or your violation of any law or the rights of a third-party. 16. SEVERABILITY In the event any provision of these Terms is determined to be unlawful, void, or unenforceable, such provision shall nonetheless be enforceable to the fullest extent permitted by applicable law, and the unenforceable portion shall be deemed to be severed from these Terms, such determination shall not affect the validity and enforceability of any other remaining provisions. 17. TERMINATION These Terms are effective unless and until terminated by either you or us. You may terminate these Terms at any time by notifying us that you no longer wish to use our Education Services, or when you cease using our Site(s). If, in our sole judgment, you fail, or we suspect you failed, to comply with any term or provision of these Terms or you breached these Terms, we also may terminate these Terms at any time with or without notice and you will remain liable for all outstanding fees. The obligations and liabilities of the parties incurred prior to the termination date shall survive the termination of these Terms for all purposes. 18. ENTIRE AGREEMENT, WAIVER, AND HEADINGS The failure of us to exercise or enforce any right or provision of these Terms shall not constitute a waiver of such right or provision. These Terms and any policies or operating rules posted by us on this Site(s), or in respect to the Service(s), constitutes the entire agreement and understanding between you and us and govern your use of the Service(s), superseding any prior or contemporaneous agreements, communications and proposals, whether oral or written, between you and us (including, but not limited to, any prior versions of the Terms). Any ambiguities in the interpretation of these Terms shall not be construed against the drafting party. The headings used in these Terms are included for convenience only and will not limit or otherwise affect these Terms. 19. GEOGRAPHIC RESTRICTIONS The owner of the Site(s) is based in the State of California in the United States. We provide the Site(s) for use only by persons located in the United States. We make no claims that the Site(s) or any of its content is accessible or appropriate outside of the United States. Access to the Site(s) may not be legal by certain persons or in certain countries. If you access the Site(s) from outside the United States, you do so on your own initiative and are responsible for compliance with local laws. 20. GOVERNING LAW These Terms and any separate agreements whereby we provide you any products or services shall be governed by and construed to be in accordance with the laws of California. 21. MUTUAL ARBITRATION AGREEMENT: BINDING ARBITRATION; CLASS ACTION WAIVER. a. Dispute Resolution Certain portions of this Section are deemed to be a &quot;written agreement to arbitrate&quot; pursuant to the Federal Arbitration Act (&quot;FAA&quot;). You and Robolink expressly agree and intend that this Section satisfies the &quot;writing&quot; requirement of the Federal Arbitration Act. This Section can only be amended by mutual agreement. For purposes of this Section, &quot;Claims&quot; means collectively, without limitation, any and all claims, injuries, demands, liabilities, disputes, causes of action (including statutory, contract, negligence, or other tort theories), proceedings, obligations, debts, liens, fines, charges, penalties, contracts, promises, costs, expenses (including attorneys’ fees, whether incurred pre-litigation, pre-trial, at trial, on appeal, or otherwise), damages of any kind whatsoever (including consequential, compensatory, or punitive damages), or losses (whether known, unknown, asserted, non-asserted, fixed, conditional, or contingent) that arise from or relate to: (i) the Site(s), including any and all contents, materials and software related thereto, and/or (ii) your use of the Site(s). b. Informal Resolution of Disputes and Excluded Disputes. If any Claim arises out of or relates to the Site(s) or these Terms, other than as may be provided herein, then you and Robolink agree to send notice to the other providing a reasonable description of the Claim, along with a proposed resolution of it. Robolink’s notice will be sent to you based on the most recent contact information you provided Robolink. If no such information exists or if such information is not current, Robolink has no obligation under this Section. For a period of sixty (60) days from the date of receipt of notice from the other party, you and Robolink will engage in a dialog to attempt to resolve the Claim, though nothing will require either you or Robolink to resolve the Claim on terms with respect to which you and Robolink, in each of our sole discretion, are not comfortable. c. Binding Arbitration. If you and Robolink cannot resolve a Claim, within sixty (60) days of the receipt of the notice, then you agree that any such Claim and all other disputes arising out of or relating to the interpretation, applicability, enforceability, or formation of these Terms, including, but not limited to any claim that all or any part of these Terms are void or voidable, or whether a claim is subject to arbitration relating to your use of the Site(s), will be resolved by binding arbitration, rather than in court. The FAA, not state law, shall govern the arbitrability of such disputes, including the class action waiver below. However, you and Robolink agree that California state law or United States federal law shall apply to and govern, as appropriate, any and all Claims or disputes arising between you and Robolink regarding these Terms and the Site(s), whether arising or stated in contract, statute, common law, or any other legal theory, without regard to choice of law principles. There is no judge or jury in arbitration, and court review of an arbitration award is limited. However, an arbitrator must follow the terms of these Terms as a court would. THIS SECTION, INCLUDING THE PROVISIONS ON BINDING ARBITRATION AND CLASS ACTION WAIVER, SHALL SURVIVE ANY TERMINATION OF YOUR ACCOUNT OR THE PLATFORM. i. Initiating Arbitration. To begin an arbitration proceeding, you must send a letter requesting arbitration and describing your claim to Robolink at 5075 Shoreham Pl, Ste 110 San Diego, CA 92122. The arbitration will be conducted by JAMS in accordance with the JAMS Streamlined Arbitration Procedure Rules in effect at the time the arbitration is initiated, excluding any rules or procedures governing or permitting class actions. Payment of all filing, administration, and arbitrator fees will be governed by JAMS’s rules. The arbitration shall take place in San Jose, California or at such other venue (and pursuant to such procedures) mutually agreed upon. You can obtain JAMS procedures, rules, and fee information as follows: JAMS: 800.352.5267 and http://www.jamsadr.com. ii. Arbitration Fees. You and Robolink will pay the administrative and arbitrator’s fees and other costs in accordance with the applicable arbitration rules. If applicable arbitration rules or laws require Robolink to pay a greater portion or all of such fees and costs in order for this Section to be enforceable, then Robolink will have the right to elect to pay the fees and costs and proceed to arbitration. Arbitration rules may permit you to recover attorneys’ fees. Robolink will not seek to recover attorneys’ fees and costs in arbitration unless the arbitrator determines the claims are frivolous. iii. Class Action Waiver. YOU AND ROBOLINK EACH AGREE THAT ANY DISPUTE RESOLUTION PROCEEDING WILL BE CONDUCTED ONLY ON AN INDIVIDUAL BASIS AND NOT IN A CLASS, CONSOLIDATED OR REPRESENTATIVE ACTION. YOU AND ROBOLINK EACH AGREE THAT SUCH PROCEEDING SHALL TAKE SOLELY BY MEANS OF JUDICIAL REFERENCE PURSUANT TO CALIFORNIA CODE OF CIVIL PROCEDURE SECTION 638. iv. Exclusions, Venue. Notwithstanding the agreement to resolve all disputes through arbitration, you or Robolink may sue in court to enjoin infringement or other misuse of intellectual property rights (including patents, copyrights, trademarks, trade secrets, and moral rights, but not including privacy rights). You or Robolink may also seek relief in small claims court for Claims within the scope of that court’s jurisdiction. In the event the arbitration provisions above are found not to apply to you or to a particular Claim, either as a result of your decision to opt-out of the arbitration provisions or as a result of a decision by the arbitrator or a court order, you agree the venue for any such Claim or dispute is exclusively that of a state or federal court located in Santa Clara County, California. You and Robolink agree to submit to the personal jurisdiction of the courts located within Santa Clara County, California for the purpose of litigating all such Claims or any other disputes arising out of or relating to the interpretation, applicability, enforceability, or formation of these Terms or your use of the Site(s) in the event the arbitration provisions are found not to apply. In such a case, should Robolink prevail in litigation against you to enforce its rights under the Terms, Robolink shall be entitled to its costs, expenses, and reasonable attorneys’ fees (whether incurred at or in preparation for trial, appeal or otherwise) incurred in resolving or settling the dispute, in addition to all other damages or awards to which Robolink may be entitled. v. Limited Time to File Claims. TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, IF YOU OR ROBOLINK WANT TO ASSERT A DISPUTE AGAINST THE OTHER, THEN YOU OR ROBOLINK MUST COMMENCE IT (BY DELIVERY OF WRITTEN NOTICE AS SET FORTH HEREIN) WITHIN ONE (1) YEAR AFTER THE DISPUTE ARISES OR IT WILL BE FOREVER BARRED. Commencing means, as applicable: (i) by delivery of written notice as set forth herein; (ii) filing for arbitration with JAMS as set forth herein; or (iii) filing an action in state or federal court. This provision will not apply to any legal action taken by Robolink to seek an injunction or other equitable relief in connection with any losses (or potential losses) relating to Robolink’s intellectual property rights. vi. Your Right to Opt-Out. You have the right to opt-out and not be bound by the arbitration and class action waiver provisions set forth above by sending written notice of your decision to opt-out to opt-out@robolink.com with the subject line &quot;ROBOLINK ARBITRATION AND CLASS ACTION WAIVER OPT-OUT&quot;. The notice must be sent within thirty (30) days of your first use of the Site(s), otherwise you shall be bound to arbitrate any disputes in accordance with the terms of these Terms providing for binding arbitration. If you opt-out of these arbitration provisions, Robolink also will not be bound by them. 22. CHANGES TO TERMS The &quot;Last Updated&quot; date at the top of this page indicates when these Terms were last revised. We may from time to time update these Terms. If we make any significant or material changes to these Terms, we’ll provide prominent notice by posting a notice on the Site and notifying you by email (using the email address you provided) within 30 days before the change takes effect, so you can review and make sure you know about them. Notwithstanding the foregoing, non-material changes, feature updates, or modifications made for legal reasons (as determined by Robolink) will be deemed to be effective immediately and without notice. We encourage you to review these Terms from time to time, to stay informed. If you don’t agree with any changes to these Terms, you may terminate your account. By continuing to use the Site(s), Products and/or Education Services after the revised Terms have become effective, you acknowledge that you accept and agree to the current version of the Terms. 23. CALIFORNIA RESIDENTS If you are a California resident, you may have these Terms mailed to you electronically by sending a letter to Robolink at 5075 Shoreham Pl, Ste 110 San Diego, CA 92122 with your email address included and a request for the Terms. In addition, under California Civil Code Section 1789.3, you may contact the Complaint Assistance Unit of the Division of Consumer Services of the California Department of Consumer Affairs in writing at 1625 N. Market Blvd., Suite S-202, Sacramento, California 95834, or by telephone at 1-800-952-5210 in order to resolve a complaint regarding the Site(s), or to receive further information regarding use of the Site(s). 24. CONTACT INFORMATION Questions about the Terms can be sent to us at: info@robolink.com.","keywords":"","version":"Next"},{"title":"Zumi","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/","content":"Zumi Zumi Welcome to Zumi’s journey. Please click the tab below to go to the page. Blockly Python","keywords":"","version":"Next"},{"title":"Blockly","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/Blockly/","content":"Blockly Blockly Junior Block Documentation Senior Block Documentation","keywords":"","version":"Next"},{"title":"Blockly Changelog","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/Blockly/Blockly-Changelog","content":"","keywords":"","version":"Next"},{"title":"Zumi Library Changelog​","type":1,"pageTitle":"Blockly Changelog","url":"/ko/docs/Zumi/Blockly/Blockly-Changelog#zumi-library-changelog","content":"","version":"Next","tagName":"h2"},{"title":"Python","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/Python/","content":"Python Python Function Documentation","keywords":"","version":"Next"},{"title":"What is Blockly?","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/Blockly/What-is-Blockly","content":"","keywords":"","version":"Next"},{"title":"What is Blockly?​","type":1,"pageTitle":"What is Blockly?","url":"/ko/docs/Zumi/Blockly/What-is-Blockly#what-is-blockly","content":" Learn the foundations of coding with drag-and-drop blocks in our visual programming language. This is an excellent starting place for beginner programmers and drone pilots.  Blockly is a block coding program from Robolink based on python. The types of blocks are divided into junior blocks and senior blocks according to the difficulty level.  Junior blocks have these things: (CoDrone EDU blocks) Flight Commands, Flight Sequences, Status Checkers, Lights, Sounds, (Programming blocks) Events, Input/Output, Logic, Loops, Math, Timing, Variables, Lists.  Senior blocks have these things: (CoDrone EDU blocks) Flight Commands, Flight Variables, Status Checkers, Sensors, Lights, Sounds, Screen, Colors, (Programming blocks) Events, Input/Output, Logic, Loops, Math, Timing, Variables, Functions, Lists.  ","version":"Next","tagName":"h2"},{"title":"Device requirements​","type":1,"pageTitle":"What is Blockly?","url":"/ko/docs/Zumi/Blockly/What-is-Blockly#device-requirements","content":"       Try to use the cable that comes with CoDrone EDU whenever possible! This Micro USB cable can transfer data, which is necessary for programming. Most Micro USB cables now are data compatible. If your drone does not switch to LINK state when connecting, you may have the wrong cable or it may be broken.  ","version":"Next","tagName":"h3"},{"title":"Link to Blockly​","type":1,"pageTitle":"What is Blockly?","url":"/ko/docs/Zumi/Blockly/What-is-Blockly#link-to-blockly","content":" ","version":"Next","tagName":"h3"},{"title":"How to use Blockly​","type":1,"pageTitle":"What is Blockly?","url":"/ko/docs/Zumi/Blockly/What-is-Blockly#how-to-use-blockly","content":"","version":"Next","tagName":"h3"},{"title":"Senior Block Documentation","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation","content":"","keywords":"","version":"Next"},{"title":"Driving​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#driving","content":" ","version":"Next","tagName":"h2"},{"title":"forward step​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#forward-step","content":" Block​    Description​  Takes one drive &quot;step&quot; forward in the direction of the angle heading. This block must be used in a loop to observe any movement. Use the stop block at the end of the for loop to stop Zumi.  Parameters​  integer speed: The speed of the forward step (0 - 127) integer angle: The angle of forward step in degrees (0 degrees is defined when the Zumi object is created)  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reverse step​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#reverse-step","content":" Block​    Description​  Takes one drive &quot;step&quot; backward in the direction of the angle heading. This block must be used in a loop to observe any movement. Use the stop block at the end of the for loop to stop Zumi.  Parameters​  integer speed: The speed of the reverse step (0 - 127) integer angle: The angle of reverse step in degrees (0 degrees is defined when the Zumi object is created)  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move to coordinate​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#move-to-coordinate","content":" Block​    Description​  Drives Zumi to an (x,y) position from the origin. The origin (0,0) is defined at Zumi object creation. To reset the origin, use the reset_coordinate() block. This method uses a best fit linear approximation of the distance traveled over time. Zumi will only keep update her coordinates when driving with this block. Using any other drive command will not keep track of her location.  Parameters​    float x: The x-coordinate value float y: The y-coordinate value unit: Units of the coordinates, centimeters or inches  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reset coordinate​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#reset-coordinate","content":" Block​    Description​  Resets Zumi's coordinates to (0,0). The origin will be reference point when using the move_to_coordinate() block.  Parameters​  None  Returns​  None  Example​  In this example, Zumi moves 5 inches in the x-direction. After resetting the coordinates Zumi will move another 5 inches in the x-direction since the origin has been reset.      ","version":"Next","tagName":"h3"},{"title":"line follow gyro​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#line-follow-gyro","content":" Block​    Description​  Uses the bottom IR sensors so that Zumi can execute a line following program for the duration of the timeout. If the bottom IR sensors detect a black line, Zumi will continue to drive forward. If one of the sensors detects white, Zumi will turn left or right to stay on the line. If both sensors detect white, Zumi will automatically stop, regardless of the timeout.The speed is capped to 80.  Parameters​  integer speed: Positive value for speed between 0 and 80 float duration: The duration of the timeout in seconds integer angle_adj: The angle value, in degrees, that Zumi will turn if one IR sensor detects white. integer left_IR: The threshold value of the bottom left IR sensor. integer right_IR: The threshold value of the bottom right IR sensor.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"funnel align​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#funnel-align","content":" Block​    Description​  Uses the bottom IR sensors so that Zumi can align to the funnel piece on the competition field for the duration of the timeout (Click here for a PDF version of the funnel piece).  Parameters​  integer speed: Positive value for speed between 0 and 80 float duration: The duration of the timeout in seconds float angle_adj: The angle value, in degrees, that Zumi will turn if one IR sensor detects white.  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"forward avoid collision​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#forward-avoid-collision","content":" Block​    Description​  Drives Zumi forward until an object is detected or the timeout runs out, whicever comes first. An object is considered detected if either of the front IR sensor values goes below the threshold.  Parameters​  integer speed: Positive value for speed (0 - 80) float duration: duration of timeout in seconds integer angle: The angle, in degrees, at which it will turn after timeout or detection (default to None which is Zumi's current heading) integer IR_thresh: The threshold value of front IR sensors.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reverse avoid collision​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#reverse-avoid-collision","content":" Block​    Description​  Drives Zumi in reverse until an object is detected or the timeout runs out, whicever comes first. An object is considered detected if either of the back IR sensor values goes below the threshold.  Parameters​  integer speed: Positive value for speed (0 - 80) float duration: duration of timeout in seconds integer angle: The angle, in degrees, at which it will turn after timeout or detection (default to None which is Zumi's current heading) integer IR_thresh: The threshold value of back IR sensors.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set pid​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#set-pid","content":" Block​    Description​  Sets the proportional, integral and derivative terms in a PID control system. These parameters help Zumi drive straight and make accurate turns. The default values are recommended, but can be adjusted to see how the control system works.  Proportional: the output is proportional to the error Integral: compensates for the sums of the error over time Derivative: compensates for sudden changes in the error  Parameters​  float P: Value for proportional control float I: Value for integral control float D: Value for derivative control   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set speed prediction​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#set-speed-prediction","content":" Block​    Description​  Manually sets the line of best fit parameters that are used with move_to_coordinate(). This block overrides any speed prediction values that were automatically set with the speed_calibration() block.  Parameters​  integer speed: The speed from (0 - 100) used for calibrating distance traveled  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reset pid error​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#reset-pid-error","content":" Block​    Description​  Resets the sum of the gyro error and integral error that accumulated over. Reset the PID error after using forward_step() to drive more accurately. This does not reset the P, I, and D values of the Zumi PID control. To set those parameters use set_PID().  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"speed calibration​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#speed-calibration","content":" Block​    Description​  This function is designed to be used with the calibration sheet (Click here for a PDF version). Zumi will drive over 5 horizontal white lines that are 2 centimeters wide. The slope and y_intercept will be generated for the best fit line of the speed prediction. These values will be saved to the Zumi as a text file.  Run this block to calibrate for move_to_coordinate().  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"drive over markers​","type":1,"pageTitle":"Senior Block Documentation","url":"/ko/docs/Zumi/Blockly/Senior-Block-Documentation#drive-over-markers","content":" Block​    Description​  This function was designed for the Zumitown Mat. Zumi will drive over the specified number of alternating black and white horizontal lines at least 2 centimeters wide. Zumi will stop when the number of markers have been crossed or if the timeout ends, whichever is first. (Avoid making the speed very high, Zumi will most likely overshoot since it has a lot of speed)  Parameters​  integer markers: An number of road markers to drive over integer speed: Positive speed value (0 - 80) integer IR_threshold: An IR threshold value 0-255 for the bottom left IR sensors to detect black or white. float time_out: The timeout value in seconds   Returns​  None  Example​   ","version":"Next","tagName":"h3"},{"title":"page4","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/Python/page4","content":"page4","keywords":"","version":"Next"},{"title":"Python Changelog","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/Python/Python-Changelog","content":"","keywords":"","version":"Next"},{"title":"Zumi Library Changelog​","type":1,"pageTitle":"Python Changelog","url":"/ko/docs/Zumi/Python/Python-Changelog#zumi-library-changelog","content":"","version":"Next","tagName":"h2"},{"title":"What is Python?","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/Python/What-is-Python","content":"What is Python?","keywords":"","version":"Next"},{"title":"Junior Block Documentation","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation","content":"","keywords":"","version":"Next"},{"title":"Driving​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#driving","content":" ","version":"Next","tagName":"h2"},{"title":"forward​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#forward","content":" Block​    Description​  Moves Zumi forward for the given duration and speed  Parameters​  float seconds: A value, in seconds, for the duration of the movement. integer speed: A value (0 - 100) for the speed of the movement.  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reverse​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#reverse","content":" Block​    Description​  Moves Zumi backwards for the given duration and speed  Parameters​  float seconds: A value, in seconds, for the duration of the movement. integer speed: A value (0 - 100) for the speed of the movement.  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn left​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#turn-left","content":" Block​    Description​  Turns Zumi to the left a number of specified degrees.  Parameters​  integer degrees: The angle of the left turn in degrees   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn right​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#turn-right","content":" Block​    Description​  Turns Zumi to the right a number of specified degrees.  Parameters​  integer degrees: The angle of the right turn in degrees   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"stop​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#stop","content":" Block​    Description​  Stops Zumi's motors when running indefinite move commands such as the Senior forward_step() block.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"left u turn​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#left-u-turn","content":" Block​    Description​  Makes Zumi perform a left &quot;U-turn&quot;. As the speed increases, the turn radius gets larger.  Parameters​  integer speed: The speed of the U-turn (0 - 100)  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"right u turn​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#right-u-turn","content":" Block​    Description​  Makes Zumi perform a right &quot;U-turn&quot;. As the speed increases, the turn radius gets larger.  Parameters​  integer speed: The speed of the U-turn (0 - 100)  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"parallel park​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#parallel-park","content":" Block​    Description​  Drives Zumi in reverse into a parallel park.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"calibrate gyro​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#calibrate-gyro","content":" Block​    Description​  Recalibrates Zumi's gyroscope. Use when the gyroscope returns values with high error due to drift. During recalibration, Zumi should be stationary on a flat surface.  Parameters​  None  Returns​  None  Example​  In this example/scenario, the Zumi wasn't driving straight when the first forward block ran, drifting off to the side. After the calibrate gyro block and the second forward block ran, Zumi was able to drive straight as it should.      ","version":"Next","tagName":"h3"},{"title":"Shapes​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#shapes","content":" ","version":"Next","tagName":"h2"},{"title":"triangle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#triangle","content":" Block​    Description​  Drives Zumi in the shape of a triangle using either left or right turns.  Parameters​    left: Makes a triangle with left turns right: Makes a triangle with right turns   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"square​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#square","content":" Block​    Description​  Drives Zumi in the shape of a square using either left or right turns.  Parameters​    left: Makes a square with left turns. right: Makes a square with right turns.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"rectangle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#rectangle","content":" Block​    Description​  Drives Zumi in the shape of a rectangle using either left or right turns.  Parameters​    left: Makes a rectangle with left turns. right: Makes a rectangle with right turns.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"circle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#circle","content":" Block​    Description​  Drives Zumi in the shape of a circle using either left or right turns.  Parameters​    left: Makes a circle turning to the left. right: Makes a circle turning to the right.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"figure 8​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#figure-8","content":" Block​    Description​  Drives Zumi in the shape of a figure 8. Zumi does a full circle to the right, and then a full circle to the left.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"j turn​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#j-turn","content":" Block​    Description​  Drives Zumi in the shape of a J turn. Zumi will start by driving forward  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Screen​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#screen","content":" ","version":"Next","tagName":"h2"},{"title":"draw text​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#draw-text","content":" Block​    Description​  Draws a string of letters and characters and centers them on Zumi's screen. The screen can draw a maximum of three lines of text, each around 14 characters long.  Parameters​  string text: Inputted text to display   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"sad​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#sad","content":" Block​    Description​  Displays Zumi's sad eyes on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"closed​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#closed","content":" Block​    Description​  Displays Zumi's closed eyes on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"sleepy​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#sleepy","content":" Block​    Description​  Displays Zumi's sleepy eyes on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"happy​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#happy","content":" Block​    Description​  Displays Zumi's happy eye animation on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"glimmer​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#glimmer","content":" Block​    Description​  Displays Zumi's glimmer eye animation on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"blinking​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#blinking","content":" Block​    Description​  Displays Zumi's blinking eye animation on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"angry​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#angry","content":" Block​    Description​  Displays Zumi's angry eyes on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"open​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#open","content":" Block​    Description​  Displays Zumi's open eyes on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Sounds​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#sounds","content":" ","version":"Next","tagName":"h2"},{"title":"play note​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#play-note","content":" Block​    Description​  Plays a single note for a specified duration in milliseconds.  Parameters​    note: The note that is played. Ranging from C2 to B6 integer duration: The duration of note played in milliseconds   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"angry​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#angry-1","content":" Block​    Description​  Plays Zumi's angry sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"happy​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#happy-1","content":" Block​    Description​  Plays Zumi's happy sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"blink​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#blink","content":" Block​    Description​  Plays Zumi's blinking sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"celebrate​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#celebrate","content":" Block​    Description​  Plays Zumi's celebration sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"wakeup​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#wakeup","content":" Block​    Description​  Plays Zumi's wake up sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"disoriented​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#disoriented","content":" Block​    Description​  Plays Zumi's disoriented sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"oops front​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#oops-front","content":" Block​    Description​  Plays Zumi's front sensor detect sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"oops back​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#oops-back","content":" Block​    Description​  Plays Zumi's back sensor detect sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"get IR reading​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#get-ir-reading","content":" Block​    Description​  Gets the current IR reading from Zumi's sensors. The closer the value is to 0, the more IR light is being detected. Used commonly when detecting objects since an object or obstacle nearby will reflect IR light back to the receiver.  Parameters​    Returns​  integer IR sensor value: The amount of IR light being detected by the IR sensor (0 - 255)  Example​      ","version":"Next","tagName":"h3"},{"title":"get z angle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#get-z-angle","content":" Block​    Description​  Gets the current Z angle from Zumi's gyroscope.  Parameters​  None  Returns​  integer angle: The z-angle of the gyroscope reading (0 - 360)  Example​      ","version":"Next","tagName":"h3"},{"title":"get x angle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#get-x-angle","content":" Block​    Description​  Gets the current X angle from Zumi's gyroscope.  Parameters​  None  Returns​  integer angle: The x-angle of the gyroscope reading (0 - 360)  Example​  With this example, tilt Zumi left and right with your hands to see the X angle change!      ","version":"Next","tagName":"h3"},{"title":"get y angle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#get-y-angle","content":" Block​    Description​  Gets the current Y angle from Zumi's gyroscope.  Parameters​  None  Returns​  integer angle: The y-angle of the gyroscope reading (0 - 360)  Example​  With this example, rock Zumi forward and backward with your hands to see the Y angle change!      ","version":"Next","tagName":"h3"},{"title":"reset gyro​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#reset-gyro","content":" Block​    Description​  Resets Zumi's gyroscope x, y, and z angles to 0. Use this function to reset Zumi's heading.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"get battery voltage​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#get-battery-voltage","content":" Block​    Description​  Gets the current voltage from Zumi's battery. It typically varies from 3.45V-4.14V when not connected over USB. If connected over USB, this function may return 1.7V or below.  Parameters​  None  Returns​  float voltage: The battery's voltage in units of Volts  Example​      ","version":"Next","tagName":"h3"},{"title":"get battery percentage​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#get-battery-percentage","content":" Block​    Description​  Gets the current battery percentage from Zumi's battery when not connected over USB power. The percentage will vary while driving since it is dependent on battery voltage.  Parameters​  None  Returns​  integer percent: The battery's percentage (0 - 100)  Example​      ","version":"Next","tagName":"h3"},{"title":"Camera​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#camera","content":" ","version":"Next","tagName":"h2"},{"title":"import camera​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#import-camera","content":" Block​    Description​  Imports the camera library. This block must be included at the top of any code that uses camera functions.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"start camera​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#start-camera","content":" Block​    Description​  Turns on Zumi's camera. A red LED will turn on next to the camera to indicate the camera is on. The camera needs to turn on before taking any pictures and will stay on until it is manually turned off with the close_camera() block.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"close camera​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#close-camera","content":" Block​    Description​  Turns off Zumi's camera. It is recommended to always turn off the camera when not in use to conserve battery. The camera cannot be started again unless the camera is already off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"take picture​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#take-picture","content":" Block​    Description​  Captures a color image with Zumi's camera and stores the array as a frame object. Use the image object with show_image() to display in Blockly. This block cannot be used without importing and starting the camera.  Parameters​  None  Returns​  ndarray image: An image composed of a NumPy 160x128 array of pixels.  Example​      ","version":"Next","tagName":"h3"},{"title":"show image​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#show-image","content":" Block​    Description​  Show an image that was taken with Zumi's camera in Blockly.  Parameters​  ndarray image: An image composed of a NumPy array of pixels.  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"get QR code message​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#get-qr-code-message","content":" Block​    Description​  Searches an image for a QR code message. If a QR code was found, the encoded message is saved to a string.  Parameters​  ndarray image: An image composed of a NumPy array of pixels.  Returns​  string message: The decoded message of the QR code. Returns None if no QR code was detected.  Example​      ","version":"Next","tagName":"h3"},{"title":"find stop sign​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#find-stop-sign","content":" Block​    Description​  Searches an image for a stop sign. Returns True if a stop sign was found.  Parameters​  ndarray image: An image composed of a NumPy array of pixels.  Returns​  boolean detection: Returns True if a stop sign was detected. Otherwise, returns False.  Example​      ","version":"Next","tagName":"h3"},{"title":"find face​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#find-face","content":" Block​    Description​  Searches an image for a face. Returns True if a face was detected  Parameters​  ndarray image: An image composed of a NumPy array of pixels.  Returns​  boolean detection: Returns True if a face was detected. Otherwise, returns False.  Example​      ","version":"Next","tagName":"h3"},{"title":"AI​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#ai","content":" ","version":"Next","tagName":"h2"},{"title":"prediction from frame​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#prediction-from-frame","content":" Block​    Description​  Predicts a label from an image based on a previously trained color model. A KNN color model needs to be trained and loaded into the program to use predict_from_frame().  Parameters​  ndarray image: An image composed of a NumPy array of pixels.  Returns​  string label: The predicted label based on the image.  Example​      ","version":"Next","tagName":"h3"},{"title":"Lights​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#lights","content":" ","version":"Next","tagName":"h2"},{"title":"lights on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#lights-on","content":" Block​    Description​  Turns on both Zumi's headlights and brake lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"lights off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#lights-off","content":" Block​    Description​  Turns off both Zumi's headlights and brake lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"headlights on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#headlights-on","content":" Block​    Description​  Turns on Zumi's headlights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"headlights off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#headlights-off","content":" Block​    Description​  Turns off Zumi's headlights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"brake lights on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#brake-lights-on","content":" Block​    Description​  Turns on Zumi's brake lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"brake lights off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#brake-lights-off","content":" Block​    Description​  Turns off Zumi's brake lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hazard lights on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#hazard-lights-on","content":" Block​    Description​  Turns on Zumi's flashing hazard lights. They will flash indefinitely until turned off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hazard lights off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#hazard-lights-off","content":" Block​    Description​  Turns off Zumi's flashing hazard lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"left signal on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#left-signal-on","content":" Block​    Description​  Turns on Zumi's left turn signal. This function flashes Zumi's back left red LED until turned off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"left signal off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#left-signal-off","content":" Block​    Description​  Turns off Zumi's flashing left turn signal.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"right signal on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#right-signal-on","content":" Block​    Description​  Turns on Zumi's right turn signal. This function flashes Zumi's back right red LED until turned off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"right signal off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ko/docs/Zumi/Blockly/Junior-Block-Documentation#right-signal-off","content":" Block​    Description​  Turns off Zumi's flashing right turn signal.  Parameters​  None  Returns​  None  Example​   ","version":"Next","tagName":"h3"},{"title":"Function Documentation","type":0,"sectionRef":"#","url":"/ko/docs/Zumi/Python/Function-Documentation","content":"","keywords":"","version":"Next"},{"title":"MPU​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#mpu","content":" ","version":"Next","tagName":"h2"},{"title":"calibrate_gyro()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#calibrate_gyro","content":" Description​  Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface. This function calls zumi.mpu.calibrate_MPU().  Syntax​  calibrate_gyro()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.calibrate_gyro() print(&quot;Done&quot;)     ","version":"Next","tagName":"h3"},{"title":"calibrate_MPU()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#calibrate_mpu","content":" Description​  Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface.  Syntax​  calibrate_MPU() calibrate_MPU(count=100)   Parameters​  integer count: the number of samples you want Zumi to take. Increase to improve accuracy.  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() #Zumi will take 500 samples/readings zumi.mpu.calibrate_MPU(count=500) #this is the order the offsets will be printed print(&quot;angular speed rad/sec Gx,Gy,Gz&quot;) print(&quot;linear acceleration Ax,Ay,Az&quot;) #print the offsets of each Axis zumi.mpu.print_offsets()     ","version":"Next","tagName":"h3"},{"title":"get_orientation()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#get_orientation","content":" Description​  Uses the acceleration values to find Zumi's orientation with respect to the strongest force being applied to Zumi (gravity).  Syntax​  get_orientation()   Parameters​  None  Returns​  integer Orientation state: -1 = unknown 0 = probably falling or moving between states 1 = camera straight up 2 = camera facing down 3 = on right side 4 = on left side 5 = wheels on floor 6 = wheels facing up (upside down) 7 = accelerating faster than 1g   Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() #grab zumi and place it on any side #example: upside down, on its nose etc. for i in range(20): orientation = zumi.get_orientation() print(orientation) time.sleep(0.5) print(&quot; done &quot;)     ","version":"Next","tagName":"h3"},{"title":"read_x_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#read_x_angle","content":" Description​  Calls update_angles() and returns only the x-angle.  Syntax​  read_x_angle()   Parameters​  None  Returns​  float x-angle: The current x-angle of the Zumi  Example Code​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_x_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"read_y_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#read_y_angle","content":" Description​  Calls update_angles() and returns only the y-angle.  Syntax​  read_y_angle()   Parameters​  None  Returns​  float y-angle: The current y-angle of the Zumi  Example Code​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_y_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"read_z_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#read_z_angle","content":" Description​  Calls update_angles() and returns only the z-angle.  Syntax​  read_z_angle()   Parameters​  None  Returns​  float z-angle: The current z-angle of the Zumi  Example Code​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_z_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"reset_drive()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#reset_drive","content":" Description​  Calls both reset_PID() and reset_gyro().  Syntax​  reset_drive()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,50): zumi.forward_step(0,50) print(zumi.angle_list[2],&quot;, &quot;, zumi.error_past) zumi.stop() zumi.reset_drive() print(&quot; Now &quot;) print(zumi.angle_list[2],&quot;, &quot;, zumi.error_past)     ","version":"Next","tagName":"h3"},{"title":"reset_gyro()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#reset_gyro","content":" Description​  Resets all values in the angle list to 0. Use for driving straight or turning accurately.  Syntax​  reset_gyro()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() print(&quot;z angle &quot; , zumi.angle_list[2]) zumi.turn_left(90,1.2) print(&quot;z angle &quot; , zumi.angle_list[2]) zumi.reset_gyro() print(&quot;z angle &quot; , zumi.angle_list[2])     ","version":"Next","tagName":"h3"},{"title":"reset_PID()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#reset_pid","content":" Description​  Resets the sum of the gyro error to zero as well as the PID error sum. Use for driving straight or turning accurately. This does not reset the P, I, and D values of the Zumi PID control.  Syntax​  reset_PID()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0,50): zumi.go_straight(50,0) #print the error of the z angle along with some of the PID accumulators print(zumi.PID_time_past,&quot;, &quot;, zumi.error_past,&quot;, &quot;, zumi.error_sum,&quot; , &quot;, zumi.angle_list[2]) zumi.stop() #this will reset those values zumi.reset_PID() print(&quot; Now &quot;) print(zumi.PID_time_past,&quot;, &quot;, zumi.error_past,&quot;, &quot;, zumi.error_sum, &quot; , &quot;, zumi.angle_list[2])     ","version":"Next","tagName":"h3"},{"title":"update_angles()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#update_angles","content":" Description​  Reads angular speeds and updates the list of angles: The first 3 are angles produced from the gyroscope readings. X angle, Y angle and Z angle in degrees. The next 2 angles are produced by finding the tilt with respect to gravity. X and Y acceleration angles in degrees. Work well if Zumi's wheels point to the floor The next 2 angles are the complementary filtered angles are produced by combining both gyroscope and accelerometer angles for the x and y axis. The next 3 are the rotation angles which are produced using the accelerometer. rotation along X, Y and Z with respect to gravity. The last one is the tilt state.   Syntax​  update_angles()   Parameters​  None  Returns​  list angles: The updated list of angles in the following format, [Gyro x,Gyro y,Gyro z,Acc x,Acc y,Comp x,Comp y,Rot_x,Rot_y,Rot_z,tilt_state]  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): angles = zumi.update_angles() z_angle = angles[2] print(z_angle) print(&quot; done &quot;)     ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"back_left_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#back_left_detect","content":" Description​  Returns True if the back left IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  back_left_detect() back_left_detect(threshold=100)  Parameters​  integer threshold: Threshold value (0 - 255) of the back left IR sensor  Returns​  boolean detected: Returns True if sensor is triggered.   Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.back_left_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"back_right_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#back_right_detect","content":" Description​  Returns True if the back right IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  back_right_detect() back_right_detect(threshold=100)  Parameters​  integer threshold: Threshold value (0 - 255) of the back right IR sensor  Returns​  boolean detected: Returns True if sensor is triggered.   Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.back_right_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"bottom_left_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#bottom_left_detect","content":" Description​  Returns True if the bottom left IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  bottom_left_detect() bottom_left_detect(threshold=100)  Parameters​  integer threshold: Threshold value (0 - 255) of the bottom left IR sensor  Returns​  boolean detected: Returns True if sensor is triggered.   Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.bottom_left_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"bottom_right_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#bottom_right_detect","content":" Description​  Returns True if the bottom right IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  bottom_right_detect() bottom_right_detect(threshold=100)  Parameters​  integer threshold: Threshold value (0 - 255) of the bottom right IR sensor  Returns​  boolean detected: Returns True if sensor is triggered.   Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.bottom_right_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"calibrate_gyro()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#calibrate_gyro-1","content":" Description​  Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface. This function calls zumi.mpu.calibrate_MPU().  Syntax​  calibrate_gyro()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.calibrate_gyro() print(&quot;Done&quot;)     ","version":"Next","tagName":"h3"},{"title":"calibrate_MPU()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#calibrate_mpu-1","content":" Description​  Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface.  Syntax​  calibrate_MPU() calibrate_MPU(count=100)   Parameters​  integer count: the number of samples you want Zumi to take. Increase to improve accuracy.  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() #Zumi will take 500 samples/readings zumi.mpu.calibrate_MPU(count=500) #this is the order the offsets will be printed print(&quot;angular speed rad/sec Gx,Gy,Gz&quot;) print(&quot;linear acceleration Ax,Ay,Az&quot;) #print the offsets of each Axis zumi.mpu.print_offsets()     ","version":"Next","tagName":"h3"},{"title":"front_left_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#front_left_detect","content":" Description​  Returns True if the front left IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  front_left_detect() front_left_detect(threshold=100)  Parameters​  integer threshold: Threshold value (0 - 255) of the front left IR sensor  Returns​  boolean detected: Returns True if sensor is triggered.   Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.front_left_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"front_right_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#front_right_detect","content":" Description​  Returns True if the front right IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  front_left_detect() front_left_detect(threshold=100)  Parameters​  integer threshold: Threshold value (0 - 255) of the front right IR sensor  Returns​  boolean detected: Returns True if sensor is triggered.   Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.front_right_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"get_all_IR_data()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#get_all_ir_data","content":" Description​  Returns the readings from all 6 IR sensors.  Syntax​  get_all_IR_data()   Parameters​  None  Returns​  list IR sensor readings: list of all 6 IR sensor values (0 - 255)   IR sensor indices: index 0 - Front right sensor index 1 - Bottom right sensor index 2 - Back right sensor index 3 - Bottom left sensor index 4 - Back left sensor index 5 - Front left sensor   Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): ir_readings = zumi.get_all_IR_data() print(ir_readings) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"get_battery_voltage()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#get_battery_voltage","content":" Description​  Get the reading from battery level.  If you are charging Zumi RED LED ON you will see roughly 1.1-1.20 volts.  The battery should reach a max of 4.20 volts and the lowest it should ever reach is 3.0 volts. These values will only show up if the switch is in the on position and the RED led is not visible.  Syntax​  get_battery_voltage()   Parameters​  None  Returns​  float voltage: The battery's voltage in units of Volts.  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,10): # battery level is updated every 500ms or half a second time.sleep(0.5) battery = zumi.get_battery_voltage() print(battery)     ","version":"Next","tagName":"h3"},{"title":"get_IR_data()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#get_ir_data","content":" Description​  Get the reading from the IR sensors and the index specified.  Syntax​  get_IR_data(ir_sensor_index)   Parameters​  integer ir_sensor_index: The specified index (0 - 5) from the IR sensors reading list.  IR sensor indices:  0 IR.FRONT_RIGHT = Front right sensor1 IR.BOTTOM_RIGHT = Bottom right sensor2 IR.BACK_RIGHT = Back right sensor3 IR.BOTTOM_LEFT = Bottom left sensor4 IR.BACK_LEFT = Back left sensor5 IR.FRONT_LEFT = Front left sensor  Returns​  integer IR sensor reading: IR sensor value for the given sensor (0 - 255).  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): FRONT_RIGHT = 0 ir_reading = zumi.get_IR_data(FRONT_RIGHT) zumi.play_note(int(ir_reading/4),20) # Divide by 4 because note is between 0 and 60 time.sleep(0.05)     ","version":"Next","tagName":"h3"},{"title":"get_orientation_message()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#get_orientation_message","content":" Description​  Uses the acceleration values to find Zumi's orientation with respect to the strongest force being applied to Zumi (gravity). This function returns the orientation as a string.  Syntax​  get_orientation_message()   Parameters​  None  Returns​  string orientation state: a description of the orientation state   Descriptions of rientation state: &quot;unknown&quot; &quot;face up&quot; &quot;face down&quot; &quot;right side down&quot; &quot;left side down&quot; &quot;upright&quot; &quot;upside down&quot; &quot;accelerating&quot;   Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() #grab zumi and place it on any side #example: upside down, on its nose etc. for i in range(20): orientation = zumi.get_orientation_message() print(orientation) time.sleep(0.5) print(&quot; done &quot;)     ","version":"Next","tagName":"h3"},{"title":"get_orientation()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#get_orientation-1","content":" Description​  Uses the acceleration values to find Zumi's orientation with respect to the strongest force being applied to Zumi (gravity).  Syntax​  get_orientation()   Parameters​  None  Returns​  integer Orientation state: -1 = unknown 0 = probably falling or moving between states 1 = camera straight up 2 = camera facing down 3 = on right side 4 = on left side 5 = wheels on floor 6 = wheels facing up (upside down) 7 = accelerating faster than 1g   Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() #grab zumi and place it on any side #example: upside down, on its nose etc. for i in range(20): orientation = zumi.get_orientation() print(orientation) time.sleep(0.5) print(&quot; done &quot;)     ","version":"Next","tagName":"h3"},{"title":"read_x_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#read_x_angle-1","content":" Description​  Calls update_angles() and returns only the x-angle.  Syntax​  read_x_angle()   Parameters​  None  Returns​  float x-angle: The current x-angle of Zumi  Example Code​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_x_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"read_y_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#read_y_angle-1","content":" Description​  Calls update_angles() and returns only the y-angle.  Syntax​  read_y_angle()   Parameters​  None  Returns​  float x-angle: The current y-angle of Zumi  Example Code​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_y_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"read_z_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#read_z_angle-1","content":" Description​  Calls update_angles() and returns only the z-angle.  Syntax​  read_z_angle()   Parameters​  None  Returns​  float x-angle: The current z-angle of Zumi  Example Code​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_z_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"reset_drive()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#reset_drive-1","content":" Description​  Calls both reset_PID() and reset_gyro(). Use for driving straight or turning accurately.  Syntax​  reset_drive()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,50): zumi.forward_step(0,50) print(zumi.angle_list[2],&quot;, &quot;, zumi.error_past) zumi.stop() zumi.reset_drive() print(&quot; Now &quot;) print(zumi.angle_list[2],&quot;, &quot;, zumi.error_past)     ","version":"Next","tagName":"h3"},{"title":"reset_gyro()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#reset_gyro-1","content":" Description​  Resets all values in the angle list to 0. Use for driving straight or turning accurately.  Syntax​  reset_gyro()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() print(&quot;z angle &quot; , zumi.angle_list[2]) zumi.turn_left(90,1.2) print(&quot;z angle &quot; , zumi.angle_list[2]) zumi.reset_gyro() print(&quot;z angle &quot; , zumi.angle_list[2])     ","version":"Next","tagName":"h3"},{"title":"reset_PID()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#reset_pid-1","content":" Description​  Resets the sum of the gyro error to zero as well as the PID error sum. Use for driving straight or turning accurately. This does not reset the P, I, and D values of the Zumi PID control.  Syntax​  reset_PID()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0,50): zumi.go_straight(50,0) #print the error of the z angle along with some of the PID accumulators print(zumi.PID_time_past,&quot;, &quot;, zumi.error_past,&quot;, &quot;, zumi.error_sum,&quot; , &quot;, zumi.angle_list[2]) zumi.stop() #this will reset those values zumi.reset_PID() print(&quot; Now &quot;) print(zumi.PID_time_past,&quot;, &quot;, zumi.error_past,&quot;, &quot;, zumi.error_sum, &quot; , &quot;, zumi.angle_list[2])     ","version":"Next","tagName":"h3"},{"title":"update_angles()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#update_angles-1","content":" Description​  Reads angular speeds and updates the list of angles: The first 3 are angles produced from the gyroscope readings. X angle, Y angle and Z angle in degrees. The next 2 angles are produced by finding the tilt with respect to gravity. X and Y acceleration angles in degrees. Work well if Zumi's wheels point to the floor The next 2 angles are the complementary filtered angles are produced by combining both gyroscope and accelerometer angles for the x and y axis. The next 3 are the rotation angles which are produced using the accelerometer. rotation along X, Y and Z with respect to gravity. The last one is the tilt state.   Syntax​  update_angles()   Parameters​  None  Returns​  list angles: The updated list of angles in the following format, [Gyro x,Gyro y,Gyro z,Acc x,Acc y,Comp x,Comp y,Rot_x,Rot_y,Rot_z,tilt_state]  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): angles = zumi.update_angles() z_angle = angles[2] print(z_angle) print(&quot; done &quot;)     ","version":"Next","tagName":"h3"},{"title":"Driving​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#driving","content":" ","version":"Next","tagName":"h2"},{"title":"circle_left()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#circle_left","content":" Description​  Drives Zumi in a counterclockwise circle.  Syntax​  circle_left() circle_left(speed=30, step=2)   Parameters​  integer speed: The driving speed (0 - 80) integer step: The angle step size (decrease for wider turns, increase for tighter turns)  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.circle_left(step=3)     ","version":"Next","tagName":"h3"},{"title":"circle_right()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#circle_right","content":" Description​  Drives Zumi in a clockwise circle.  Syntax​  circle_right() circle_right(speed=30, step=2)   Parameters​  integer speed: The driving speed (0 - 80) integer step: The angle step size (decrease for wider turns, increase for tighter turns)  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.circle_right(step=3)     ","version":"Next","tagName":"h3"},{"title":"circle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#circle","content":" Description​  Drives Zumi in a circle (counterclockwise by default).  Syntax​  circle() circle(speed=30, step=2, direction=1, delay=0.02)   Parameters​  integer speed: The driving speed (0 - 80) integer step: The angle step size (decrease for wider turns, increase for tighter turns)integer direction: -1 for clockwise and +1 for counterclockwise float delay: The time delay between each angle step  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.circle(speed=60, step=4, direction=-1)     ","version":"Next","tagName":"h3"},{"title":"control_motors()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#control_motors","content":" Description​  Sets the speed of each individual motor. The changes take place immediately. This function does not include a stop command or any sensor feedback.  Syntax​  control_motors(right,left)   Parameters​  integer right: The speed value of the right motor (-126-127). Positive values for forward, negative values for reverse. integer left: The speed value of the left motor (-126-127). Positive values for forward, negative values for reverse.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.control_motors(30,30) time.sleep(2) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"drive_over_markers()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#drive_over_markers","content":" Description​  Zumi will drive over the specified number of alternating black and white horizontal lines at least 2 centimeters wide. Zumi will stop when the number of markers have been crossed or if the timeout ends, whichever is first. (Avoid making the speed very high, zumi will most likely overshoot since it has a lot of speed)  Syntax​  zumi.drive_over_markers(5) zumi.drive_over_markers(road_markers=3,speed=10,ir_threshold=120,time_out=3)   Parameters​  integer road_markers: The number of road markers to drive over integer speed: The speed value (0 - 80) integer ir_threshold: The IR threshold value for the bottom left IR sensors to detect black or white. integer time_out: Number of seconds before the timeout ends and Zumi stops driving.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() #must start off in a black area. zumi.drive_over_markers(5) #Drive over 10 road marker with a timeout of 6 seconds zumi.drive_over_markers(road_markers=10,speed=30,time_out=6)     ","version":"Next","tagName":"h3"},{"title":"figure_8()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#figure_8","content":" Description​  Drives Zumi in a figure 8.  Syntax​  figure_8() figure_8(speed=30, step=3, delay=0.02)   Parameters​  integer speed: The driving speed (0 - 80) integer step: The angle step size (decrease for wider turns, increase for tighter turns) float delay: The time delay between each angle step   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.figure_8(step=5)     ","version":"Next","tagName":"h3"},{"title":"forward_avoid_collision()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#forward_avoid_collision","content":" Description​  Drives Zumi forward at a default speed of 40 for 1 second in the direction Zumi is currently facing. If either of the front IR sensor values go below the threshold, Zumi will stop even if the duration or timeout is not complete.  Syntax​  forward_avoid_collision(speed=40, duration=1.0) forward_avoid_collision(speed=40, duration=1.0, desired_angle=None, left_th=150, right_th=150)   Parameters​  integer speed: The driving speed value (0 - 80) float duration: Number of seconds Zumi will drive and check for collision integer desired_angle: Heading or desired angle, in degrees (Default to None which is Zumi's current heading) integer left_th: threshold of the front left IR sensor (0 - 255) integer right_th: threshold of the front right IR sensor (0 - 255)   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.forward_avoid_collision(40,2)     ","version":"Next","tagName":"h3"},{"title":"forward_step()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#forward_step","content":" Description​  Takes one drive &quot;step&quot; to correct for the set heading. This function only works when called inside of a loop.  Syntax​  forward_step(speed, desired_angle) forward_step(speed, desired_angle, max_speed=127)   Parameters​  integer speed: The drive speed value (0 - 127); must be below the max_speed integer desired_angle: heading (0 degrees is defined when the Zumi object is created.) integer max_speed: Caps the max speed. Default to 127.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0, 200): zumi.forward_step(80,0) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"forward()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#forward","content":" Description​  Drives Zumi forward at a default speed of 40 for 1 second in the direction Zumi is currently facing.  Syntax​  forward() forward(speed=40, duration=1.0, desired_angle=None)   Parameters​  integer speed: The driving speed value (0 - 80) float duration: Number of seconds Zumi will drive forward integer desired_angle: Heading or desired angle, in degrees, to drive in (When None is selected Zumi drives wherever she is facing)  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.forward() time.sleep(1) zumi.forward(speed=50) time.sleep(1) zumi.forward(duration=2.1) time.sleep(1)     ","version":"Next","tagName":"h3"},{"title":"funnel_align()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#funnel_align","content":" Description​  Zumi will try to align to the funnel piece on the competition field (Click here for a PDF version).  Syntax​  funnel_align(speed=20, duration=1.0) funnel_align(speed=20, duration=1, angle=None, angle_adj=2, l_th=100, r_th=100)   Parameters​  integer speed: The driving speed value (0 - 80) float duration: Number of seconds Zumi will try to align to the funnel piece integer angle: Heading or desired angle, in degrees, (Default to None which is Zumi's current heading) integer angle_adj: The angle, in degrees, Zumi will turn if one IR sensor detects white integer l_th: threshold of the bottom left IR sensor (0 - 255) integer r_th: threshold of the bottom right IR sensor (0 - 255)   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.funnel_align(speed=10,duration=3,angle_adj=1.1)     ","version":"Next","tagName":"h3"},{"title":"go_reverse()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#go_reverse","content":" Description​  Takes one drive &quot;step&quot; in reverse to correct for the set heading. This function only works when called inside of a loop.  Syntax​  go_reverse(speed, desired_angle) go_reverse(speed, desired_angle, max_speed=127)   Parameters​  integer speed: Drive speed (0 - 127); must be below the max_speed integer desired_angle: heading (0 degrees is defined when the Zumi object is created.) integer max_speed: Caps the max speed. Default to 127.  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0, 200): zumi.go_reverse(40,0) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"go_straight()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#go_straight","content":" Description​  Takes one drive &quot;step&quot; to correct for the set heading. This function only works when called inside of a loop.  Syntax​  go_straight(speed, desired_angle) go_straight(speed, desired_angle, max_speed=127)   Parameters​  integer speed: Drive speed (0 - 127); must be below the max_speed integer desired_angle: heading (0 degrees is defined when the Zumi object is created.) integer max_speed: Caps the max speed. Default to 127.  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0, 200): zumi.go_straight(40,0) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"j_turn()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#j_turn","content":" Description​  Drives Zumi in a j-turn.  Syntax​  j_turn() j_turn(speed=80, step=4, delay=0.005)   Parameters​  integer speed: The forward speed (0 - 80) integer step: The angle step size (decrease for wider turns, increase for tighter turns) float delay: The time delay between each angle step  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.j_turn(speed=60, delay=0.003)     ","version":"Next","tagName":"h3"},{"title":"left_u_turn()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#left_u_turn","content":" Description​  Drives Zumi in a left u-turn.  Syntax​  left_u_turn() left_u_turn(speed=30, step=4, delay=0.02)   Parameters​  integer speed: The forward speed (0 - 80) integer step: The angle step size (decrease for wider turns, increase for tighter turns) float delay: The time delay between each angle step  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.left_u_turn() time.sleep(1) zumi.left_u_turn(step=3)     ","version":"Next","tagName":"h3"},{"title":"line_follower()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#line_follower","content":" Description​  On the road, Zumi uses the camera to detect lanes and stay inside of them.  Syntax​  zumi.line_follower(duration=3, left_thresh=100,right_thresh=100)  Parameters​  integer duration: Number of seconds Zumi will drive on the line integer left_thresh: threshold of the bottom left IR sensor. By default, threshold is 100 integer right_thresh: threshold of the bottom right IR sensor. By default, threshold is 100   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.line_follower(3) zumi.line_follower(3, left_thresh=100,right_thresh=100)     ","version":"Next","tagName":"h3"},{"title":"line_follow_gyro_assist()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#line_follow_gyro_assist","content":" Description​  Drives Zumi forward at a default speed of 20 for 1 second in the direction Zumi is currently facing. Zumi will stop when the duration or timeout is over. If the bottom IR sensors detect a black line, Zumi will continue to drive. If one or the other sensor detects white, Zumi will auto-adjust to stay on the line. If both sensors detect white, Zumi will stop even if the duration has not been met.  Syntax​  line_follow_gyro_assist(speed=20, duration=1.0) line_follow_gyro_assist(speed=20, duration=1, angle=None, angle_adj=2, l_th=100, r_th=100)   Parameters​  integer speed: The drive speed value (0 - 80) integer duration: Number of seconds Zumi will drive on the line integer angle: Heading or desired angle, in degrees (default is None which is Zumi's current heading) integer angle_adj: The number of degrees Zumi will turn if one IR sensor detects white. integer l_th: threshold of the bottom left IR sensor. integer r_th: threshold of the bottom right IR sensor.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.line_follow_gyro_assist(speed=10,duration=3,angle_adj=1.1)     ","version":"Next","tagName":"h3"},{"title":"move_centimeters()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#move_centimeters","content":" Description​  This method uses a best fit linear approximation of the distance traveled over time. It uses the equation y = mx + b, where:  y is the distance traveledm is the predicted speed in centimeters per secondx is the time elapsedb is the slope intercept  If the PID values are not set the internal default values will be set.  If the angle is not input Zumi will drive to whatever angle it is currently facing.  Syntax​  move_centimeters(distance, angle) move_centimeters(distance, angle=None, k_p=None, k_i=None, k_d=None)   Parameters​  float distance: the distance in centimeters you want to travel integer angle: heading, in degrees (0 degrees is defined when the Zumi object is created.) Default to None float k_p: P-gain. Default to None. float k_i: I-gain. Default to None. float k_d: D-gain. Default to None.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.move_centimeters(10) zumi.move_centimeters(10,90) zumi.move_centimeters(15,0)     ","version":"Next","tagName":"h3"},{"title":"move_inches()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#move_inches","content":" Description​  This method uses a best fit linear approximation of the distance traveled over time. It uses the equation y = mx + b, where:  y is the distance traveledm is the predicted speed in inches per secondx is the time elapsedb is the slope intercept  If the PID values are not set the internal default values will be set.  If the angle is not input Zumi will drive to whatever angle it is currently facing.  Syntax​  move_inches(distance, angle) move_inches(distance, angle=None, k_p=None, k_i=None, k_d=None)   Parameters​  float distance: the distance in inches you want to travel integer angle: heading, in degrees (0 degrees is defined when the Zumi object is created.) Default to None float k_p: P-gain. Default to None. float k_i: I-gain. Default to None. float k_d: D-gain. Default to None.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.move_inches(5) zumi.move_inches(6,90) zumi.move_inches(5,0)     ","version":"Next","tagName":"h3"},{"title":"move_to_coordinate()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#move_to_coordinate","content":" Description​  This method drives Zumi from an origin to an x,y position in inches. Using this function will keep track of Zumi's coordinates. To reset the origin, use the reset_coordinate() function. This method uses a best fit linear approximation of the distance traveled over time. It uses the equation y = mx + b, where:  y is the distance traveledm is the predicted speed in inches per secondx is the time elapsedb is the slope intercept  Syntax​  move_to_coordinate(desired_x, desired_y) move_to_coordinate(desired_x, desired_y, k_p=None, k_i=None, k_d=None, units=&quot;in&quot;):   Parameters​  float desired_x: The x-coordinate of the destination float desired_y: The y-coordinate of the destination float k_p: P-gain. Default to None. float k_i: I-gain. Default to None. float k_d: D-gain. Default to None. string units: Defaults to &quot;in&quot; or inches. Set it to &quot;cm&quot; for centimeters.   Returns​  None  Example Code Sample 1​  #Python code from zumi.zumi import Zumi zumi = Zumi() # a square zumi.move_to_coordinate(6,0) zumi.move_to_coordinate(6,6) zumi.move_to_coordinate(0,6) zumi.move_to_coordinate(0,0)   Sample 2  #Python code from zumi.zumi import Zumi import time zumi = Zumi() # Avoid this zumi.move_to_coordinate(10,0) time.sleep(1) # zumi wont drive the second time since its already at (10, 0) zumi.move_to_coordinate(10,0)   Sample 3  #Python code from zumi.zumi import Zumi import time zumi = Zumi() # Avoid this zumi.move_to_coordinate(10,0) time.sleep(1) zumi.reset_coordinate() # zumi will drive the second time since its position will be reset, and will move a total of 20 inches from the start zumi.move_to_coordinate(10,0)     ","version":"Next","tagName":"h3"},{"title":"parallel_park()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#parallel_park","content":" Description​  Drives Zumi in a parallel park maneuver.  Syntax​  parallel_park() parallel_park(speed=15, step=1, delay=0.01)   Parameters​  integer speed: Drive speed (0 - 80) integer step: The angle step size (decrease for wider turns, increase for tighter turns) float delay: The time delay between each angle step   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.parallel_park(speed=20, step=2)     ","version":"Next","tagName":"h3"},{"title":"rectangle_left()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#rectangle_left","content":" Description​  Drives Zumi in a counterclockwise rectangle.  Syntax​  rectangle_left() rectangle_left(speed=40, seconds=1.0, ratio=2)   Parameters​  integer speed: Drive speed between (0 - 80) float seconds: Duration in seconds for shorter side float ratio: Ratio of longer side to shorter side (Multiply ratio by seconds to get the duration of the longer side)   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.rectangle_left(ratio=3)     ","version":"Next","tagName":"h3"},{"title":"rectangle_right()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#rectangle_right","content":" Description​  Drives Zumi in a clockwise rectangle.  Syntax​  rectangle_right() rectangle_right(speed=40, seconds=1.0, ratio=2)   Parameters​  integer speed: Drive speed between (0 - 80) float seconds: Duration in seconds for shorter side float ratio: Ratio of longer side to shorter side (Multiply ratio by seconds to get the duration of the longer side)   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.rectangle_right(ratio=3)     ","version":"Next","tagName":"h3"},{"title":"rectangle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#rectangle","content":" Description​  Drives Zumi in a rectangle.  Syntax​  rectangle() rectangle(speed=40, seconds=1.0, direction=1, ratio=2)   Parameters​  integer speed: Drive speed between (0 - 80) float seconds: Duration in seconds for shorter side integer direction: direction of turn (1 for counterclockwise and -1 for clockwise) float ratio: Ratio of longer side to shorter side (Multiply ratio by seconds to get the duration of the longer side)   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.rectangle(ratio=3)     ","version":"Next","tagName":"h3"},{"title":"reset_coordinate()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#reset_coordinate","content":" Description​  Will reset the coordinate to (0,0).  Syntax​  reset_coordinate()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.move_to_coordinate(10,0) zumi.reset_coordinate() #zumi will drive another 10 inches zumi.move_to_coordinate(10,0)     ","version":"Next","tagName":"h3"},{"title":"reverse_avoid_collision()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#reverse_avoid_collision","content":" Description​  Drives Zumi in reverse at a default speed of 40 for 1 second in the direction Zumi is currently facing. If either of the back IR sensor values go below the threshold, Zumi will stop even if the duration or timeout is not complete.  Syntax​  reverse_avoid_collision(speed=40, duration=1.0) reverse_avoid_collision(speed=40, duration=1.0, desired_angle=None, left_th=150, right_th=150)   Parameters​  integer speed: Driving speed (0 - 80) float duration: Number of seconds Zumi will drive and check for collision integer desired_angle: Heading or desired angle, in degrees (Default to None which is Zumi's current heading) integer left_th: threshold of the back left IR sensor integer right_th: threshold of the back right IR sensor   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.reverse_avoid_collision(40,2)     ","version":"Next","tagName":"h3"},{"title":"reverse_step()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#reverse_step","content":" Description​  Takes one drive &quot;step&quot; in reverse to correct for the set heading. This function only works when called inside of a loop.  Syntax​  reverse_step(speed, desired_angle) reverse_step(speed, desired_angle, max_speed=127)   Parameters​  integer speed: Drive speed between (0 - 127); must be below the max_speed integer desired_angle: heading, in degrees (0 degrees is defined when the Zumi object is created.) integer max_speed: Caps the max speed. Default to 127.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0, 200): zumi.reverse_step(80,0) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"reverse()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#reverse","content":" Description​  Drives Zumi in reverse at a default speed of 40 for 1 second in the direction Zumi is currently facing.  Syntax​  reverse() reverse(speed=40, duration=1.0, desired_angle=None)   Parameters​  integer speed: Driving speed between (0 - 80) float duration: Number of seconds Zumi will drive reverse integer desired_angle: Heading or desired angle to drive in, in degrees (When None is selected Zumi drives wherever she is facing)  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.reverse() time.sleep(1) zumi.reverse(speed=50) time.sleep(1) zumi.reverse(duration=2.1) time.sleep(1)     ","version":"Next","tagName":"h3"},{"title":"right_u_turn()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#right_u_turn","content":" Description​  Drives Zumi in a right u-turn.  Syntax​  right_u_turn() right_u_turn(speed=30, step=4, delay=0.02)   Parameters​  integer speed: Driving speed value (0 - 80) integer step: The angle step size (decrease for wider turns, increase for tighter turns) float delay: The time delay between each angle step.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.right_u_turn(speed=20) time.sleep(1) zumi.right_u_turn(delay=0.04)     ","version":"Next","tagName":"h3"},{"title":"smooth_forward()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#smooth_forward","content":" Description​  Causes Zumi to gradually accelerate forward to max speed during a given duration before decelerating back to zero.  Syntax​  smooth_forward(duration) smooth_forward(duration, rate=1)   Parameters​  float duration: Total duration of drive command including acceleration and deceleration float rate: rate at which speed changes. Default to 1   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_forward(3) time.sleep(1) zumi.smooth_forward(duration=3,rate=2)     ","version":"Next","tagName":"h3"},{"title":"smooth_reverse()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#smooth_reverse","content":" Description​  Causes Zumi to gradually accelerate in reverse to max speed during a given duration before decelerating back to zero.  Syntax​  smooth_reverse(duration) smooth_reverse(duration, rate=1)   Parameters​  float duration: Total duration of drive command including acceleration and deceleration float rate: Rate at which speed changes. Default to 1   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_reverse(3) time.sleep(1) zumi.smooth_reverse(duration=3,rate=2)     ","version":"Next","tagName":"h3"},{"title":"smooth_turn_left()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#smooth_turn_left","content":" Description​  Turns left gradually to reach the desired angle while also going forward. Default to 90 degrees.  Syntax​  smooth_turn_left() smooth_turn_left(desired_angle=90,speed=20,step=2)   Parameters​  integer desired_angle: Degrees you want to turn from your starting position integer speed: Driving speed (0 - 80). Default to 20. integer step: The angle step size (decrease for wider turns, increase for tighter turns)   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_turn_left() time.sleep(1) zumi.smooth_turn_left(speed=30)     ","version":"Next","tagName":"h3"},{"title":"smooth_turn_right()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#smooth_turn_right","content":" Description​  Turns right gradually to reach the desired angle while also going forward. Default to 90 degrees.  Syntax​  smooth_turn_right() smooth_turn_right(desired_angle=90,speed=20,step=2)   Parameters​  integer desired_angle: Degrees you want to turn from your starting position integer speed: Driving speed between 0 and 80. Default to 20. integer step: The angle step size (decrease for wider turns, increase for tighter turns)   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_turn_right() time.sleep(1) zumi.smooth_turn_right(speed=30)     ","version":"Next","tagName":"h3"},{"title":"speed_calibration()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#speed_calibration","content":" Description​  In order to use this method you will need a speed calibration sheet (Click here for a PDF version). Zumi will drive over 5 horizontal white lines that are 2 centimeters wide. The slope and y_intercept will be generated for the best fit line of the speed prediction. These values will be saved to the Zumi as a text file.  This function is necessary for move_to_coordinate(), move_inches(), and move_centimeters().  Syntax​  speed_calibration() speed_calibration(speed=40, ir_threshold=100, time_out=3, cm_per_brick=2, show_graphs=False)   Parameters​  integer speed: Driving speed value (0 - 80). The lower the more accurate the speed prediction. integer ir_threshold: Integer value for the bottom left IR threshold (0-255). float time_out: The number of seconds before the timeout. float cm_per_brick: The width of each road marker in centimeters. boolean show_graphs: Defaults to False. If set to True, a graph will be displayed with the best fit line prediction. *Note: You may need to run this function twice to see the graph.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() # Place Zumi on the black portion of the speed calibration sheet zumi.speed_calibration() # To show the graphs, replace the original &quot;zumi.speed_calibration&quot; with the following line # zumi.speed_calibration(show_graphs = True)     ","version":"Next","tagName":"h3"},{"title":"square_left()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#square_left","content":" Description​  Drives Zumi in a counterclockwise square.  Syntax​  square_left() square_left(speed=40, seconds=1.0)   Parameters​  integer speed: Drive speed value (0 - 80) float seconds: Duration in seconds Zumi drives for each side  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.square_left(seconds=1.5)     ","version":"Next","tagName":"h3"},{"title":"square_right()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#square_right","content":" Description​  Drives Zumi in a clockwise square.  Syntax​  square_right() square_right(speed=40, seconds=1.0)   Parameters​  integer speed: Drive speed value (0 - 80) float seconds: Duration in seconds Zumi drives for each side  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.square_right(seconds=1.5)     ","version":"Next","tagName":"h3"},{"title":"square()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#square","content":" Description​  Drives Zumi in a square. Default to counterclockwise.  Syntax​  square() square(speed=40, seconds=1, direction=1)   Parameters​  integer speed: Drive speed between 0-80 float seconds: Duration in seconds Zumi drives for each side integer direction: Direction of turn (-1 for clockwise and +1 for counterclockwise)   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.square(seconds=1.0) time.sleep(1) zumi.square(speed=60,seconds=1.2)     ","version":"Next","tagName":"h3"},{"title":"stop()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#stop","content":" Description​  Stops Zumi's motors immediately.  Syntax​  stop()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0, 30): zumi.go_straight(30,0) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"triangle_left()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#triangle_left","content":" Description​  Drives Zumi in a counterclockwise triangle.  Syntax​  triangle_left() triangle_left(speed=40, seconds=1.5)   Parameters​  integer speed: Drive speed value (0 - 80) float seconds: Duration in seconds Zumi drives for each side   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.triangle_left(speed=30)     ","version":"Next","tagName":"h3"},{"title":"triangle_right()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#triangle_right","content":" Description​  Drives Zumi in a clockwise triangle.  Syntax​  triangle_right() triangle_right(speed=40, seconds=1.5)   Parameters​  integer speed: Drive speed value (0 - 80) float seconds: Duration in seconds Zumi drives for each side   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.triangle_right(speed=30)     ","version":"Next","tagName":"h3"},{"title":"triangle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#triangle","content":" Description​  Drives Zumi in a triangle. Default is counterclockwise.  Syntax​  triangle() triangle(speed=40, seconds=1.5, direction=1)   Parameters​  integer speed: Drive speed value (0 - 80) float seconds: Duration in seconds Zumi drives for each side integer direction: Direction of turn (-1 for clockwise and +1 for counterclockwise)  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.triangle(speed=30, direction=-1)     ","version":"Next","tagName":"h3"},{"title":"turn_left()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#turn_left","content":" Description​  Causes Zumi to turn left the specified number of degrees. Default to 90 degrees.  Syntax​  turn_left() turn_left(desired_angle=90, duration=1.0)   Parameters​  integer desired_angle: Degrees you want to turn to the left from your starting position. Default to 90. Only positive values. float duration: The amount of time in seconds Zumi will try and complete the turn. Increase for turns greater than 90 degrees.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.turn_left() time.sleep(1) zumi.turn_left(130,1.5)     ","version":"Next","tagName":"h3"},{"title":"turn_right()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#turn_right","content":" Description​  Causes Zumi to turn right the specified number of degrees. Default to 90 degrees.  Syntax​  turn_right() turn_right(desired_angle=90,duration=1.0)   Parameters​  integer desired_angle: Degrees you want to turn to the right from your starting position. Default to 90. Only positive values. float duration: The amount of time in seconds Zumi will try and complete the turn. Increase for turns greater than 90 degrees.   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.turn_right(45) time.sleep(1) zumi.turn_right(200,duration=1.3)     ","version":"Next","tagName":"h3"},{"title":"turn()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#turn","content":" Description​  Zumi will turn to a desired angle.  Syntax​  turn(desired_angle) turn(desired_angle, duration=1.5, max_speed=25, accuracy=1):   Parameters​  integer desired_angle: Angle to turn. Positive degrees to the left. Negative degrees to the right. float duration: Number of seconds Zumi will perform the command. integer speed: The max motor speed for turning (0 - 80). integer accuracy: The tolerance of +- degrees (e.g. accuracy = 1 means +1 or -1 degree off from desired_angle).   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() # zumi will turn to the left zumi.turn(90) #zumi will turn to the right 90 degrees from the starting angle zumi.turn(-90)     ","version":"Next","tagName":"h3"},{"title":"LEDs-and-Buzzer​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#leds-and-buzzer","content":" ","version":"Next","tagName":"h2"},{"title":"all_lights_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#all_lights_off","content":" Description​  Turns all LEDs off  Syntax​  all_lights_off()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.all_lights_on() time.sleep(2) zumi.all_lights_off()     ","version":"Next","tagName":"h3"},{"title":"all_lights_on()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#all_lights_on","content":" Description​  Turns all LEDs on the 2 front white leds and the rear 2 leds.  Syntax​  all_lights_on()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.all_lights_on()     ","version":"Next","tagName":"h3"},{"title":"brake_lights_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#brake_lights_off","content":" Description​  Turns off front LEDs only  Syntax​  brake_lights_off()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.brake_lights_on() time.sleep(2) zumi.brake_lights_off()     ","version":"Next","tagName":"h3"},{"title":"brake_lights_on()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#brake_lights_on","content":" Description​  Turns on back LEDs only  Syntax​  brake_lights_on()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.brake_lights_on()     ","version":"Next","tagName":"h3"},{"title":"hazard_lights_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#hazard_lights_off","content":" Description​  Turns off flashing front and back LEDs  Syntax​  hazard_lights_off()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.hazard_lights_on() time.sleep(2) zumi.hazard_lights_off()     ","version":"Next","tagName":"h3"},{"title":"hazard_lights_on()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#hazard_lights_on","content":" Description​  Flashes both front and back LEDs  Syntax​  hazard_lights_on()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.hazard_lights_on()     ","version":"Next","tagName":"h3"},{"title":"headlights_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#headlights_off","content":" Description​  Turns off front LEDs only  Syntax​  headlights_off()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.headlights_on() time.sleep(2) zumi.headlights_off()     ","version":"Next","tagName":"h3"},{"title":"headlights_on()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#headlights_on","content":" Description​  Turns on front LEDs only  Syntax​  headlights_on()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.headlights_on() time.sleep(2) zumi.all_lights_off()     ","version":"Next","tagName":"h3"},{"title":"play_note()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#play_note","content":" Description​  Play a note, from C2 - B6.  Syntax​  play_note(note_type) play_note(note_type, note_duration=500)   Parameters​  integer/enum note_type: Integer from 0 to 60 or enum from Note class. Setting the note to 0 will result in no sound. integer note_duration: Default to 500 milliseconds but can be an integer from 0 to 2500 milliseconds. Must be in 100 millisecond increments ex. 100, 200, 500, 2000. If 0 note will play forever.   class Note: C2 = 1 CS2 = 2 D2 = 3 DS2 = 4 E2 = 5 F2 = 6 FS2 = 7 G2 = 8 GS2 = 9 A2 = 10 AS2 = 11 B2 = 12 C3 = 13 CS3 = 14 D3 = 15 DS3 = 16 E3 = 17 F3 = 18 FS3 = 19 G3 = 20 GS3 = 21 A3 = 22 AS3 = 23 B3 = 24 C4 = 25 CS4 = 26 D4 = 27 DS4 = 28 E4 = 29 F4 = 30 FS4 = 31 G4 = 32 GS4 = 33 A4 = 34 AS4 = 35 B4 = 36 C5 = 37 CS5 = 38 D5 = 39 DS5 = 40 E5 = 41 F5 = 42 FS5 = 43 G5 = 44 GS5 = 45 A5 = 46 AS5 = 47 B5 = 48 C6 = 49 CS6 = 50 D6 = 51 DS6 = 52 E6 = 53 F6 = 54 FS6 = 55 G6 = 56 GS6 = 57 A6 = 58 AS6 = 59 B6 = 60   Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.protocol import Note import time zumi = Zumi() zumi.play_note(30, 500) time.sleep(1) zumi.play_note(Note.C4) time.sleep(1) # will stop the buzzer zumi.play_note(0, 0)     ","version":"Next","tagName":"h3"},{"title":"signal_left_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#signal_left_off","content":" Description​  Turns off flashing both left front and left back LEDs  Syntax​  signal_left_off()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.signal_left_on() time.sleep(2) zumi.signal_left_off()     ","version":"Next","tagName":"h3"},{"title":"signal_left_on()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#signal_left_on","content":" Description​  Flashes both left front and left back LEDs  Syntax​  signal_left_on()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.signal_left_on()     ","version":"Next","tagName":"h3"},{"title":"signal_right_off()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#signal_right_off","content":" Description​  Turns off flashing both right front and right back LEDs  Syntax​  signal_right_off()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.signal_right_on() time.sleep(2) zumi.signal_right_off()     ","version":"Next","tagName":"h3"},{"title":"signal_right_on()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#signal_right_on","content":" Description​  Flashes both right front and right back LEDs  Syntax​  signal_right_on()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.signal_right_on()     ","version":"Next","tagName":"h3"},{"title":"Camera​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#camera","content":" ","version":"Next","tagName":"h2"},{"title":"capture()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#capture","content":" Description​  Takes a picture using the PiCamera and saves it in an array.  Syntax​  capture()  Parameters​  None  Returns​  ndarray image array: a NumPy array representing the captured image  Example Code​  Python​  #Python code from zumi.util.camera import Camera import time camera=Camera() camera.start_camera() frame = camera.capture() camera.show_image(frame) time.sleep(5) camera.close()     ","version":"Next","tagName":"h3"},{"title":"clear_output()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#clear_output","content":" Description​  Clear the output for the next image to show.  Syntax​  clear_output()  Parameters​  None  Returns​  None  Example Code​  from zumi.util.camera import Camera camera = Camera() camera.start_camera() try: for x in range(30): frame = camera.capture() camera.show_image(frame) camera.clear_output() # Clear the output for the next image to show finally: camera.close()     ","version":"Next","tagName":"h3"},{"title":"close()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#close","content":" Description​  Releases camera's resources  Syntax​  close()  Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.camera import Camera camera=Camera() camera.start_camera() camera.save_photo() camera.close()     ","version":"Next","tagName":"h3"},{"title":"is_closed()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#is_closed","content":" Description​  Checks if the camera stream is open  Syntax​  is_closed()  Parameters​  None  Returns​  Boolean: Returns True if camera stream is open. Otherwise returns False  Example Code​  #Python code from zumi.util.camera import Camera camera=Camera() camera.start_camera() camera.close() print(&quot;Camera is closed?&quot;) print(camera.is_closed()) if not camera.is_closed(): camera.close()     ","version":"Next","tagName":"h3"},{"title":"save_photo()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#save_photo","content":" Description​  Captures an image and saves it in the working directory.  Syntax​  save_photo() save_photo(file_name)  Parameters​  string file_name: The name of the image file that will be saved. Default name (no input) is the current time.  Returns​  None  Example Code​  #Python code from zumi.util.camera import Camera camera=Camera() camera.start_camera() camera.save_photo() #&quot;&lt;current_time&gt;.jpg&quot; file will be saved in the current working directory camera.save_photo(&quot;Cheese&quot;) #&quot;Cheese.jpg&quot; file will be saved in the current working directory camera.close()     ","version":"Next","tagName":"h3"},{"title":"show_image()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#show_image","content":" Description​  Displays an image taken from Zumi's camera.  Syntax​  show_image(frame)   Parameters​  ndarray frame: An image array that will be displayed  Returns​  None  Example Code​  #Python code from zumi.util.camera import Camera import time camera=Camera() camera.start_camera() frame = camera.capture() camera.show_image(frame) camera.close()     ","version":"Next","tagName":"h3"},{"title":"start_camera()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#start_camera","content":" Description​  Turns on the camera  Syntax​  start_camera()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.camera import Camera import cv2 import IPython.display import PIL.Image from io import BytesIO import time # you can change the resolution of the camera # using the image_w = image width # and the image_h = image heigth #camera = Camera(image_w=1280,image_h=960) #camera = Camera(image_w=1024,image_h=768) #camera = Camera(image_w=128,image_h=64) camera = Camera(image_w=60,image_h=32) camera.start_camera() time_start = time.time() try: for i in range(30): frame = camera.capture() img = PIL.Image.fromarray(frame, &quot;RGB&quot;) buffer = BytesIO() img.save(buffer,format=&quot;JPEG&quot;) IPython.display.display(IPython.display.Image(data=buffer.getvalue())) IPython.display.clear_output(wait=True) finally: print(30/(time.time()-time_start))     ","version":"Next","tagName":"h3"},{"title":"Colors​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#colors","content":" ","version":"Next","tagName":"h2"},{"title":"fit()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#fit","content":" Description​  Fits values for prediction. By default, HSV is fitted.  Syntax​  fit(values)   Parameters​  string values: values to be fitted for prediction. By default hsv is fitted.  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.camera import Camera from zumi.util.screen import Screen from zumi.util.color_classifier import ColorClassifier import time camera = Camera() screen = Screen() zumi = Zumi() user_name = 'username' # Type your actual username here project_name = 'project_name' # Type your actual project name here knn = ColorClassifier(user_name=user_name) # Must include &quot;user_name=&quot; train = knn.load_model(project_name) knn.fit(&quot;hsv&quot;) # Fitting to HSV camera.start_camera() while True: user_input = input(&quot;Press 'enter' to predict or 'q to quit: &quot;) if user_input == &quot;q&quot;: break image = camera.capture() predict = knn.predict(image) screen.draw_text_center(predict) camera.close()     ","version":"Next","tagName":"h3"},{"title":"predict()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#predict","content":" Description​  Predicts a color captured from the Zumi camera.  Syntax​  predict(pred_features)   Parameters​  ndarray p*red_features: The image to draw the prediction from  Returns​  string prediction: The prediction made by the knn color classifier  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.camera import Camera from zumi.util.screen import Screen from zumi.util.color_classifier import ColorClassifier import time camera = Camera() screen = Screen() zumi = Zumi() user_name = 'username' # Type your actual username here project_name = 'project_name' # Type your actual project name here knn = ColorClassifier(user_name=user_name) # Must include &quot;user_name=&quot; train = knn.load_model(project_name) knn.fit(&quot;hsv&quot;) # Fitting to HSV camera.start_camera() while True: user_input = input(&quot;Press 'enter' to predict or 'q to quit: &quot;) if user_input == &quot;q&quot;: break image = camera.capture() predict = knn.predict(image) # Based on the image taken, the knn color classifier will predict a color screen.draw_text_center(predict) # This prediction gets written to the Zumi screen camera.close()     ","version":"Next","tagName":"h3"},{"title":"load_model()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#load_model","content":" Description​  Loads the model based on your project name.  Syntax​  load_model(name)   Parameters​  string name: The project name. This will depend on what you chose to name your project  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.camera import Camera from zumi.util.screen import Screen from zumi.util.color_classifier import ColorClassifier import time camera = Camera() screen = Screen() zumi = Zumi() user_name = 'username' # Type your actual username here project_name = 'project_name' # Type your actual project name here knn = ColorClassifier(user_name=user_name) # Must include &quot;user_name=&quot; train = knn.load_model(project_name) # Loads the model based on your project name. knn.fit(&quot;hsv&quot;) camera.start_camera() while True: user_input = input(&quot;Press 'enter' to predict or 'q to quit: &quot;) if user_input == &quot;q&quot;: break image = camera.capture() predict = knn.predict(image) screen.draw_text_center(predict) camera.close()     ","version":"Next","tagName":"h3"},{"title":"Vision​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#vision","content":" ","version":"Next","tagName":"h2"},{"title":"convert_to_gray()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#convert_to_gray","content":" Description​  Converts captured image into a grayscaled image.  Syntax​  convert_to_gray(img)  Parameters​  ndarray img: an image array to be converted  Returns​  ndarray image array: a modified image array of img for grayscaling  Example Code​  from zumi.util.vision import Vision from zumi.util.camera import Camera camera = Camera() vision = Vision() camera.start_camera() img = camera.capture() camera.close() gray = vision.convert_to_gray(img) # Convert it to grayscaled version of img camera.show_image(gray)     ","version":"Next","tagName":"h3"},{"title":"convert_to_hsv()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#convert_to_hsv","content":" Description​  Converts captured image to an HSV image.  Syntax​  convert_to_hsv(img)  Parameters​  ndarray img: An image array to be converted  Returns​  ndarray image array: A modified image array of img in the HSV colorspace  Example Code​  from zumi.util.vision import Vision from zumi.util.camera import Camera camera = Camera() vision = Vision() camera.start_camera() img = camera.capture() camera.close() hsv = vision.convert_to_hsv(img) # Convert it to HSV, hue saturation and value camera.show_image(hsv)     ","version":"Next","tagName":"h3"},{"title":"get_QR_message()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#get_qr_message","content":" Description​  Returns the message from decoded QR code.  Syntax​  get_QR_message(Qr_object)  Parameters​  Decoded Qr_object: decoded QR data (an object of class Decoded) that find_QR_code()  Returns​  string message: decoded message from QR code  Example Code​  camera = Camera() camera.start_camera() frame = camera.capture() camera.close() qr_code = vision.find_QR_code(frame) message = vision.get_QR_message(qr_code) # returns None if QR code was not detected print(message)     ","version":"Next","tagName":"h3"},{"title":"find_face()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#find_face","content":" Description​  Searches captured image for facial features to find face's pixel location in the image.  Syntax​  find_face(frame, scale_factor=1.05, min_neighbors=8, min_size=(40,40))  Parameters​  ndarray frame: an image array float scale_factor: a number to reduce image size for easier training. By default, scale_factor is 1.05 (reducing the image by 5%) integer min_neighbors: minimum number of neighbors (features that have similarities) integer min_size: minimum size of face to be detected integer max_size: maximum size of face to be detected   Returns​  list area: [x,y,w,h] of the face's x and y coordinates along with the area's width and height. Returns None if not detected  Example Code​  from zumi.util.camera import Camera from zumi.util.vision import Vision camera = Camera() vision = Vision() camera.start_camera() image = camera.capture() camera.close() face_location = vision.find_face(image, scale_factor = 1.05, min_neighbors=8, min_size= (40,40)) # returns location of face frame within image. None if not found print(&quot;[x,y,w,h] =&quot;,face_location) camera.show_image(image) # displays image with outlined face (if it exists) in Jupyter Notebook     ","version":"Next","tagName":"h3"},{"title":"find_QR_code()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#find_qr_code","content":" Description​  Processes the image that is given as a parameter and draws a rectangle around the QR code with the decoded message on it.  Syntax​  find_QR_code(frame)  Parameters​  *ndarray frame: a NumPy array representing a captured image (image array)  Returns​  Decoded decoded_Qr: decoded QR data (an object of Decoded class). Returns None if QR code is not detected  Example Code​  from zumi.zumi import Zumi from zumi.util.camera import Camera from zumi.util.vision import Vision camera = Camera() vision = Vision() camera.start_camera() try: for i in range(50): frame = camera.capture() vision.find_QR_code(frame) camera.show_image(frame) camera.clear_output() finally: print(&quot;Done!&quot;) camera.close()     ","version":"Next","tagName":"h3"},{"title":"find_smile()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#find_smile","content":" Description​  Searches captured image for smiling facial features to find smile's pixel location in the image.  Syntax​  find_smile(frame, scale_factor=1.05, min_neighbors=8, min_size=(40,40))  Parameters​  ndarray frame: a NumPy array representing a captured image (image array) float scale_factor: a number to reduce image size for easier training. By default, scale_factor is 1.05 (reducing the image by 5%) integer min_neighbors: minimum number of neighbors (features that have similarities) integer min_size: minimum size of face to be detected integer max_size: maximum size of face to be detected   Returns​  list area: [x,y,w,h] of the smiles's x and y coordinates along with the area's width and height. Returns None if not detected  Example Code​  from zumi.util.camera import Camera from zumi.util.vision import Vision camera = Camera() vision = Vision() camera.start_camera() image = camera.capture() camera.close() smile_location = vision.find_smile(image, scale_factor = 1.05, min_neighbors=8, min_size= (40,40)) # returns location of smile frame within image. None if not found print(&quot;[x,y,w,h] =&quot;,smile_location) camera.show_image(image) # displays image with outlined smile (if it exists) in Jupyter Notebook     ","version":"Next","tagName":"h3"},{"title":"Screen​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#screen","content":" ","version":"Next","tagName":"h2"},{"title":"angry()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#angry","content":" Description​  Draws Zumi's angry eyes on the screen.  Syntax​  angry()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.angry()     ","version":"Next","tagName":"h3"},{"title":"blink()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#blink","content":" Description​  Draws Zumi's blinking animation on the screen.  Syntax​  blink()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.blink()     ","version":"Next","tagName":"h3"},{"title":"clear_display()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#clear_display","content":" Description​  Clears everything on the OLED by drawing a black rectangle.  Syntax​  clear_display()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.print(&quot;Hello&quot;) screen.clear_display()     ","version":"Next","tagName":"h3"},{"title":"clear_drawing()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#clear_drawing","content":" Description​  Clears the drawing canvas object without clearing the OLED screen. Use this before using any new draw functions.  Syntax​  clear_drawing()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_circle(30,30,10) time.sleep(1) screen.clear_drawing() screen.print(&quot;Hello&quot;)     ","version":"Next","tagName":"h3"},{"title":"clock()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#clock","content":" Description​  Clears the screen and draws a clock with the given hour and minute set by the user.  Syntax​  clock(hour, minute) clock(hour, minute, string='', font_size=18)   Parameters​  integer hour: hour set by user integer minute: minute set by user string message: an 8 character message to be displayed under the clock (optional). Defaults to an empty string. integer font_size: the font-size of the time  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.clock(3,15,&quot;Monday&quot;)     ","version":"Next","tagName":"h3"},{"title":"close_eyes()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#close_eyes","content":" Description​  Draws Zumi's closed eyes on the screen.  Syntax​  close_eyes()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.close_eyes()     ","version":"Next","tagName":"h3"},{"title":"draw_arc()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_arc","content":" Description​  Draws an arc within the boundaries of points x1,y1, and x2,y2 at the specified starting and ending angles.  Syntax​  draw_arc(x1, y1, x2, y2, start_ang, end_ang) draw_arc(x1, y1, x2, y2, start_ang, end_ang,fill_in=True)   Parameters​  integer x1: x coordinate of top-left corner for the rectangle enclosing the arc integer y1: y coordinate of top-left corner for the rectangle enclosing the arc integer x2: x coordinate of bottom-right corner for the rectangle enclosing the arc integer y2: y coordinate of bottom-right corner for the rectangle enclosing the arc integer start_ang: starting arc angle, in degrees integer end_ang: ending arc angle, in degrees boolean fill_in: Boolean that selects if the triangle will be filled in (white). Default to True.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen=Screen() screen.draw_arc(0,0,50,50,-180,0)     ","version":"Next","tagName":"h3"},{"title":"draw_chord()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_chord","content":" Description​  Draws a chord within the boundaries of points x1,y1, and x2,y2 at the specified starting and ending angles.  Syntax​  draw_chord(x1, y1, x2, y2, start_ang, end_ang) draw_chord(x1, y1, x2, y2, start_ang, end_ang,fill_in=True)   Parameters​  integer x1: x coordinate of top-left corner for the rectangle enclosing the chord integer y1: y coordinate of top-left corner for the rectangle enclosing the chord integer x2: x coordinate of bottom-right corner for the rectangle enclosing the chord integer y2: y coordinate of bottom-right corner for the rectangle enclosing the chord integer start_ang: starting angle integer end_ang: ending angle boolean fill_in: Boolean that selects if the triangle will be filled in (white). Default to True.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen=Screen() screen.draw_chord(0,0,20,20,-180,0) screen.draw_chord(30,30,50,50,-180,0) #do a 360 from -180 degrees to 180 degrees screen.draw_chord(60,30,100,50,-180,180)     ","version":"Next","tagName":"h3"},{"title":"draw_circle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_circle","content":" Description​  Draws a circle that fits inside a square with its top-left corner at x,y and a width/height of the circle's diameter.  Syntax​  draw_circle(x, y, diameter) draw_circle(x, y, diameter, fill_in=True)   Parameters​  integer x: x-coordinate of the top-left corner of the enclosing square integer y: y-coordinate of the top-left corner of the enclosing square integer diameter: diameter of the circle (also the width and height of enclosing square) boolean fill_in: Boolean that selects if the triangle will be filled in (white). Default to True.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_circle(10,0,20,fill_in=False)     ","version":"Next","tagName":"h3"},{"title":"draw_ellipse()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_ellipse","content":" Description​  Draws an ellipse that fits in a rectangle with its top-left corner at x,y and a set width and height.  Syntax​  draw_ellipse(self, x, y, width, height) draw_ellipse(self, x, y, width, height, fill_in=True)   Parameters​  integer x: x coordinate of the top-left corner of the enclosing rectangle integer y: y coordinate of the top-left corner of the enclosing rectangle integer width: width of enclosing rectangle integer height: height of enclosing rectangle boolean fill_in: Boolean that selects if the triangle will be filled in (white). Default to True.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_ellipse(0,0,100,30,fill_in=True)     ","version":"Next","tagName":"h3"},{"title":"draw_image()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_image","content":" Description​  Draws the image on the screen.  Syntax​  draw_image(img)   Parameters​  Image img: An image object that's produced using screen.path_to_image(path), &quot;path&quot; being the file location of your image.  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() path = &quot;/usr/local/lib/python3.5/dist-packages/zumi/util/images/happy1.ppm&quot; screen.draw_image(screen.path_to_image(path))     ","version":"Next","tagName":"h3"},{"title":"draw_line()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_line","content":" Description​  Draws a line between points (x1,y1) and (x2,y2).  Syntax​  draw_line(x1, y1, x2, y2) draw_line(x1, y1, x2, y2, thickness=1,fill_in=True)   Parameters​  integer x1: x coordinate of the starting point integer y1: y coordinate of the starting point integer x2: x coordinate of the ending point integer y2: y coordinate of the ending point integer thickness: pixel width of the line boolean fill_in: Boolean that selects if the line will be filled in (white). Default to True.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_line(0,0,40,40,fill_in=True) screen.draw_line(40,0,0,40,thickness=10,fill_in=True)     ","version":"Next","tagName":"h3"},{"title":"draw_point()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_point","content":" Description​  Draws a single pixel at the set x and y coordinate.  Syntax​  draw_point(x, y) draw_point(x, y,fill_in=True)   Parameters​  integer x: the x coordinate integer y: the y coordinate boolean fill_in: Boolean that selects if the point will be filled in (white). Default to True.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_point(100,30)     ","version":"Next","tagName":"h3"},{"title":"draw_polygon()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_polygon","content":" Description​  Draws lines between points in a given list [(x1,y1),...,(xn,yn)] to form a shape.  Syntax​   draw_polygon(points_list) draw_polygon(points_list,fill_in = True):   Parameters​  list points_list: A list [x1,y1,x2,y2,....xn,yn] with at least 3 points boolean fill_in: Boolean that selects if the polygon will be filled in (white). Default to True.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() points = [(30,50),(90,10),(20,10),(5,20)] screen.draw_polygon(points)     ","version":"Next","tagName":"h3"},{"title":"draw_rect()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_rect","content":" Description​  Draws a rectangle on the screen.  Syntax​  draw_rect(x, y, width, height) draw_rect(x, y, width, height, thickness=1, fill_in=False)   Parameters​  integer x: the top left corner x coordinate integer y: the top left corner y coordinate integer width: width of rectangle integer height: height of rectangle integer thickness: thickness of rectangle border, default to 1 boolean fill_in: Boolean that selects if the shape will be filled in. Default to False.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_rect(0,0,128,64,thickness=1,fill_in=True)     ","version":"Next","tagName":"h3"},{"title":"draw_square()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_square","content":" Description​  Draws a square on the screen.  Syntax​  draw_square(x, y, width) draw_square(x, y, width, thickness=1, fill_in=False)   Parameters​  integer x: the top left corner x coordinate integer y: the top left corner y coordinate integer width: width of each side integer thickness: thickness of rectangle border, default to 1 integer fill_in: Boolean that selects if the shape will be filled in. Default to False.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_square(0,0,30,thickness=1,fill_in=True)     ","version":"Next","tagName":"h3"},{"title":"draw_text_center()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_text_center","content":" Description​  Draws text to the center of the screen  Syntax​  draw_text_center(string, font_size=16) draw_text_center(string) draw_text_center(string, font_size)   Parameters​  string string: The text that Zumi will show on the screeninteger font_size: The font size of the text, defaults to 16 pixels.  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_text_center('hello',font_size=10) time.sleep(0.5) screen.draw_text_center('hello',font_size=20) time.sleep(0.5) screen.draw_text_center('hello',font_size=30) time.sleep(0.5) screen.draw_text_center('hello',font_size=40) time.sleep(0.5) screen.draw_text_center('hello',font_size=50) time.sleep(0.5)     ","version":"Next","tagName":"h3"},{"title":"draw_text()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_text","content":" Description​  Draws text to the upper lefthand corner of the screen  Syntax​  draw_text(string) draw_text(string, x, y, font_size) (display, clear)..  Parameters​  string string: The text that Zumi will show on the screen integer x: The x coordinate start value of the string, defaults to 1 integer y: The y coordinate start value of the string, defaults to 1 integer font_size: The font size of the string, defaults to 16 pixels  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() for i in range(10): screen.draw_text(str(i)+'!') time.sleep(0.1) screen.clear_display()     ","version":"Next","tagName":"h3"},{"title":"draw_triangle()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#draw_triangle","content":" Description​  Draws a triangle with 3 points (x1,y1), (x2,y2), (x3,y3): x1, y1, x2, y2, x3, y3.  Syntax​   draw_triangle(x1,y1,x2,y2,x3,y3) draw_triangle(x1,y1,x2,y2,x3,y3,fill_in=True):   Parameters​  integer x1: the x coordinate of point 1 integer y1: the y coordinate of point 1 integer x2: the x coordinate of point 2 integer y2: the y coordinate of point 2 integer x3: the x coordinate of point 3 integer y3: the y coordinate of point 3 boolean fill_in: Boolean that selects if the triangle will be filled in (white). Default to True.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen=Screen() screen.draw_triangle(0,10,20,50,50,0)     ","version":"Next","tagName":"h3"},{"title":"glimmer()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#glimmer","content":" Description​  Draws an animation of Zumi's eyes glimmering on the screen.  Syntax​  glimmer()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.glimmer()     ","version":"Next","tagName":"h3"},{"title":"happy()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#happy","content":" Description​  Draws an animation of Zumi's happy eyes.  Syntax​  happy()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.happy()     ","version":"Next","tagName":"h3"},{"title":"hello()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#hello","content":" Description​  Draws Zumi's default eyes on the screen.  Syntax​  hello()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.hello()     ","version":"Next","tagName":"h3"},{"title":"look_around_open()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#look_around_open","content":" Description​  Draws Zumi's eyes looking around left and right on the screen.  Syntax​  look_around_open()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.look_around_open()     ","version":"Next","tagName":"h3"},{"title":"look_around()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#look_around","content":" Description​  Makes zumi look around  Syntax​  look_around()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.look_around()     ","version":"Next","tagName":"h3"},{"title":"print()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#print","content":" Description​  Prints any number of strings on the screen.  Syntax​  print(*messages) print(*messages,x=0, y=0, fill_in=True,font_size=12)   Parameters​  string messages: Any number of strings that will print to the screen integer x: x coordinate of the string. Default to 0. integer y: y coordinate of the string. Default to 0. boolean fill_in: Boolean that selects if text will be white(True) or black (False). Default to True. integer font_size: Pixel size of the font. Default to 12.   Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.print(&quot;12345678&quot;) screen.print(&quot;hello&quot;, y=15) screen.print(&quot;\\n\\n&quot;,&quot;Zumi&quot;) time.sleep(1) screen.clear_drawing() screen.print(&quot;ZUMI&quot;,font_size=20)     ","version":"Next","tagName":"h3"},{"title":"sad()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#sad","content":" Description​  Draws Zumi's sad eyes on the screen.  Syntax​  sad()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.sad()     ","version":"Next","tagName":"h3"},{"title":"show_screen()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#show_screen","content":" Description​  Displays an image on Zumi's screen taken from Zumi's camera.  Syntax​  show_image(frame)   Parameters​  ndarray frame: A NumPy array representing a captured image  Returns​  None  Example Code​  from zumi.util.screen import Screen from zumi.util.camera import Camera camera.start_camera() # Turn on the camera image = camera.capture() # Take a picture camera.close() # Make sure to close the camera stream screen.show_image(image) # Display image on OLED     ","version":"Next","tagName":"h3"},{"title":"sleeping()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#sleeping","content":" Description​  Draws an animation of Zumi sleeping on the screen.  Syntax​  sleeping()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.sleeping()     ","version":"Next","tagName":"h3"},{"title":"sleepy_eyes()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#sleepy_eyes","content":" Description​  Draws Zumi's sleepy eyes on the screen.  Syntax​  sleepy_eyes()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.sleepy_eyes()     ","version":"Next","tagName":"h3"},{"title":"sleepy_left()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#sleepy_left","content":" Description​  Draws a sleepy left eye on the screen.  Syntax​  sleepy_left()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.sleepy_left()     ","version":"Next","tagName":"h3"},{"title":"sleepy_right()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#sleepy_right","content":" Description​  Draws a sleepy right eye on the screen.  Syntax​  sleepy_right()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.util.screen import Screen screen = Screen() screen.sleepy_right()     ","version":"Next","tagName":"h3"},{"title":"Personality​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#personality","content":" ","version":"Next","tagName":"h2"},{"title":"angry()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#angry-1","content":" Description​  Draws Zumi's angry eyes on the screen.  Syntax​  angry()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.angry()     ","version":"Next","tagName":"h3"},{"title":"awake()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#awake","content":" Description​  Draws Zumi opening her eyes with the wake up sound effect.  Syntax​  awake()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.awake()     ","version":"Next","tagName":"h3"},{"title":"celebrate()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#celebrate","content":" Description​  Makes Zumi celebrate.  Syntax​  celebrate()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.celebrate()     ","version":"Next","tagName":"h3"},{"title":"disoriented_left()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#disoriented_left","content":" Description​  Draws Zumi's eyes looking to the left with the disoriented sound effect.  Syntax​  disoriented_left()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.disoriented_left()     ","version":"Next","tagName":"h3"},{"title":"disoriented_right()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#disoriented_right","content":" Description​  Draws Zumi's eyes looking to the right with the disoriented sound effect.  Syntax​  disoriented_right()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.disoriented_right()     ","version":"Next","tagName":"h3"},{"title":"happy()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#happy-1","content":" Description​  Makes Zumi wiggle and make a happy sound.  Syntax​  happy()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.happy()     ","version":"Next","tagName":"h3"},{"title":"look_around_open()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#look_around_open-1","content":" Description​  Makes Zumi look around with wide open eyes.  Syntax​  look_around_open()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.look_around_open()     ","version":"Next","tagName":"h3"},{"title":"look_around()​","type":1,"pageTitle":"Function Documentation","url":"/ko/docs/Zumi/Python/Function-Documentation#look_around-1","content":" Description​  Makes Zumi look around.  Syntax​  look_around()   Parameters​  None  Returns​  None  Example Code​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.look_around()  ","version":"Next","tagName":"h3"}],"options":{"languages":["en","ko"],"excludeRoutes":["/docs/terms-of-use","/docs/privacy-policy","/docs/CoDroneEDU/Blockly/Offline-App-Documentation","/docs/CoDroneEDU/Python/What-is-Python","/docs/CoDroneEDU/Python/Webpy-Changelog","/docs/CoDroneEDU/Documents/Complete-User-and-Safety-Guide","/docs/CoDroneEDU/Documents/889-Compliance-Statement","/docs/CoDroneMini/Blockly/How-to-use-Blockly","/docs/CoDroneMini/Blockly/Offline-App-Documentation","/docs/CoDroneMini/Python/What-is-Python","/docs/CoDroneMini/Python/Updating-Library","/docs/Zumi/Blockly/What-is-Blockly","/docs/Zumi/Blockly/Blockly-Changelog","/docs/Zumi/Python/What-is-Python","/docs/Zumi/Python/Python-Changelog","/docs/CoDronePro_Lite/Blockly/What-is-Blockly","/docs/CoDronePro_Lite/Blockly/Offline-App-Documentation","/docs/CoDronePro_Lite/Blockly/Blockly-Changelog","/docs/CoDronePro_Lite/Python/What-is-Python","/docs/CoDronePro_Lite/Python/Setup-and-Installation","/docs/CoDronePro_Lite/Python/Update-Library","/docs/CoDronePro_Lite/Python/Python-Changelog","/docs/CoDronePro_Lite/Arduino/What-is-Arduino","/docs/CoDronePro_Lite/Arduino/Setup-and-Installation","/docs/CoDronePro_Lite/Arduino/Update-Library","/docs/CoDronePro_Lite/Arduino/Arduino-Changelog"],"id":"default"}}