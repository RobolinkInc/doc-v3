"use strict";(self.webpackChunkdoc_v_3=self.webpackChunkdoc_v_3||[]).push([[3948],{137:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>a});var i=r(4848),t=r(8453);const o={title:"Function Documentation",slug:"Function-Documentation",customHeadElements:['<link rel="manifest" href="manifest.json" />']},l=void 0,s={id:"CoDroneMini/Python/page4",title:"Function Documentation",description:"window.print()}>Print",source:"@site/docs/CoDroneMini/Python/page4.md",sourceDirName:"CoDroneMini/Python",slug:"/CoDroneMini/Python/Function-Documentation",permalink:"/docs/CoDroneMini/Python/Function-Documentation",draft:!1,unlisted:!1,editUrl:"https://github.com/RobolinkInc/doc-v3/tree/main/docs/docs/CoDroneMini/Python/page4.md",tags:[],version:"current",frontMatter:{title:"Function Documentation",slug:"Function-Documentation",customHeadElements:['<link rel="manifest" href="manifest.json" />']},sidebar:"CoDroneMini",previous:{title:"Setup and Installation",permalink:"/docs/CoDroneMini/Python/Setup-and-Installation"},next:{title:"Python Changelog",permalink:"/docs/CoDroneMini/Python/Python-Changelog"}},d={},a=[{value:"Connection",id:"connection",level:2},{value:"pair()",id:"pair",level:3},{value:"Description",id:"description",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example Code",id:"example-code",level:4},{value:"Python",id:"python",level:5},{value:"Flight Commands (Start/Stop)",id:"flight-commands-startstop",level:2},{value:"emergency_stop()",id:"emergency_stop",level:3},{value:"Description",id:"description-1",level:4},{value:"Syntax",id:"syntax-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example Code",id:"example-code-1",level:4},{value:"Python",id:"python-1",level:5},{value:"headless_off()",id:"headless_off",level:3},{value:"Description",id:"description-2",level:4},{value:"Syntax",id:"syntax-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example Code",id:"example-code-2",level:4},{value:"Python",id:"python-2",level:5},{value:"headless_on()",id:"headless_on",level:3},{value:"Description",id:"description-3",level:4},{value:"Syntax",id:"syntax-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example Code",id:"example-code-3",level:4},{value:"Python",id:"python-3",level:5},{value:"land()",id:"land",level:3},{value:"Description",id:"description-4",level:4},{value:"Syntax",id:"syntax-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example Code",id:"example-code-4",level:4},{value:"Python",id:"python-4",level:5},{value:"reset_sensor()",id:"reset_sensor",level:3},{value:"Description",id:"description-5",level:4},{value:"Syntax",id:"syntax-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example Code",id:"example-code-5",level:4},{value:"Python",id:"python-5",level:5},{value:"reset_trim()",id:"reset_trim",level:3},{value:"Description",id:"description-6",level:4},{value:"Syntax",id:"syntax-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example Code",id:"example-code-6",level:4},{value:"Python",id:"python-6",level:5},{value:"set_trim()",id:"set_trim",level:3},{value:"Description",id:"description-7",level:4},{value:"Syntax",id:"syntax-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example Code",id:"example-code-7",level:4},{value:"Python",id:"python-7",level:5},{value:"takeoff()",id:"takeoff",level:3},{value:"Description",id:"description-8",level:4},{value:"Syntax",id:"syntax-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example Code",id:"example-code-8",level:4},{value:"Python",id:"python-8",level:5},{value:"Flight Commands (Movement)",id:"flight-commands-movement",level:2},{value:"flip()",id:"flip",level:3},{value:"Description",id:"description-9",level:4},{value:"Syntax",id:"syntax-9",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example Code",id:"example-code-9",level:4},{value:"Python",id:"python-9",level:5},{value:"fly_sequence()",id:"fly_sequence",level:3},{value:"Description",id:"description-10",level:4},{value:"Syntax",id:"syntax-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Example Code",id:"example-code-10",level:4},{value:"Python",id:"python-10",level:5},{value:"go()",id:"go",level:3},{value:"Description",id:"description-11",level:4},{value:"Syntax",id:"syntax-11",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Example Code",id:"example-code-11",level:4},{value:"Python",id:"python-11",level:5},{value:"hover()",id:"hover",level:3},{value:"Description",id:"description-12",level:4},{value:"Syntax",id:"syntax-12",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Example Code",id:"example-code-12",level:4},{value:"Python",id:"python-12",level:5},{value:"turn()",id:"turn",level:3},{value:"Description",id:"description-13",level:4},{value:"Syntax",id:"syntax-13",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Example Code",id:"example-code-13",level:4},{value:"Python",id:"python-13",level:5},{value:"Flight Variables",id:"flight-variables",level:2},{value:"get_pitch()",id:"get_pitch",level:3},{value:"Description",id:"description-14",level:4},{value:"Syntax",id:"syntax-14",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Example Code",id:"example-code-14",level:4},{value:"Python",id:"python-14",level:5},{value:"get_roll()",id:"get_roll",level:3},{value:"Description",id:"description-15",level:4},{value:"Syntax",id:"syntax-15",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Example Code",id:"example-code-15",level:4},{value:"Python",id:"python-15",level:5},{value:"get_throttle()",id:"get_throttle",level:3},{value:"Description",id:"description-16",level:4},{value:"Syntax",id:"syntax-16",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Example Code",id:"example-code-16",level:4},{value:"Python",id:"python-16",level:5},{value:"get_yaw()",id:"get_yaw",level:3},{value:"Description",id:"description-17",level:4},{value:"Syntax",id:"syntax-17",level:4},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Example Code",id:"example-code-17",level:4},{value:"Python",id:"python-17",level:5},{value:"move()",id:"move",level:3},{value:"Description",id:"description-18",level:4},{value:"Syntax",id:"syntax-18",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Example Code",id:"example-code-18",level:4},{value:"Python",id:"python-18",level:5},{value:"set_pitch()",id:"set_pitch",level:3},{value:"Description",id:"description-19",level:4},{value:"Syntax",id:"syntax-19",level:4},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Example Code",id:"example-code-19",level:4},{value:"Python",id:"python-19",level:5},{value:"set_roll()",id:"set_roll",level:3},{value:"Description",id:"description-20",level:4},{value:"Syntax",id:"syntax-20",level:4},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Example Code",id:"example-code-20",level:4},{value:"Python",id:"python-20",level:5},{value:"set_throttle()",id:"set_throttle",level:3},{value:"Description",id:"description-21",level:4},{value:"Syntax",id:"syntax-21",level:4},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Example Code",id:"example-code-21",level:4},{value:"Python",id:"python-21",level:5},{value:"set_yaw()",id:"set_yaw",level:3},{value:"Description",id:"description-22",level:4},{value:"Syntax",id:"syntax-22",level:4},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Example Code",id:"example-code-22",level:4},{value:"Python",id:"python-22",level:5},{value:"LED-and-Buzzer",id:"led-and-buzzer",level:2},{value:"LED_color()",id:"led_color",level:3},{value:"Description",id:"description-23",level:4},{value:"Syntax",id:"syntax-23",level:4},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Example Code",id:"example-code-23",level:4},{value:"Python",id:"python-23",level:5},{value:"LED_pattern()",id:"led_pattern",level:3},{value:"Description",id:"description-24",level:4},{value:"Syntax",id:"syntax-24",level:4},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Example Code",id:"example-code-24",level:4},{value:"Python",id:"python-24",level:5},{value:"play_note()",id:"play_note",level:3},{value:"Description",id:"description-25",level:4},{value:"Syntax",id:"syntax-25",level:4},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Example Code",id:"example-code-25",level:4},{value:"Python",id:"python-25",level:5},{value:"reset_LED()",id:"reset_led",level:3},{value:"Description",id:"description-26",level:4},{value:"Syntax",id:"syntax-26",level:4},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Example Code",id:"example-code-26",level:4},{value:"Python",id:"python-26",level:5},{value:"turn_off_LED()",id:"turn_off_led",level:3},{value:"Description",id:"description-27",level:4},{value:"Syntax",id:"syntax-27",level:4},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Example Code",id:"example-code-27",level:4},{value:"Python",id:"python-27",level:5},{value:"Sensors",id:"sensors",level:2},{value:"get_altitude()",id:"get_altitude",level:3},{value:"Description",id:"description-28",level:4},{value:"Syntax",id:"syntax-28",level:4},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Example Code",id:"example-code-28",level:4},{value:"Python",id:"python-28",level:5},{value:"get_angle()",id:"get_angle",level:3},{value:"Description",id:"description-29",level:4},{value:"Syntax",id:"syntax-29",level:4},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Example Code",id:"example-code-29",level:4},{value:"Python",id:"python-29",level:5},{value:"get_battery_percentage()",id:"get_battery_percentage",level:3},{value:"Description",id:"description-30",level:4},{value:"Syntax",id:"syntax-30",level:4},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Example Code",id:"example-code-30",level:4},{value:"Python",id:"python-30",level:5},{value:"get_drone_temp()",id:"get_drone_temp",level:3},{value:"Description",id:"description-31",level:4},{value:"Syntax",id:"syntax-31",level:4},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Example Code",id:"example-code-31",level:4},{value:"Python",id:"python-31",level:5},{value:"get_height()",id:"get_height",level:3},{value:"Description",id:"description-32",level:4},{value:"Syntax",id:"syntax-32",level:4},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Example Code",id:"example-code-32",level:4},{value:"Python",id:"python-32",level:5},{value:"get_pressure()",id:"get_pressure",level:3},{value:"Description",id:"description-33",level:4},{value:"Syntax",id:"syntax-33",level:4},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Example Code",id:"example-code-33",level:4},{value:"Python",id:"python-33",level:5},{value:"get_trim()",id:"get_trim",level:3},{value:"Description",id:"description-34",level:4},{value:"Syntax",id:"syntax-34",level:4},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Example Code",id:"example-code-34",level:4},{value:"Python",id:"python-34",level:5}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("div",{className:"print_div",children:(0,i.jsx)("button",{id:"print_page",onClick:()=>window.print(),children:"Print"})}),"\n",(0,i.jsx)("div",{className:"change_version",children:(0,i.jsxs)(n.p,{children:["version 1.1.3 (",(0,i.jsx)(n.a,{href:"/docs/CoDroneMini/Python/Python-Changelog",children:"Changelog"}),")"]})}),"\n",(0,i.jsx)(n.h2,{id:"connection",children:"Connection"}),"\n",(0,i.jsx)(n.h3,{id:"pair",children:"pair()"}),"\n",(0,i.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function connects your controller with the program. You can set debug equal to True if you want to see helpful print statements that can help you debug your code. We recommend setting this to True to check if commands are being skipped. You can also set the specific USB port name."}),"\n",(0,i.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pair()"}),"  ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"pair(port_name)"})," ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"pair(debug=False)"})," ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"pair(debug=False, port_name)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"string"})," port_name:"]})," the port name or number.",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"boolean"})," debug:"]})," Defaults to False. True to see helpful print statements for debugging"]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()   # pair automatically, may not always work\n# drone.pair(debug=True) # sets the debug statements to True\n# drone.pair(port_name = 'COM3')    # pair with a specific port\n\ndrone.takeoff()\ndrone.hover(3)\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"flight-commands-startstop",children:"Flight Commands (Start/Stop)"}),"\n",(0,i.jsx)(n.h3,{id:"emergency_stop",children:"emergency_stop()"}),"\n",(0,i.jsx)(n.h4,{id:"description-1",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function immediately stops all commands and motors, so the drone will stop flying immediately. The function will also reset the flight motion variables to 0. ",(0,i.jsx)(n.strong,{children:"NOTE:"})," If you want to take off and emergency stop, it is recommended to run a ",(0,i.jsx)(n.code,{children:"hover()"})," or ",(0,i.jsx)(n.code,{children:"time.sleep()"})," in between the ",(0,i.jsx)(n.code,{children:"takeoff()"})," and ",(0,i.jsx)(n.code,{children:"emergency_stop()"}),", because the CoDrone Mini might miss the emergency_stop() command."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"emergency_stop()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-1",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-1",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nimport time\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ndrone.takeoff()\ndrone.hover(3) #Recommended to have a hover() or time.sleep(1) before landing\ndrone.emergency_stop()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"headless_off",children:"headless_off()"}),"\n",(0,i.jsx)(n.h4,{id:"description-2",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:'This function turns off headless mode. In this mode, the drone is keeping track of which direction it\'s facing and will fly relative to which direction it is facing. Remember that the "front" is denoted by the red line on the shell.'}),"\n",(0,i.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"headless_off()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-2",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-2",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nimport time\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.headless_on() # Run the code once, then switch to headless_off() and run again to see the difference.\n\ndrone.takeoff()\ndrone.set_yaw(20)\ndrone.move(1)\ndrone.set_yaw(0)\ndrone.set_pitch(40)\ndrone.move(1)\n\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"headless_on",children:"headless_on()"}),"\n",(0,i.jsx)(n.h4,{id:"description-3",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function turns on headless mode, meaning that no matter in which direction the drone is facing, it will fly in the directions relative to you. This is ideal for long range drones."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"headless_on()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-3",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-3",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nimport time\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.headless_on() # Run the code once, then switch to headless_off() and run again to see the difference.\n\ndrone.takeoff()\ndrone.set_yaw(20)\ndrone.move(1)\ndrone.set_yaw(0)\ndrone.set_pitch(40)\ndrone.move(1)\n\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"land",children:"land()"}),"\n",(0,i.jsx)(n.h4,{id:"description-4",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function makes the drone stop all commands, hover, and make a soft landing where it is. The function will also reset the flight motion variables to 0. ",(0,i.jsx)(n.strong,{children:"NOTE:"})," If you want to take off and immediately land, it is recommended to run a ",(0,i.jsx)(n.code,{children:"hover()"})," or ",(0,i.jsx)(n.code,{children:"time.sleep()"})," in between the ",(0,i.jsx)(n.code,{children:"takeoff()"})," and ",(0,i.jsx)(n.code,{children:"land()"}),", because the CoDrone Mini will often miss the land command otherwise."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"land()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-4",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-4",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nimport time\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ndrone.takeoff()\ndrone.hover(3) # include a hover() or time.sleep() to prevent land() from skipping\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"reset_sensor",children:"reset_sensor()"}),"\n",(0,i.jsx)(n.h4,{id:"description-5",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function will reset the gyro angles back to zero for roll, pitch, and yaw. NOTE: If you're resetting right before a takeoff, make sure to add a ",(0,i.jsx)(n.code,{children:"time.sleep(1)"})," before the ",(0,i.jsx)(n.code,{children:"takeoff()"}),",  otherwise the take off might be skipped."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"reset_sensor()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-5",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-5",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone_mini\nimport time\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\nprint("Before ", drone.get_angle())\ndrone.takeoff()\ndrone.set_yaw(50)\ndrone.move(1)\ndrone.land()\nprint("After ",drone.get_angle())\ndrone.reset_sensor() \nprint("Reset ", drone.get_angle())\ndrone.close()\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"reset_trim",children:"reset_trim()"}),"\n",(0,i.jsx)(n.h4,{id:"description-6",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["You can reset the roll and pitch trim of the drone in case your drone is drifting. This function will reset the roll and pitch trim values back to zero. NOTE: If you're resetting the trim right before a takeoff, make sure to add a ",(0,i.jsx)(n.code,{children:"time.sleep(1)"})," before the ",(0,i.jsx)(n.code,{children:"takeoff()"}),", otherwise the take off might be skipped."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"reset_trim()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-6",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-6",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nimport time\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ndrone.set_trim(5,0)\nprint(drone.get_trim())\ndrone.takeoff()\ndrone.hover(3)\ndrone.land()\ndrone.reset_trim() \nprint(drone.get_trim())\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"set_trim",children:"set_trim()"}),"\n",(0,i.jsx)(n.h4,{id:"description-7",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["You can set the ",(0,i.jsx)(n.strong,{children:"roll"})," and ",(0,i.jsx)(n.strong,{children:"pitch"})," trim of the drone in case your drone is drifting. For example, if the drone is drifting to its right, you may want to set the roll to a small negative value. This trim will remain saved, even after powering off until you've changed the trim either programmatically, or done a reset with the remote. ",(0,i.jsx)(n.strong,{children:"NOTE:"})," If you're setting the trim right before a takeoff, make sure to add a ",(0,i.jsx)(n.code,{children:"time.sleep(1)"})," before the ",(0,i.jsx)(n.code,{children:"takeoff()"}),", otherwise the takeoff commmand might be skipped."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"set_trim(roll, pitch)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," roll:"]})," the power of the roll, which is from -100 to 100",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," pitch:"]})," the power of the pitch, which is from -100 to 100",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-7",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-7",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nimport time\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.set_trim(-1, 0) # example: drone is drifting right, so trim to roll left a little bit\n\ntime.sleep(1)       # Add a time.sleep(1) before takeoff if you're planning to set the trim before takeoff\ndrone.takeoff()\ndrone.hover(3)\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"takeoff",children:"takeoff()"}),"\n",(0,i.jsx)(n.h4,{id:"description-8",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function makes the drone takeoff and hover.",(0,i.jsx)("br",{}),"\nThe drone will always hover for 3 seconds in order to stabilize before it executes the next command.",(0,i.jsx)("br",{}),"\nIf it receives no command for 8 seconds, it will automatically land."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-8",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"takeoff()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-8",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-8",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\t\ndrone.hover(3)\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"flight-commands-movement",children:"Flight Commands (Movement)"}),"\n",(0,i.jsx)(n.h3,{id:"flip",children:"flip()"}),"\n",(0,i.jsx)(n.h4,{id:"description-9",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function makes the drone do a flip in one of four directions: ",(0,i.jsx)(n.strong,{children:"forward"}),", ",(0,i.jsx)(n.strong,{children:"backward"}),", ",(0,i.jsx)(n.strong,{children:"left"}),", or ",(0,i.jsx)(n.strong,{children:"right"}),". It's recommended that you wait a few seconds in between successive flips, otherwise the sequence may not appear as expected."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-9",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"flip(direction)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"enum Direction:"})," Direction.FORWARD, Direction.BACKWARD, Direction.LEFT, Direction.RIGHT"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-9",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-9",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nimport time\nfrom CoDrone_mini import Direction\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\ndrone.flip(Direction.FORWARD)\t\ntime.sleep(3) # recommended wait time between flips\ndrone.flip(Direction.LEFT)\t\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"fly_sequence",children:"fly_sequence()"}),"\n",(0,i.jsx)(n.h4,{id:"description-10",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function makes the drone fly in a pre-determined shape. The options are ",(0,i.jsx)(n.strong,{children:"square"}),", ",(0,i.jsx)(n.strong,{children:"spiral"}),", ",(0,i.jsx)(n.strong,{children:"triangle"}),", ",(0,i.jsx)(n.strong,{children:"hop"}),", ",(0,i.jsx)(n.strong,{children:"sway"}),", and ",(0,i.jsx)(n.strong,{children:"zigzag"}),". It's recommended that you ",(0,i.jsx)(n.strong,{children:"make sure the drone is trimmed and hovering stably"})," before running a sequence, otherwise the sequence may not appear as expected."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-10",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"fly_sequence(sequence)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"enum"})," Sequence:"]})," SQUARE, SPIRAL, TRIANGLE, HOP, SWAY, ZIGZAG"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-10",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-10",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nfrom CoDrone_mini import Sequence\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\ndrone.fly_sequence(Sequence.ZIGZAG) # Fly zigzag (move left and right 2 times each while move forward)\ndrone.fly_sequence(Sequence.SPIRAL)     # Fly Spiral shape\ndrone.fly_sequence(Sequence.SQUARE)     # Fly square shape\n\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"go",children:"go()"}),"\n",(0,i.jsx)(n.h4,{id:"description-11",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"A simpler Junior level function that represents flight with direction with more natural language.\nIt simply flies in the given direction for a given duration and power."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-11",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"go(direction)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"go(direction, duration)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"go(direction, duration, power)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"enum"})," Direction:"]})," an enum in Python. It\u2019s the direction of the flight, which can be one of the following: FORWARD, BACKWARD, LEFT, RIGHT, UP, and DOWN.",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," duration:"]})," the duration of the flight motion in seconds. If undefined, defaults to run indefinitely.",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," power:"]})," the power at which the drone flies forward. Takes a value from 0 to 100. Defaults to 50 if not defined."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-11",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-11",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nfrom CoDrone_mini import Direction\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\n# Try each of these commands by uncommenting them\n#drone.go(Direction.FORWARD)        # Go forward indefinitely at 50% power\n#drone.go(Direction.UP, 2)          # Go up for 5 seconds at 50% power\ndrone.go(Direction.BACKWARD, 3, 40) # Go backwards for 3 seconds at 70% power\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"hover",children:"hover()"}),"\n",(0,i.jsx)(n.h4,{id:"description-12",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function makes the drone hover for a given amount of time. ",(0,i.jsx)("br",{}),"\nIf given no parameters, it will hover indefinitely until given a another command."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-12",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"hover(duration)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," duration:"]})," the duration of the hovering in seconds.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-12",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-12",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\t\ndrone.hover(3)   # hover for 3 seconds\n#drone.hover()   # hover indefinitely \ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"turn",children:"turn()"}),"\n",(0,i.jsx)(n.h4,{id:"description-13",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"A function that represents yaw, but with more natural language. It turns CoDrone Mini in the given direction, with the given duration and power."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-13",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"turn(direction)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"turn(direction, duration)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"turn(direction, duration, power)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"enum"})," Direction:"]})," an enum in Python. It\u2019s the direction of the turn, which can either ",(0,i.jsx)(n.code,{children:"LEFT"})," or ",(0,i.jsx)(n.code,{children:"RIGHT"}),".",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," duration:"]})," the duration of the turn in seconds. If 0, it will turn default to turn indefinitely.",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," power:"]})," the power at which the drone turns right. Takes a value from 0 to 100. Defaults to 50 if not defined."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-13",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-13",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-13",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nfrom CoDrone_mini import Direction\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\t\ndrone.turn(Direction.LEFT)          # Turn left indefinitely at 50 power\ndrone.turn(Direction.RIGHT, 3, 100) # Turn right for 3 seconds at 100 power\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"flight-variables",children:"Flight Variables"}),"\n",(0,i.jsx)(n.h3,{id:"get_pitch",children:"get_pitch()"}),"\n",(0,i.jsx)(n.h4,{id:"description-14",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a getter function that gets the value of the ",(0,i.jsx)(n.strong,{children:"pitch"})," variable."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-14",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_pitch()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-14",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," power:"]})," The power of the pitch variable"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-14",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-14",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\n# Print current pitch with getter function\nprint("Current pitch : ", drone.get_pitch())\ndrone.close()\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"get_roll",children:"get_roll()"}),"\n",(0,i.jsx)(n.h4,{id:"description-15",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a getter function that gets the value of the ",(0,i.jsx)(n.strong,{children:"roll"})," variable."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-15",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_roll()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-15",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," power:"]})," The power of the roll variable"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-15",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-15",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone_mini\n\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\n# Print current roll with getter function\nprint("Current Roll : ", drone.get_roll())\ndrone.close()\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"get_throttle",children:"get_throttle()"}),"\n",(0,i.jsx)(n.h4,{id:"description-16",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a getter function that gets the value of the ",(0,i.jsx)(n.strong,{children:"throttle"})," variable."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-16",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_throttle()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-16",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," power:"]})," The power of the throttle variable"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-16",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-16",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\n# Print current throttle with getter function\nprint("Current throttle : ", drone.get_throttle())\ndrone.close()\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"get_yaw",children:"get_yaw()"}),"\n",(0,i.jsx)(n.h4,{id:"description-17",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a getter function that gets the value of the ",(0,i.jsx)(n.strong,{children:"yaw"})," variable."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-17",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_yaw()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-17",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," power:"]})," The power of the yaw variable"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-17",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-17",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\n# Print current yaw with getter function\nprint("Current yaw : ", drone.get_yaw())\ndrone.close()\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"move",children:"move()"}),"\n",(0,i.jsx)(n.h4,{id:"description-18",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["You can use this function to create more complex flight movements. With no parameters, ",(0,i.jsx)(n.code,{children:"move()"})," will just run based on whatever the flight variables have been set to with functions like ",(0,i.jsx)(n.code,{children:"setPitch()"})," and ",(0,i.jsx)(n.code,{children:"setThrottle()"})," indefinitely.  You can also run it for a certain duration.  The function also takes multiple parameters, where you can set roll, pitch, yaw, and throttle all at once.  You can run it infinitely with 4 parameters, or you can run it for a given duration with 5 parameters. If the drone is not flying, nothing will happen. You must takeoff() first to use a move() function."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-18",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"move()"}),": runs indefinitely",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"move(duration)"}),": runs the given number of seconds",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"move(roll, pitch, yaw, throttle)"}),": runs indefinitely",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"move(duration, roll, pitch, yaw, throttle)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," duration:"]})," the duration of the flight motion in seconds.",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," roll:"]})," the power of the roll, which is from -100 to 100",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," pitch:"]})," the power of the pitch, which is from -100 to 100",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," yaw:"]})," the power of the yaw, which is from -100 to 100",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," throttle:"]})," the power of the throttle, which is from -100 to 100"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-18",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-18",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-18",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\ndrone.set_pitch(20)\ndrone.move(5)                   # Move 5 seconds based on the current value of flight variables\ndrone.move()                    # Move indefinitely based on the current value of flight variables\n\ndrone.set_pitch(0)              # Set pitch back to 0 for the remaining examples\ndrone.move(5, 0, 0, 80, 80)     # Move up(throttle) and turn left(yaw) for 5 seconds\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"set_pitch",children:"set_pitch()"}),"\n",(0,i.jsx)(n.h4,{id:"description-19",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a setter function that allows you to set the ",(0,i.jsx)(n.strong,{children:"pitch"})," variable. Once you set pitch, you have to use ",(0,i.jsx)(n.code,{children:"move()"})," to actually execute the movement. The pitch variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to pitch again."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-19",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"set_pitch(power)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," power:"]})," Sets the pitch variable, between -100 and 100. The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-19",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-19",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-19",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\n# Drone goes right for 1 second with 50 power\ndrone.set_pitch(50)\ndrone.move(1)               #use move() to execute the movement for 1 second\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"set_roll",children:"set_roll()"}),"\n",(0,i.jsx)(n.h4,{id:"description-20",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a setter function that allows you to set the ",(0,i.jsx)(n.strong,{children:"roll"})," variable. Once you set roll, you have to use ",(0,i.jsx)(n.code,{children:"move()"})," to actually execute the movement. The roll variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to roll again."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-20",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"set_roll(power)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," power:"]})," Sets the roll variable, between -100 and 100. The number represents the direction and power of the output for that flight motion variable. Negative roll is left, positive roll is right."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-20",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-20",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-20",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\n# Drone goes right for 1 second with 50 power\ndrone.set_roll(50)\ndrone.move(1)           #use move() to execute the movement for 1 second\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"set_throttle",children:"set_throttle()"}),"\n",(0,i.jsx)(n.h4,{id:"description-21",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a setter function that allows you to set the ",(0,i.jsx)(n.strong,{children:"throttle"})," variable. Once you set throttle, you have to use ",(0,i.jsx)(n.code,{children:"move()"})," to actually execute the movement. The throttle variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to throttle again."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-21",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"set_throttle(power)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-21",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," power:"]})," Sets the throttle variable, between -100 and 100.. The number represents the direction and power of the output for that flight motion variable. Negative throttle descends, positive throttle ascends."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-21",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-21",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-21",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\n# Drone goes up for 1 second with 50% power\ndrone.set_throttle(50)\ndrone.move(1)               #use move() to execute the movement for 1 second\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"set_yaw",children:"set_yaw()"}),"\n",(0,i.jsx)(n.h4,{id:"description-22",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a setter function that allows you to set the ",(0,i.jsx)(n.strong,{children:"yaw"})," variable. Once you set yaw, you have to use ",(0,i.jsx)(n.code,{children:"move()"})," to actually execute the movement. The yaw variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to yaw again."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-22",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"set_yaw(power)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-22",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," power:"]})," Sets the pitch variable, between -100 and 100. The number represents the direction and power of the output for that flight motion variable. Negative yaw turns left, positive yaw turns right."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-22",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-22",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-22",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\n\n# Drone turns right for 1 second with 50% power\ndrone.set_yaw(50)\ndrone.move(1)           #use move() to execute the movement for 1 second\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"led-and-buzzer",children:"LED-and-Buzzer"}),"\n",(0,i.jsx)(n.h3,{id:"led_color",children:"LED_color()"}),"\n",(0,i.jsx)(n.h4,{id:"description-23",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function sets the LED color of the CoDrone Mini's LED using RGB values and their brightness with a value from 1 - 100. ",(0,i.jsx)(n.strong,{children:"NOTE:"})," If you're setting the LED right before a takeoff, make sure to add a ",(0,i.jsx)(n.code,{children:"time.sleep(1)"})," before the ",(0,i.jsx)(n.code,{children:"takeoff()"}),", otherwise the take off might be skipped."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-23",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"LED_color(red, green, blue, brightness)"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-23",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," red:"]})," the pixel value for the color red from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," green:"]})," the pixel value for the color green from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," blue:"]})," the pixel value for the color blue from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," brightness:"]})," the brightness of the LEDs from 0 to 100",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"returns-23",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-23",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-23",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nimport time\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.LED_color(255, 0, 0, 100)        # set LED color to red using RGB\n\ntime.sleep(1)       # Add a time.sleep(1) before takeoff if you're planning to set the LED cover before takeoff, otherwise the takeoff might get missed\ndrone.takeoff()\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"led_pattern",children:"LED_pattern()"}),"\n",(0,i.jsx)(n.h4,{id:"description-24",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the color of CoDrone mini LED light and makes it flash in a particular pre-set pattern at a given speed."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-24",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"LED_pattern(red, green, blue, mode)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"LED_pattern(red, green, blue, mode, speed)"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-24",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," red:"]})," the pixel value for the color red from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," green:"]})," the pixel value for the color green from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," blue:"]})," the pixel value for the color blue from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"enum Mode:"})," an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, PULSE, FADE_IN, FADE_OUT",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," speed:"]})," the speed of the lighting pattern from 1 to 10. 1 is slowest, 10 is fastest. Default value is 5.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"returns-24",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-24",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-24",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nfrom CoDrone_mini import Mode\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\ntime.sleep(1) # to prevent skipping the LED command\ndrone.LED_pattern(0, 100, 0, Mode.PULSE, 5)\ndrone.close() \n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"play_note",children:"play_note()"}),"\n",(0,i.jsx)(n.h4,{id:"description-25",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function allows you to program the buzzer on the remote, not the drone. ",(0,i.jsx)("br",{}),"\nThis function takes two parameters. The first is the note or frequency desired. The second parameter is how long you want the note to play in ",(0,i.jsx)(n.strong,{children:"seconds"}),". The Note class must be imported to use this function."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-25",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"play_note(note, duration)"}),"\n",(0,i.jsx)(n.code,{children:"play_note(frequency, duration)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-25",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"enum"})," Note:"]})," the note of the buzzer based off of the given Note value from Note.C3 to Note.B7",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," frequency:"]})," the note of the buzzer based off of the given frequency in Hertz",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"float"})," duration:"]})," The duration of the note in seconds",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"returns-25",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-25",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-25",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nfrom CoDrone_mini import Note\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.play_note(Note.C4, 0.5)\ndrone.play_note(Note.D4, 0.5)\ndrone.play_note(Note.E4, 0.5)\ndrone.play_note(Note.F4, 0.5)\ndrone.play_note(Note.G4, 0.5)\n\ndrone.play_note(440,0.5) # 440 Hz is Note.C4\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"reset_led",children:"reset_LED()"}),"\n",(0,i.jsx)(n.h4,{id:"description-26",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the LED color back to red and sets the mode to SOLID, which is the original default color and pattern."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-26",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"reset_LED()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-26",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-26",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-26",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-26",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.reset_LED()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"turn_off_led",children:"turn_off_LED()"}),"\n",(0,i.jsx)(n.h4,{id:"description-27",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function turns off the LED."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-27",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"turn_off_LED()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-27",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-27",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-27",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-27",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.turn_off_LED()\n\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"sensors",children:"Sensors"}),"\n",(0,i.jsx)(n.h3,{id:"get_altitude",children:"get_altitude()"}),"\n",(0,i.jsx)(n.h4,{id:"description-28",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a getter function which returns the current ",(0,i.jsx)(n.strong,{children:"altitude"})," of the drone. ",(0,i.jsx)("br",{}),'\nIt uses air pressure from the barometer sensor to estimate the altitude. This function returns the absolute altitude between the drone\'s current position and "sea level", not the floor.']}),"\n",(0,i.jsx)(n.h4,{id:"syntax-28",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_altitude()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-28",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-28",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"float"})," altitude:"]})," The current height calculated by the difference between the current and the floor altitude (cm)."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-28",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-28",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\naltitude = drone.get_altitude()\nprint(altitude)\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"get_angle",children:"get_angle()"}),"\n",(0,i.jsx)(n.h4,{id:"description-29",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function gets the ",(0,i.jsx)(n.strong,{children:"roll, pitch, and yaw angles"})," from the gyrometer sensor."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-29",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_angle()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-29",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-29",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"List Object"})," angles:"]})," A list object with ROLL, PITCH, and YAW properties."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-29",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-29",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\n# print the angle values\nangle  = drone.get_angle()\nprint(angle)\nprint(angle.ROLL, angle.PITCH, angle.YAW)\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"get_battery_percentage",children:"get_battery_percentage()"}),"\n",(0,i.jsx)(n.h4,{id:"description-30",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function gets the battery percentage of the drone, returning a value from 0 to 100."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-30",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_battery_percentage()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-30",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-30",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," percentage:"]})," the battery's percentage from 0 - 100"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-30",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-30",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\nbattery = drone.get_battery_percentage()\nprint(battery)\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"get_drone_temp",children:"get_drone_temp()"}),"\n",(0,i.jsx)(n.h4,{id:"description-31",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a getter function gets the drone's ",(0,i.jsx)(n.strong,{children:"temperature"})," from the barometer.",(0,i.jsx)("br",{}),"\nThe sensor reads the drone\u2019s temperature, not the air around it."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-31",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_drone_temp()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-31",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-31",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"integer"})," temperature:"]})," the temperature in Celsius as an integer."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-31",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-31",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\nimport time\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\n# print the temperature\ntime.sleep(1) # to prevent skipping for an accurate reading\ntemperature  = drone.get_drone_temp()\nprint(temperature)\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"get_height",children:"get_height()"}),"\n",(0,i.jsx)(n.h4,{id:"description-32",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a getter function which returns the current ",(0,i.jsx)(n.strong,{children:"height"})," of the drone. ",(0,i.jsx)("br",{}),"\nIt checks sea level from the barometer sensor first and then the altitude from the floor right after it is paired. This function returns the distance between the drone's current position and the floor or any surface below from where it took off from."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-32",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_height()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-32",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-32",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"float"})," height:"]})," the current height calculated by the difference between the current and the floor altitude(cm)."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-32",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-32",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\ndrone.hover(3)\nheight = drone.get_height()\nprint(height)\ndrone.land()\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"get_pressure",children:"get_pressure()"}),"\n",(0,i.jsx)(n.h4,{id:"description-33",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This is a getter function that returns the data from the barometer. The function returns a value in the unit Pascals. ",(0,i.jsx)(n.strong,{children:"Note:"})," 1 atm = 101325 Pa"]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-33",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_pressure()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-33",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-33",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"float"})," pressure:"]})," The air pressure of the drone in Pascals."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-33",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-33",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\n# print the pressure\npressure = drone.get_pressure()\nprint(pressure)\ndrone.close()\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"get_trim",children:"get_trim()"}),"\n",(0,i.jsx)(n.h4,{id:"description-34",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function gets the current trim values of the drone."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-34",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"get_trim()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-34",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-34",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"List Object"})," trim values:"]})," A list object with ROLL, PITCH, YAW, and THROTTLE properties"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-34",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"python-34",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone_mini\n\ndrone = CoDrone_mini.CoDrone()\ndrone.pair()\n\n# print the pressure\ntrim  = drone.get_trim()\nprint(trim)\nprint(trim.ROLL, trim.PITCH, trim.YAW, trim.THROTTLE)\ndrone.close()\n"})})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>s});var i=r(6540);const t={},o=i.createContext(t);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);