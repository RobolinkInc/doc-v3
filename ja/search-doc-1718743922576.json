{"searchDocs":[{"title":"CoDrone EDU","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/","content":"CoDrone EDU CoDrone EDU CoDrone EDUの旅へようこそです。CoDrone EDUはプログラミング可能なドローンで、教室での学習を目的としています。 Pythonでコーディングするか、ブロックベースのコーディングで基本から始めます。 下のタブをクリックしてページに移動します。 Blockly Python Documents","keywords":"","version":"Next"},{"title":"Offline App Documentation","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Blockly/page2","content":"Offline App Documentation Offline App Documentation​ Requirements​ Windows, MacOS, or Chromebook computer with accessible USB port for serial communicationChrome browser and a Google accountCoDrone EDU with battery, Smart Controller, and the included Micro USB cable Steps to set up​ Connect to the internet and open the Chrome browser. Go to codrone.robolink.com and select CoDrone EDU. Check the browser URL for an icon to install the app. You may need to wait a few seconds. If the icon is not appearing, check that you are not using a guest account. A pop-up window will appear to install the Chrome App. The app should open immediately and appear in the Dock (Mac) or Taskbar (Windows). Right click to pin it to your dock or taskbar. If the app does not open automatically, check your Chrome Apps or Applications Mission Control (Mac). On Windows, it will be under your Start Menu Programs. Use the Windows start menu and type “Blockly for Robolink”. Below is the file location. When it opens, it should look just like the browser page. Pair to Blockly with your controller the same way you would with Blockly in the browser. Run a takeoff and land testOpen all the tabs on the right side (Lessons, Python, Sensors, Docs)Use any features as you normally would in class or competition practice Close the app and turn off your WiFi connection. Then, open a browser and try to navigate to a website to verify that your computer is offline. Mac: Windows: Pair to Blockly again with your controller the same way you would with Blockly in the browser and run the same tests as before.","keywords":"","version":"Next"},{"title":"Junior Block Documentation","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Blockly/page3","content":"Junior Block Documentation Print Flight Commands​ take off​ Block​ Parameters​ None Description​ This functions makes the drone take off. CoDrone EDU takes off at an average height of 1 meter off the ground. A takeoff block must be used before any other flight command or flight movement. Returns​ None Example​ land​ Block​ Parameters​ None Description​ This function makes the drone land by throttling down safely. Returns​ None Example​ emergency stop​ Block​ Parameters​ None Description​ This function stops all motors immediately. Use with caution to avoid damaging your drone. Returns​ None Example​ hover for [seconds] seconds​ Block​ Parameters​ duration: positive integer in seconds Description​ This function makes the drone hover in place for a given duration in seconds. Returns​ None Example​ go [direction] for [seconds] seconds at [power] % power​ Block​ Parameters​ direction: forward, backward, up, down, left, right duration: positive integer in seconds power: positive integer between 0 and 100 Description​ This function flies the drone in a direction for a given duration and a power percentage. Returns​ None Example​ turn [direction] [degrees] degrees​ Block​ Parameters​ direction: left, right degrees: integer from -180 to +180 Description​ Turns CoDrone EDU to the left or to the right a given number of degrees. Returns​ None Example​ turn [direction] for [seconds] seconds at [power]% power​ Block​ Parameters​ direction: left, right duration: positive integer in seconds power: integer between 0 and 100 Description​ Turns CoDrone EDU to the left or to the right for a duration in seconds at a percentange of power. Returns​ None Example​ Flight Sequences​ flip [direction]​ Block​ Parameters​ direction: back, front, right, left Description​ This functions makes the drone flip back, front, right, or left. Make sure your battery percentage is over 50% for the flip to execute. Returns​ None Example​ Add a hover or delay block after the flip if you need to stabilize before your next command. The drone takes 3-4 seconds after a flip before it can do another flight command. Status Checkers​ code is running​ Block​ Parameters​ None Description​ Returns a True value while your code is running. Use this block instead of &quot;while True&quot; when you want to run a &quot;forever&quot; loop. Use the &quot;Stop&quot; button in Blockly to stop the program. Returns​ boolean: returns true if program is running, false if user presses &quot;Stop&quot; Example​ This example cycles the colors from red, green, blue forever. Pressing the &quot;Stop&quot; will interrupt the while loop and stop the program. Lights​ set drone LED color to [color], with a brightness of [brightness]​ Block​ Parameters​ color: select a color from the color palette brightness: positive integer between 0 and 255 Description​ Sets the color and brightness of the CoDrone EDU drone LED. Returns​ None Example​ turn drone LED off​ Block​ Parameters​ None Description​ Turns off the CoDrone EDU drone LED. Returns​ None Example​ set controller LED to [color], with a brightness of [brightness]​ Block​ Parameters​ color: select a color from the color palette brightness: positive integer between 0 and 255 Description​ Sets the color and brightness of the CoDrone EDU controller LED. Returns​ None Example​ turn controller LED off​ Block​ Parameters​ None Description​ Turns off the CoDrone EDU controller LED. Returns​ None Example​ Sound​ play this note [note] for [duration] seconds on drone​ Block​ Parameters​ note: note range from C3 to B7, Mute, Fin duration: positive integer in seconds Description​ Plays a note for a duration in seconds using the CoDrone EDU drone buzzer. Returns​ None Example​ play this note [note] for [duration] seconds on controller​ Block​ Parameters​ note: note range from C3 to B7, Mute, Fin duration: positive integer in seconds Description​ Plays a note for a duration in seconds using the CoDrone EDU controller buzzer. Returns​ None Example​","keywords":"","version":"Next"},{"title":"Blockly","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Blockly/","content":"Blockly Blockly What is Blockly? Offline App Documentation Junior Block Documentation Senior Block Documentation Blockly Changelog","keywords":"","version":"Next"},{"title":"Blocklyとは何ですか？","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Blockly/page1","content":"Blocklyとは何ですか？ Blocklyとは何ですか？​ ドラッグアンドドロップブロックを使用したコーディングの基礎をビジュアルプログラミング言語で学習します。 ここは初心者のプログラマやドローンパイロットにとって素晴らしい出発点です。 Blocklyは、PythonをベースにしたRobolinkのブロックコーディングプログラムです。 ブロックの種類は難易度によってジュニアブロックとシニアブロックに分かれています。 ジュニアブロックには次のようなものがあります。 (CoDrone EDUブロック) フライトコマンド、フライトシーケンス、ステータスチェッカー、ライト、サウンド、 (プログラミングブロック) イベント、入出力、論理、 ループ、 算術 、 タイミング、 変数リスト。 シニアブロックには次のようなものがあります。 (CoDrone EDUブロック) フライトコマンド、フライト変数、ステータスチェッカー、センサー、ライト、サウンド、スクリーン、カラー、(プログラミングブロック) イベント,入出力,論理,ループ,数学,タイミング,変数,関数,リスト。 Device requirements​ Try to use the cable that comes with CoDrone EDU whenever possible! This Micro USB cable can transfer data, which is necessary for programming. Most Micro USB cables now are data compatible. If your drone does not switch to LINK state when connecting, you may have the wrong cable or it may be broken. Link to Blockly​ How to use Blockly​","keywords":"","version":"Next"},{"title":"Blockly Changelog","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Blockly/page5","content":"Blockly Changelog CoDrone EDU Library Changelog​ Version 2.1.5​ February 26th, 2024​ Disabled battery requests during takeoffImplemented an error-logging system so users can report an error from the menuImplemented analyticsUpdated firmware notifications to match latest firmware releasesUpdated Korean-language translations Version 2.1.4​ February 14th, 2024​ Updated drone visuals to match CoDrone EDU (JROTC ed.) when connectedTemporarily disabled &quot;Screen&quot; category for JROTC ed.Improvements to firmware notifications in the connection box Version 2.1.3​ January 23, 2024​ Changed parameters on &quot;flip&quot; functions to match Python function parametersImproved trim slider functionalityUpdated pairing window to reflect messaging about AA batteriesFixed Senior turn_degree() blockFixed Senior get_pressure() blockAddressed backend errors to improve performanceImproved functionality of the drone LED feature in the connection window Version 2.1.2​ December 21, 2023​ Added ability to change the drone LED color from the connection windowCreated a new senior block for turn_left() and turn_right() Python functionsAdded a link to the release notes in the Blockly menuCorrected the generated RGB values for the Junior controller LED blockUpdated missing blocks for Japanese-language BlocklyMore small changes in Python generated code output and block parameters to reflect Python library Version 2.1.1​ November 8, 2023​ Completed backend refactoring to update Blockly infrastructure. These changes will not affect your user experience, but they will help deliver a smoother update process in the future.Renamed get_gyro() Senior blocks to get_angular_speed()Small changes in the Python generated code output to reflect the latest library","keywords":"","version":"Next"},{"title":"Documents","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Documents/","content":"Documents Documents Digital User Manual Firmware Technical Specifications Summary 889 Compliance Statement","keywords":"","version":"Next"},{"title":"Digital User Manual","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Documents/page1","content":"Digital User Manual","keywords":"","version":"Next"},{"title":"Complete User and Safety Guide","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Documents/page4","content":"Complete User and Safety Guide","keywords":"","version":"Next"},{"title":"Firmware","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Documents/page2","content":"Firmware","keywords":"","version":"Next"},{"title":"Technical Specifications Summary","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Documents/page3","content":"Technical Specifications Summary","keywords":"","version":"Next"},{"title":"889 Compliance Statement","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Documents/page5","content":"889 Compliance Statement","keywords":"","version":"Next"},{"title":"What is Python?","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Python/page1","content":"What is Python?","keywords":"","version":"Next"},{"title":"Python","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Python/","content":"Python Python What is Python? Setup and Installation Update Function Documentation Python Changelog","keywords":"","version":"Next"},{"title":"Update Library","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Python/page3","content":"Update Library","keywords":"","version":"Next"},{"title":"Setup and Installation","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Python/page2","content":"Setup and Installation Setup and Installation​ How to install Python​ Install Python on your Mac or Windows machine. If you’re using a guest or limited account, make sure you have access to admin credentials for installing new software on the computer. This is especially important for students using a school computer or parent computer with limited access. If you’re on a Mac computer, you may need to modify the security settings in system preferences in order to download software. ⚠️ Note (Last Edited 10/30/23): The latest version of Python (3.12) has an issue with a library that manages packages in virtual environments. Please use Python 3.11 when following along with this tutorial. Click here to go to the Python website to install v3.11. Follow along with the instructions in the video below. Regardless of the Python version shown in the video, the instructions will still apply. How to install Pycharm​ Next, install PyCharm Community (free) edition , which is what we’ll use for writing out our Python code and running it on CoDrone EDU. Note: If you choose not to use PyCharm and prefer your own editor or IDE, you will need to know how to install packages on your platform of choice. If you are not sure how to do this, we recommend following the tutorial for PyCharm instead. Click here to go to the PyCharm download page and follow the instructions in the video below. How to install CoDrone EDU library​ Now you need to create a new project and set it up with the CoDrone EDU library. Follow along with the video instructions below. In the tutorial, you will need to copy and paste the import statement into the generated main.py. You do not need to connect your drone yet. from codrone_edu.drone import * Note: If a main.py file was not generated, you can make a new one by right clicking on the project name and selecting “New&gt;Python File”. This is for both Windows and Mac. ","keywords":"","version":"Next"},{"title":"Python Changelog","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Python/page5","content":"Python Changelog CoDrone EDU Library Changelog​ Version 1.9​ October 8, 2023​ Fixed a bug in returning controller button press data for the custom controller lesson Version 1.8​ April 15, 2023​ added get_sensor_data()Fixed bug where sensor requests would return 0 right after takeoffRemoved pynput dependency Version 1.7​ February 16, 2023​ added start_controller_buzzer()added stop_controller_buzzer()added get_error_data()renamed get_x_gyro() -&gt; get_angular_speed_x()renamed get_y_gyro() -&gt; get_angular_speed_y()renamed get_z_gyro() -&gt; get_angular_speed_z()codrone-edu library version prints to console Version 1.6​ December 28, 2022​ added start_drone_buzzer()added stop_drone_buzzer()added get_temperature()added move_forward()added move_left()added move_right()added move_backward()updated send_absolute_position() Version 1.5​ November 14, 2022​ avoid wall default unit changed from mm to cmadded reset_sensor()get_pressure() and get_drone_temp() have been modifiedadded stop_motors() Version 1.4​ August 17, 2022​ added error checking to load_classifier() methodadded height_from_pressure()Virtual ceiling method integratedChanged yaw directional values (positive yaw now turns left) Version 1.3​ June 27, 2022​ added go()added 'ESC' key kill switchwaypoints now support multiple takeoffsMotor diagnostic integrated as motor_test()Added virtual ceiling to the background of the drone classturn_degree() method improvedadded turn() Version 1.2​ June 10, 2022​ Added move() command with input parametersAdded hyperlink to &quot;drone may not be paired&quot; message.Added floor test as a method test_floor()Added a motor test that uses all 4 motors individually to determine if one is faulty. motor_test()Added waypoint systemAdded joystick and button functions Version 1.1​ May 17, 2022​ removed serial libraryFixed screen error on controller Version 1.0​ May 17, 2022​ Speed defaults to 2 when starting a programAdded speed_change() and get_control_speed() functionsPillow library added as dependencyAdded error message if serial library is not detectedAdded error handling when calling load_classifier() Version 0.9​ May 17, 2022​ Added Swarm class Version 0.8​ Mar 1, 2022​ Added movement as a state in the state listAdded temperature_convert() Version 0.7​ Feb 18, 2022​ Fixed turn_degree() to be absolute and smoother and turn 180 degreesFixed turn_right()Fixed turn_left()Added luminosity to knn.fit for a fourth data pointAdded controller screen drawing functions Version 0.6​ Feb 4, 2022​ All distance sensors now return in centimeter by defaultFixed all functions effected by centimeter being returned by defaultdrone.turn_degree() is now absolute and division by 0 is fixeddrone.get_height() now uses time of flight instead of barometerdrone.get_flow_x, y converted from m to cmFixed drone.avoid_wall()Added and fixed sendMotorAdded and fixed sendMotorSingleFixed buzzer functionsAdded buzzer flip warning when battery is less than 50%convert_meter can now return meterAdded drone.append_color_data() - appends data to an existing text fileAdded error handling when load_classifier is emptyChanged dir variable in add_color()Fixed issue when adding to a dataset that already existsUpdated set_trim() to only change roll and pitchUpdated get_trim_data() to return only roll and pitch Version 0.5​ Jan 10, 2022​ Added drone.flip()Added convert_millimeter() and convert_meter() to return centimeter by default for all positional functionsAdded error handling in the color classifierAdded docstrings Version 0.4​ Dec 15, 2021​ Added drone.get_drone_temp()Added drone.get_pressure()Added drone.drone_buzzer()Added drone.controller_buzzer()Added drone.set_trim()Added drone.get_height()Added drone.get_pressure()Added the flight sequences square, triangle, spiral, and sway.Improved takeoff commandImproved port connection Version 0.3​ Nov 23, 2021​ Added drone.avoid_wall() - Obstacle avoidance command. is similar to zumi.forward_avoid_collision()Added drone.detect_wall() - Uses front range sensor to detect a wallAdded drone.keep_distance() - Keep distance command makes the drone maintain a distance to an obstacleAdded drone.turn_left() - Can be given a degree and the drone will turn to the leftAdded drone.turn_right() - Can be given a degree and the drone will turn to the rightAdded drone.turn_degrees() - Can take an absolute degree command and will turn to that degree.Added drone.hover() - Will make the drone hover.Added reset_YPRT() - Resets the yaw pitch roll and throttle and sends the command to the drone.Added drone.keep_height() - Keep height command. A single command that is looped.Added get_colors() - returns a list [1, 2]Added get_front_color() - gets first color in get_colors() listAdded get_back_color() - gets second color in get_colors() listAdded predict_color() - predicts a color if you have trained the model and there is an existing fileFinished basic LEDs Version 0.1 - 0.2​ Oct 10, 2021​ Added Drone.acceleration_x, y, zAdded Drone.angle_roll, yaw, pitchAdded Drone.range_front()Added Drone.range_bottom()Added Drone.get_battery()Added Drone.open()Added Drone.takeoff()Added Drone.land()","keywords":"","version":"Next"},{"title":"Webpy Changelog","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Python/page6","content":"Webpy Changelog CoDrone EDU Library Changelog​ Version 1.0.0​ 2024​ updating...","keywords":"","version":"Next"},{"title":"TestMini","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneMini/TestMini","content":"TestMini","keywords":"","version":"Next"},{"title":"CoDroneMini","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneMini/","content":"CoDroneMini","keywords":"","version":"Next"},{"title":"CoDronePro_Lite","type":0,"sectionRef":"#","url":"/ja/docs/CoDronePro_Lite/","content":"CoDronePro_Lite","keywords":"","version":"Next"},{"title":"TestPro_Lite","type":0,"sectionRef":"#","url":"/ja/docs/CoDronePro_Lite/TestPro_Lite","content":"TestPro_Lite","keywords":"","version":"Next"},{"title":"Zumi","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/","content":"Zumi","keywords":"","version":"Next"},{"title":"Blockly","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/Blockly/","content":"Blockly Blockly What is Blockly? Junior Block Documentation Senior Block Documentation Blockly Changelog","keywords":"","version":"Next"},{"title":"Blockly Changelog","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/Blockly/Blockly-Changelog","content":"","keywords":"","version":"Next"},{"title":"Zumi Library Changelog​","type":1,"pageTitle":"Blockly Changelog","url":"/ja/docs/Zumi/Blockly/Blockly-Changelog#zumi-library-changelog","content":"","version":"Next","tagName":"h2"},{"title":"Senior Block Documentation","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Blockly/page4","content":"Senior Block Documentation Print Flight Commands​ take_off()​ Block​ Code​ drone.takeoff() Parameters​ None Description​ This functions makes the drone take off. CoDrone EDU takes off at an average height of 1 meter off the ground. A takeoff block must be used before any other flight command or flight movement. Returns​ None Example​ land()​ Block​ Code​ drone.land() Parameters​ None Description​ This function makes the drone land by throttling down safely. Returns​ None Example​ emergency_stop()​ Block​ Code​ drone.emergency_stop() Parameters​ None Description​ Stops all commands to motors. The drone will stop flying immediately. Returns​ None Example​ hover()​ Block​ Code​ drone.hover() Parameters​ duration: positive integer in seconds Description​ This function makes the drone hover in place for a duration in seconds. Returns​ None Example​ move()​ Block​ Code​ drone.move() Parameters​ roll: roll power percentage as an integer between -100 and +100 pitch: pitch power percentage as an integer between -100 and +100 yaw: yaw power percentage as an integer between -100 and +100 throttle: throttle power percentage as an integer between -100 and +100 duration: positive integer in seconds Description​ Moves the drone for a certain amount of time (in seconds) in a given direction determined by the flight parameters. Returns​ None Example​ In this example, roll and pitch are both set to positive 30% while yaw and throttle remain at 0%. CoDrone EDU will fly forward and to the right (diagonally) for 1 second at 30% speed. flip()​ Block​ Code​ drone.flip() Parameters​ direction: back, front, right, left Description​ This functions makes the drone flip back, front, right, or left. Make sure your battery percentage is over 50% for the flip to execute. Returns​ None Example​ Add a hover or delay block after the flip if you need to stabilize before your next command. The drone takes 3-4 seconds after a flip before it can do another flight command. turn_degree()​ Block​ Code​ drone.turn_degree() Parameters​ degrees: integer from -180 to +180 Description​ Turns right or left with absolute reference frame to drone's initial heading. Positive degrees turn to right and negative degrees turn to the left. When the drone pairs after powering on, the current heading will be set as 0 degrees. Returns​ None Example​ turn_left() / turn_right()​ Block​ Code​ drone.turn_left() drone.turn_right() Parameters​ degrees: positive integer from 0 to 180 Description​ Turns right or left relative to the drone's current heading. Returns​ None Example​ avoid_wall()​ Block​ Code​ drone.avoid_wall() Parameters​ timeout: positive integer timeout duration in seconds distance: positive integer in centimeters Description​ CoDrone EDU will fly forward and stop when an obstacle is detected a given distance away (in centimeters). The block will run until the timeout (in seconds) is finished or the obstacle is found, whichever comes first. The default timeout is 10 seconds for an obstacle detected 20cm away. Returns​ None Example​ Place the drone on the floor a few feet away from a wall. When you run the code, the drone will fly forward until the wall is detected 30 centimeters away. The next block will immediately execute. In this case, the drone will land. Flight Variables​ set_roll()​ Block​ Code​ drone.set_roll() Parameters​ power: integer between -100 and 100 Description​ This function sets the roll direction variable but will not send a move command. Negative values will move the drone to the left and positive values will move the drone to the right. Returns​ None Example​ set_pitch()​ Block​ Code​ drone.set_pitch() Parameters​ power: integer between -100 and 100 Description​ This function sets the pitch direction variable but will not send a move command. Negative values will move the drone backward and positive values will move the drone forward. Returns​ None Example​ set_yaw()​ Block​ Code​ drone.set_yaw() Parameters​ power: integer between -100 and 100 Description​ This function sets the yaw direction variable but will not send a move command. Negative values will turn the drone to the right and positive values will turn the drone to the left. Returns​ None Example​ set_throttle()​ Block​ Code​ drone.set_throttle() Parameters​ power: integer between -100 and 100 Description​ This function sets the throttle direction variable but will not send a move command. Negative values will move the drone downward and positive values will move the drone upward. Returns​ None Example​ move()​ Block​ Code​ drone.move() Parameters​ None Description​ Moves CoDrone EDU in the direction set by the flight variables with the smallest duration possible (about 0.01 seconds). Since it has no specified duration, it is often used inside of a loop to check sensors simultaneously. Returns​ None Example​ move(duration)​ Block​ Code​ drone.move() Parameters​ duration: positive integer in seconds Description​ Moves CoDrone EDU for a duration in seconds in the direction set by the flight variables. Returns​ None Example​ set_trim()​ Block​ Code​ drone.set_trim() Parameters​ roll: integer between -100 and 100 pitch: integer between -100 and 100 Description​ Sets the trim values to adjust for any drifting while CoDrone EDU is flying. Set the trim values in the opposite direction of drift. For example, if the drone is drifting to the right, set roll to a negative value. Returns​ None Example​ get_trim()​ Block​ Code​ drone.get_trim() Parameters​ roll: integer between -100 and 100 pitch: integer between -100 and 100 Description​ Returns the current trim values. Combine with a print statement to see the results printed to the console. Returns​ None Example​ reset_trim()​ Block​ Code​ drone.reset_trim() Parameters​ None Description​ Resets the trim values to (0,0). Returns​ None Example​ Status Checkers​ code_is_running()​ Block​ Parameters​ None Description​ Returns a True value while your code is running. Use this block instead of &quot;while True&quot; when you want to run a &quot;forever&quot; loop. Use the &quot;Stop&quot; button in Blockly to stop the program. Note: There is no Python equivalent code_is_running() function. Use a while True loop in Python. Returns​ Boolean: returns true if program is running, false if user presses &quot;Stop&quot; Example​ Lights​ set_drone_LED()​ Block​ Code​ drone.set_drone_LED() Parameters​ red: positive integer between 0 and 255 green: positive integer between 0 and 255 blue: positive integer between 0 and 255 brightness: positive between 0 and 255 Description​ Sets the color of CoDrone EDU's LED. Colors are set by using its RGB (red, green, blue) equivalent values. Returns​ None Example​ drone_LED_off()​ Block​ Code​ drone.drone_LED_off() Parameters​ None Description​ Turns off CoDrone EDU's LED. Returns​ None Example​ set_controller_LED()​ Block​ Code​ drone.set_controller_LED() Parameters​ red: positive integer between 0 and 255 green: positive integer between 0 and 255 blue: positive integer between 0 and 255 brightness: positive integer between 0 and 255 Description​ Sets the color of CoDrone EDU's controller LED. Colors are set by using its RGB (red, green, blue) equivalent values. Returns​ None Example​ controller_LED_off()​ Block​ Code​ drone.controller_LED_off() Parameters​ None Description​ Turns off the CoDrone EDU's controller LED. Returns​ None Example​ Sensors​ get_range()​ Block​ Code​ drone.get_range() Parameters​ type: front, bottom unit: cm, mm, in, m Description​ Returns the calculated distance from either the front or bottom infrared (IR) range sensor to the surface. The sensor range is up to 1.5m. Returns​ distance: float value in the units selected Example​ get_angle()​ Block​ Code​ drone.get_angle() Parameters​ axis: x, y, z Description​ This function returns the current gyroscope angle measurement for either the x (roll),y (pitch),or z (yaw) axis. Returns​ angle: integer in degrees Example​ get_angular_speed()​ Block​ Code​ drone.get_angular_speed() Parameters​ type: x, y, z Description​ This function returns the current angular velocity in degrees per second for either the x (roll),y (pitch), or z (yaw) axis. Returns​ angular velocity: integer in degrees per second Example​ get_accel()​ Block​ Code​ drone.get_accel() Parameters​ type: x, y, z Description​ This function returns the current acceleration on either the x, y, or z axis in units of m/s2∗10m/s^2*10m/s2∗10. Note: 1g = 9.8m/s29.8m/s^29.8m/s2 Returns​ acceleration: positive or negative integer in m/s2∗10m/s^2*10m/s2∗10 Example​ get_pos()​ Block​ Code​ drone.get_pos() Parameters​ axis: x, y, z unit: mm, cm, in, m Description​ Returns the current estimated position of the CoDrone EDU using the optical flow sensor. Returns​ position: float x,y, or z value in units selected Example​ get_battery()​ Block​ Code​ drone.get_battery() Parameters​ None Description​ This function returns the current battery percentage of the drone battery. Returns​ battery percentage: positive integer from 0 to 100 Example​ get_height()​ Block​ Code​ drone.get_height() Parameters​ units: cm, in, mm, m Description​ Returns the calculated distance from the bottom infrared (IR) range sensor to the surface. The sensor range is up to 1.5m. This is another name for the get_range(&quot;bottom&quot;) function. Returns​ height: float height value in the units selected Example​ get_pressure()​ Block​ Code​ drone.get_pressure() Parameters​ unit: pascal or millibar Description​ This function returns barometer data in either pascals or millibars. Note: 1 mbar = 100 Pa Returns​ pressure: float value in either Pa or mbar Example​ get_temperature()​ Block​ Code​ drone.get_temperature() Parameters​ unit: Fahrenheit, Celsius, Kelvin Description​ This block returns the current temperature of the drone in either Celsius or Fahrenheit. Returns​ temperature: float value in degrees Example​ get_elevation()​ Block​ Code​ drone.get_elevation() Parameters​ unit: m (meter), km (kilometer), ft (feet), mi (miles). Description​ Returns the estimated elevation data from the CoDrone EDU's barometer. Returns​ elevation: float elevation value in units selected Example​ get_color()​ Block​ Code​ drone.get_color() Parameters​ type: front, back Description​ This functions reads the color data from either of the two bottom color sensors and returns one of the 8 pre-calibrated colors (provided in the color cards). The drone must be flat on a surface (not flying) for the color sensor to activate. Returns​ color: detected color as a string (Red, Green, Yellow, Blue, Cyan, Magenta, Black, White, Unknown) Example​ get_hsvl()​ Block​ Code​ drone.get_hsvl() Parameters​ type: front, back unit: hue, saturation, value, lightness Description​ Returns the HSVL (hue, saturation, value, lightness) data from either of the CoDrone EDU's bottom color sensors. The drone must be flat on a surface (not flying) for the color sensor to activate. Returns​ hsvl value from sensor Example​ get_state_data()​ Block​ Code​ drone.get_state_data() Parameters​ unit: modeFlight, modeMovement Description​ Returns the current state of the CoDrone EDU. Returns​ state: name of flight/movement state Example​ reset_sensor()​ Block​ Code​ drone.reset_sensor() Parameters​ None Description​ Resets the Gyroscope angles to 0. Make sure the drone is on a flat surface when running this block. Returns​ None Example​ To use this example file turn the drone manually with your hand and watch the Z angle change. Stop moving the drone during the reset. You will see that the Z angle is reset to 0. Sound​ drone_buzzer()​ Block​ Code​ drone.buzzer() Parameters​ note: note range from C3 to B7, Mute, Fin duration: positive integer in milliseconds Description​ Plays a note for a duration in milliseconds using the CoDrone EDU drone buzzer. Returns​ None Example​ controller_buzzer()​ Block​ Code​ drone.controller_buzzer() Parameters​ note: note range from C3 to B7, Mute, Fin duration: positive integer in milliseconds Description​ Plays a note for a duration in milliseconds using the CoDrone EDU controller buzzer. Returns​ None Example​ drone_buzzer_hertz()​ Block​ Code​ drone.drone_buzzer_hertz() Parameters​ hertz: any positive integer in Hertz duration: positive integer in milliseconds Description​ Plays a sound frequency for a duration in milliseconds using the CoDrone EDU drone buzzer. Returns​ None Example​ controller_buzzer_hertz()​ Block​ Code​ drone.controller_buzzer_hertz() Parameters​ hertz: any positive integer in Hertz duration: positive integer in milliseconds Description​ Plays a sound frequency for a duration in milliseconds using the CoDrone EDU controller buzzer. Returns​ None Example​ Screen​ controller_draw_line()​ 警告 This function is currently unavailable for CoDrone EDU (JROTC ed.). Block​ Code​ drone.controller_draw_line() Parameters​ x1: point 1 x coordinate y1: point 1 y coordinate x2: point 2 x coordinate y2: point 2 y coordinate Description​ (x1,y1) \\ \\ \\ \\ (x2,y2) Draws a line between points (x1, y1) and (x2, y2) Returns​ None Example​ controller_draw_string()​ 警告 This function is currently unavailable for CoDrone EDU (JROTC ed.). Block​ Code​ drone.controller_draw_string() Parameters​ xStart: starting x position yStart: starting y position text: any string input Description​ Draws a string from the given x_start, x_end and y positions. The string can be aligned along the x_start and x_end positions Returns​ None Example​ controller_draw_rectangle()​ 警告 This function is currently unavailable for CoDrone EDU (JROTC ed.). Block​ Code​ drone.controller_draw_rectangle() Parameters​ xStart: top left corner x coordinate yStart: top left corner y coordinate width: width of rectangle height: height of rectangle flagFill: optional parameter to fill in the rectangle or not. default value is False Description​ width (x,y)|---------------| | | height |_______________| Draws a rectangle onto the controller screen starting from point (x,y) and extends to given height and width Returns​ None Example​ controller_draw_square()​ 警告 This function is currently unavailable for CoDrone EDU (JROTC ed.). Block​ Code​ drone.controller_draw_square() Parameters​ xStart: top left corner x coordinate yStart: top left corner y coordinate width: width of square flagFill: optional parameter to fill in the square or not. default value is False Description​ width (x,y)|------| | | width |______| Draws a square on the controller screen starting from point (x,y) and will extend to the given width Returns​ None Example​ controller_draw_point()​ 警告 This function is currently unavailable for CoDrone EDU (JROTC ed.). Block​ Code​ drone.controller_draw_point() Parameters​ x: x coordinate y: y coordinate Description​ Draws a point on the CoDrone EDU LED screen at point (x, y). Returns​ None Example​ controller_clear_screen()​ 警告 This function is currently unavailable for CoDrone EDU (JROTC ed.). Block​ Code​ drone.controller_clear_screen() Parameters​ None Description​ Clears the CoDrone EDU controller screen. Returns​ None Example​","keywords":"","version":"Next"},{"title":"What is Blockly?","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/Blockly/What-is-Blockly","content":"","keywords":"","version":"Next"},{"title":"What is Blockly?​","type":1,"pageTitle":"What is Blockly?","url":"/ja/docs/Zumi/Blockly/What-is-Blockly#what-is-blockly","content":" Learn the foundations of coding with drag-and-drop blocks in our visual programming language. This is an excellent starting place for beginner programmers and drone pilots.  Blockly is a block coding program from Robolink based on python. The types of blocks are divided into junior blocks and senior blocks according to the difficulty level.  Junior blocks have these things: (CoDrone EDU blocks) Flight Commands, Flight Sequences, Status Checkers, Lights, Sounds, (Programming blocks) Events, Input/Output, Logic, Loops, Math, Timing, Variables, Lists.  Senior blocks have these things: (CoDrone EDU blocks) Flight Commands, Flight Variables, Status Checkers, Sensors, Lights, Sounds, Screen, Colors, (Programming blocks) Events, Input/Output, Logic, Loops, Math, Timing, Variables, Functions, Lists.  ","version":"Next","tagName":"h2"},{"title":"Device requirements​","type":1,"pageTitle":"What is Blockly?","url":"/ja/docs/Zumi/Blockly/What-is-Blockly#device-requirements","content":"       Try to use the cable that comes with CoDrone EDU whenever possible! This Micro USB cable can transfer data, which is necessary for programming. Most Micro USB cables now are data compatible. If your drone does not switch to LINK state when connecting, you may have the wrong cable or it may be broken.  ","version":"Next","tagName":"h3"},{"title":"Link to Blockly​","type":1,"pageTitle":"What is Blockly?","url":"/ja/docs/Zumi/Blockly/What-is-Blockly#link-to-blockly","content":" ","version":"Next","tagName":"h3"},{"title":"How to use Blockly​","type":1,"pageTitle":"What is Blockly?","url":"/ja/docs/Zumi/Blockly/What-is-Blockly#how-to-use-blockly","content":"","version":"Next","tagName":"h3"},{"title":"Python","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/Python/","content":"Python","keywords":"","version":"Next"},{"title":"Senior Block Documentation","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation","content":"","keywords":"","version":"Next"},{"title":"Driving​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#driving","content":" ","version":"Next","tagName":"h2"},{"title":"forward step​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#forward-step","content":" Block​    Description​  Takes one drive &quot;step&quot; forward in the direction of the angle heading. This block must be used in a loop to observe any movement. Use the stop block at the end of the for loop to stop Zumi.  Parameters​  speed: An integer from 0 to 127 angle: An integer in degrees (0 degrees is defined when the Zumi object is created)  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reverse step​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#reverse-step","content":" Block​    Description​  Takes one drive &quot;step&quot; backward in the direction of the angle heading. This block must be used in a loop to observe any movement. Use the stop block at the end of the for loop to stop Zumi.  Parameters​  speed: An integer from 0 to 127 angle: An integer in degrees (0 degrees is defined when the Zumi object is created)  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"move to coordinate​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#move-to-coordinate","content":" Block​    Description​  Drives Zumi to an (x,y) position from the origin. The origin (0,0) is defined at Zumi object creation. To reset the origin, use the reset_coordinate() block. This method uses a best fit linear approximation of the distance traveled over time. Zumi will only keep update her coordinates when driving with this block. Using any other drive command will not keep track of her location.  Parameters​    x: A float value for the x coordinate y: A float value for the y coordinate unit: Units of the coordinates, centimeters or inches  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reset coordinate​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#reset-coordinate","content":" Block​    Description​  Resets Zumi's coordinates to (0,0). The origin will be reference point when using the move_to_coordinate() block.  Parameters​  None  Returns​  None  Example​  In this example, Zumi moves 5 inches in the x-direction. After resetting the coordinates Zumi will move another 5 inches in the x-direction since the origin has been reset.      ","version":"Next","tagName":"h3"},{"title":"line follow gyro​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#line-follow-gyro","content":" Block​    Description​  Uses the bottom IR sensors so that Zumi can execute a line following program for the duration of the timeout. If the bottom IR sensors detect a black line, Zumi will continue to drive forward. If one of the sensors detects white, Zumi will turn left or right to stay on the line. If both sensors detect white, Zumi will automatically stop, regardless of the timeout.The speed is capped to 80.  Parameters​  speed: Positive integer value for speed between 0 and 80 duration: Float value timeout in seconds angle_adj: Integer number of degrees Zumi will turn if one IR sensor detects white. left_IR: Integer threshold of the bottom left IR sensor. right_IR: Integer threshold of the bottom right IR sensor.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"funnel align​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#funnel-align","content":" Block​    Description​  Uses the bottom IR sensors so that Zumi can align to the funnel piece on the competition field for the duration of the timeout (Click here for a PDF version of the funnel piece).  Parameters​  speed: Positive integer value for speed between 0 and 80 duration: Float timeout value in seconds angle_adj: Integer number of degrees Zumi will turn if one IR sensor detects white.  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"forward avoid collision​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#forward-avoid-collision","content":" Block​    Description​  Drives Zumi forward until an object is detected or the timeout runs out, whicever comes first. An object is considered detected if either of the front IR sensor values goes below the threshold.  Parameters​  speed: Positive integer value for speed between 0 and 80 duration: Float value timeout in seconds angle: Integer heading in degrees (Default to None which is Zumi's current heading)IR_thresh: Integer threshold of front IR sensors.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reverse avoid collision​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#reverse-avoid-collision","content":" Block​    Description​  Drives Zumi in reverse until an object is detected or the timeout runs out, whicever comes first. An object is considered detected if either of the backIR sensor values goes below the threshold.  Parameters​  speed: Positive integer value for speed between 0 and 80 duration: Float value timeout in seconds angle: Integer heading in degrees (Default to None which is Zumi's current heading)IR_thresh: Integer threshold of front IR sensors.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set pid​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#set-pid","content":" Block​    Description​  Sets the proportional, integral and derivative terms in a PID control system. These parameters help Zumi drive straight and make accurate turns. The default values are recommended, but can be adjusted to see how the control system works.  Proportional: the output is proportional to the error Integral: compensates for the sums of the error over time Derivative: compensates for sudden changes in the error  Parameters​  P: float value for proportional control I: float value for integral control D: float value for derivative control   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"set speed prediction​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#set-speed-prediction","content":" Block​    Description​  Manually sets the line of best fit parameters that are used with move_to_coordinate(). This block overrides any speed prediction values that were automatically set with the speed_calibration() block.  Parameters​  speed: Integer speed from 0 to 100 used for calibrating distance traveled  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reset pid error​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#reset-pid-error","content":" Block​    Description​  Resets the sum of the gyro error and integral error that accumulated over. Reset the PID error after using forward_step() to drive more accurately. This does not reset the P, I, and D values of the Zumi PID control. To set those parameters use set_PID().  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"speed calibration​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#speed-calibration","content":" Block​    Description​  This function is designed to be used with the calibration sheet (Click here for a PDF version). Zumi will drive over 5 horizontal white lines that are 2 centimeters wide. The slope and y_intercept will be generated for the best fit line of the speed prediction. These values will be saved to the Zumi as a text file.  Run this block to calibrate for move_to_coordinate().  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"drive over markers​","type":1,"pageTitle":"Senior Block Documentation","url":"/ja/docs/Zumi/Blockly/Senior-Block-Documentation#drive-over-markers","content":" Block​    Description​  This function was designed for the Zumitown Mat. Zumi will drive over the specified number of alternating black and white horizontal lines at least 2 centimeters wide. Zumi will stop when the number of markers have been crossed or if the timeout ends, whichever is first. (Avoid making the speed very high, zumi will most likely overshoot since it has a lot of speed)  Parameters​  markers: An integer number of road markers to drive over speed: Positive integer value between 0 and 80 IR_threshold: An integer IR threshold value 0-255 for the bottom left IR sensors to detect black or white. time_out: A float value for the timeout in seconds   Returns​  None  Example​   ","version":"Next","tagName":"h3"},{"title":"page3","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/Python/page3","content":"page3","keywords":"","version":"Next"},{"title":"page4","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/Python/page4","content":"page4","keywords":"","version":"Next"},{"title":"What is Python?","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/Python/What-is-Python","content":"What is Python?","keywords":"","version":"Next"},{"title":"Junior Block Documentation","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation","content":"","keywords":"","version":"Next"},{"title":"Driving​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#driving","content":" ","version":"Next","tagName":"h2"},{"title":"forward​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#forward","content":" Block​    Parameters​  seconds: A float value for the duration of the movement. speed: An integer (0 - 100) for the speed of the movement.  Description​  Moves Zumi forward for the given duration and speed  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"reverse​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#reverse","content":" Block​    Parameters​  seconds: A float value for the duration of the movement. speed: An integer (0 - 100) for the speed of the movement.  Description​  Moves Zumi backwards for the given duration and speed  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn left​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#turn-left","content":" Block​    Description​  Turns Zumi to the left a number of specified degrees.  Parameters​  degrees: An integer in degrees   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"turn right​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#turn-right","content":" Block​    Description​  Turns Zumi to the right a number of specified degrees.  Parameters​  degrees: An integer in degrees.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"stop​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#stop","content":" Block​    Description​  Stops Zumi's motors when running indefinite move commands such as the Senior forward_step() block.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"left u turn​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#left-u-turn","content":" Block​    Description​  Makes Zumi perform a left &quot;U-turn&quot;. As the speed increases, the turn radius gets larger.  Parameters​  speed: An integer (0 - 100)  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"right u turn​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#right-u-turn","content":" Block​    Description​  Makes Zumi perform a right &quot;U-turn&quot;. As the speed increases, the turn radius gets larger.  Parameters​  speed: An integer (0 - 100)  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"parallel park​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#parallel-park","content":" Block​    Description​  Drives Zumi in reverse into a parallel park.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"calibrate gyro​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#calibrate-gyro","content":" Block​    Description​  Recalibrates Zumi's gyroscope. Use when the gyroscope returns values with high error due to drift. During recalibration, Zumi should be stationary on a flat surface.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Shapes​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#shapes","content":" ","version":"Next","tagName":"h2"},{"title":"triangle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#triangle","content":" Block​    Description​  Drives Zumi in the shape of a triangle using either left or right turns.  Parameters​    left: Makes a triangle with left turns right: Makes a triangle with right turns   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"square​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#square","content":" Block​    Description​  Drives Zumi in the shape of a square using either left or right turns.  Parameters​    left: Makes a square with left turns. right: Makes a square with right turns.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"rectangle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#rectangle","content":" Block​    Description​  Drives Zumi in the shape of a rectangle using either left or right turns.  Parameters​    left: Makes a rectangle with left turns. right: Makes a rectangle with right turns.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"circle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#circle","content":" Block​    Description​  Drives Zumi in the shape of a circle using either left or right turns.  Parameters​    left: Makes a circle turning to the left. right: Makes a circle turning to the right.   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"figure 8​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#figure-8","content":" Block​    Description​  Drives Zumi in the shape of a figure 8. Zumi does a full circle to the right, and then a full circle to the left.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"j turn​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#j-turn","content":" Block​    Description​  Drives Zumi in the shape of a J turn. Zumi will start by driving forward  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Screen​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#screen","content":" ","version":"Next","tagName":"h2"},{"title":"draw text​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#draw-text","content":" Block​    Description​  Draws a string of letters and characters and centers them on Zumi's screen. The screen can draw a maximum of three lines of text, each around 14 characters long.  Parameters​  string: string of characters to display   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"sad​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#sad","content":" Block​    Description​  Displays Zumi's sad eyes on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"closed​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#closed","content":" Block​    Description​  Displays Zumi's closed eyes on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"sleepy​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#sleepy","content":" Block​    Description​  Displays Zumi's sleepy eyes on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"happy​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#happy","content":" Block​    Description​  Displays Zumi's happy eye animation on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"glimmer​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#glimmer","content":" Block​    Description​  Displays Zumi's glimmer eye animation on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"blinking​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#blinking","content":" Block​    Description​  Displays Zumi's blinking eye animation on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"angry​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#angry","content":" Block​    Description​  Displays Zumi's angry eyes on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"open​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#open","content":" Block​    Description​  Displays Zumi's open eyes on the screen.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Sounds​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#sounds","content":" ","version":"Next","tagName":"h2"},{"title":"play note​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#play-note","content":" Block​    Description​  Plays a single note for a specified duration in milliseconds.  Parameters​    note: The note that is played. Ranging from C2 to B6 duration: An integer in milliseconds   Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"angry​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#angry-1","content":" Block​    Description​  Plays Zumi's angry sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"happy​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#happy-1","content":" Block​    Description​  Plays Zumi's happy sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"blink​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#blink","content":" Block​    Description​  Plays Zumi's blinking sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"celebrate​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#celebrate","content":" Block​    Description​  Plays Zumi's celebration sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"wakeup​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#wakeup","content":" Block​    Description​  Plays Zumi's wake up sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"disoriented​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#disoriented","content":" Block​    Description​  Plays Zumi's disoriented sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"oops front​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#oops-front","content":" Block​    Description​  Plays Zumi's front sensor detect sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"oops back​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#oops-back","content":" Block​    Description​  Plays Zumi's back sensor detecct sound effect.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"get ir reading​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#get-ir-reading","content":" Block​    Description​  Gets the current IR reading from Zumi's sensors. The closer the value is to 0, the more IR light is being detected. Used commonly when detecting objects since an object or obstacle nearby will reflect IR light back to the receiver.  Parameters​    Returns​  IR sensor value: An integer from 0-255  Example​      ","version":"Next","tagName":"h3"},{"title":"get z angle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#get-z-angle","content":" Block​    Description​  Gets the current Z angle from Zumi's gyroscope.  Parameters​  None  Returns​  angle: An integer ranging from 0 to 360.  Example​      ","version":"Next","tagName":"h3"},{"title":"get x angle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#get-x-angle","content":" Block​    Description​  Gets the current X angle from Zumi's gyroscope.  Parameters​  None  Returns​  angle: An integer ranging from 0 to 360.  Example​  With this example, tilt Zumi left and right with your hands to see the X angle change!      ","version":"Next","tagName":"h3"},{"title":"get y angle​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#get-y-angle","content":" Block​    Description​  Gets the current Y angle from Zumi's gyroscope.  Parameters​  None  Returns​  angle: An integer ranging from 0 to 360.  Example​  With this example, rock Zumi forward and backward with your hands to see the Y angle change!      ","version":"Next","tagName":"h3"},{"title":"reset gyro​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#reset-gyro","content":" Block​    Description​  Resets Zumi's gyroscope x, y, and z angles to 0. Use this function to reset Zumi's heading.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"get battery voltage​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#get-battery-voltage","content":" Block​    Description​  Gets the current voltage from Zumi's battery. It typically varies from 3.45V-4.14V when not connected over USB. If connected over USB, this function may return 1.7V or below.  Parameters​  None  Returns​  voltage: A float value in units of Volts  Example​      ","version":"Next","tagName":"h3"},{"title":"get battery percentage​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#get-battery-percentage","content":" Block​    Description​  Gets the current battery percentage from Zumi's battery when not connected over USB power. The percentage will vary while driving since it is dependent on battery voltage.  Parameters​  None  Returns​  percent: An integer value from 0 to 100  Example​      ","version":"Next","tagName":"h3"},{"title":"Camera​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#camera","content":" ","version":"Next","tagName":"h2"},{"title":"import camera​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#import-camera","content":" Block​    Description​  Imports the camera library. This block must be included at the top of any code that uses camera functions.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"start camera​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#start-camera","content":" Block​    Description​  Turns on Zumi's camera. A red LED will turn on next to the camera to indicate the camera is on. The camera needs to turn on before taking any pictures and will stay on until it is manually turned off with the close_camera() block.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"close camera​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#close-camera","content":" Block​    Description​  Turns off Zumi's camera. It is recommended to always turn off the camera when not in use to conserve battery. The camera cannot be started again unless the camera is already off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"take picture​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#take-picture","content":" Block​    Description​  Captures a color image with Zumi's camera and stores the array as a frame object. Use the image object with show_image() to display in Blockly. This block cannot be used without importing and starting the camera.  Parameters​  None  Returns​  image: A frame object composed of a 160x128 array of pixels.  Example​      ","version":"Next","tagName":"h3"},{"title":"show image​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#show-image","content":" Block​    Description​  Show an image that was taken with Zumi's camera in Blockly.  Parameters​  image: A frame object composed of an array of pixels.  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"get qr code​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#get-qr-code","content":" Block​    Description​  Searches an image for a QR code message. If a QR code was found, the encoded message is saved to a string.  Parameters​  image: A frame object composed of an array of pixels.  Returns​  string: A string containing the message of the QR code. Returns None if no QR code was detected.  Example​      ","version":"Next","tagName":"h3"},{"title":"find stop sign​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#find-stop-sign","content":" Block​    Description​  Searches an image for a stop sign. Returns True if a stop sign was found.  Parameters​  image: A frame object composed of an array of pixels.  Returns​  boolean: Returns True if a stop sign was detected. Otherwise, returns False.  Example​      ","version":"Next","tagName":"h3"},{"title":"find face​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#find-face","content":" Block​    Description​  Searches an image for a face. Returns True if a face was detected  Parameters​  image: A frame object composed of an array of pixels.  Returns​  boolean: Returns True if a face was detected. Otherwise, returns False.  Example​      ","version":"Next","tagName":"h3"},{"title":"AI​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#ai","content":" ","version":"Next","tagName":"h2"},{"title":"prediction from frame​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#prediction-from-frame","content":" Block​    Description​  Predicts a label from an image based on a previously trained color model. A KNN color model needs to be trained and loaded into the program to use predict_from_frame().  Parameters​  image: A frame object composed of an array of pixels.  Returns​  string: A string containing the predicted label.  Example​      ","version":"Next","tagName":"h3"},{"title":"Lights​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#lights","content":" ","version":"Next","tagName":"h2"},{"title":"lights on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#lights-on","content":" Block​    Description​  Turns on both Zumi's headlights and brake lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"lights off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#lights-off","content":" Block​    Description​  Turns off both Zumi's headlights and brake lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"headlights on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#headlights-on","content":" Block​    Description​  Turns on Zumi's headlights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"headlights off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#headlights-off","content":" Block​    Description​  Turns off Zumi's headlights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"brake lights on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#brake-lights-on","content":" Block​    Description​  Turns on Zumi's brake lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"brake lights off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#brake-lights-off","content":" Block​    Description​  Turns off Zumi's brake lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hazard lights on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#hazard-lights-on","content":" Block​    Description​  Turns on Zumi's flashing hazard lights. They will flash indefinitely until turned off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"hazard lights off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#hazard-lights-off","content":" Block​    Description​  Turns off Zumi's flashing hazard lights.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"left signal on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#left-signal-on","content":" Block​    Description​  Turns on Zumi's left turn signal. This function flashes Zumi's back left red LED until turned off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"left signal off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#left-signal-off","content":" Block​    Description​  Turns off Zumi's flashing left turn signal.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"right signal on​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#right-signal-on","content":" Block​    Description​  Turns on Zumi's right turn signal. This function flashes Zumi's back right red LED until turned off.  Parameters​  None  Returns​  None  Example​      ","version":"Next","tagName":"h3"},{"title":"right signal off​","type":1,"pageTitle":"Junior Block Documentation","url":"/ja/docs/Zumi/Blockly/Junior-Block-Documentation#right-signal-off","content":" Block​    Description​  Turns off Zumi's flashing right turn signal.  Parameters​  None  Returns​  None  Example​   ","version":"Next","tagName":"h3"},{"title":"Function Documentation","type":0,"sectionRef":"#","url":"/ja/docs/Zumi/Python/Function-Documentation","content":"","keywords":"","version":"Next"},{"title":"MPU​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#mpu","content":" ","version":"Next","tagName":"h2"},{"title":"calibrate_gyro()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#calibrate_gyro","content":" Description​  Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface. This function calls zumi.mpu.calibrate_MPU().  Syntax​  calibrate_gyro()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.calibrate_gyro() print(&quot;Done&quot;)     ","version":"Next","tagName":"h3"},{"title":"calibrate_MPU()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#calibrate_mpu","content":" Description​  Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface.  Syntax​  calibrate_MPU() calibrate_MPU(count=100)   Parameters​  count: the number of samples you want Zumi to take. Increase to improve accuracy.  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() #Zumi will take 500 samples/readings zumi.mpu.calibrate_MPU(count=500) #this is the order the offsets will be printed print(&quot;angular speed rad/sec Gx,Gy,Gz&quot;) print(&quot;linear acceleration Ax,Ay,Az&quot;) #print the offsets of each Axis zumi.mpu.print_offsets()     ","version":"Next","tagName":"h3"},{"title":"get_orientation()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#get_orientation","content":" Description​  Uses the acceleration values to find Zumi's orientation with respect to the strongest force being applied to Zumi (gravity).  Syntax​  get_orientation()   Parameters​  None  Returns​  Integer denoting orientation state.   Orientation state -1 = unknown 0 = probably falling or moving between states 1 = camera straight up 2 = camera facing down 3 = on right side 4 = on left side 5 = wheels on floor 6 = wheels facing up (upside down) 7 = accelerating faster than 1g   Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() #grab zumi and place it on any side #example: upside down, on its nose etc. for i in range(20): orientation = zumi.get_orientation() print(orientation) time.sleep(0.5) print(&quot; done &quot;)     ","version":"Next","tagName":"h3"},{"title":"read_x_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#read_x_angle","content":" Description​  Calls update_angles() and returns only the x-angle.  Syntax​  read_x_angle()   Parameters​  None  Returns​  float: current x-angle  Example Code​  Python​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_x_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"read_y_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#read_y_angle","content":" Description​  Calls update_angles() and returns only the y-angle.  Syntax​  read_y_angle()   Parameters​  None  Returns​  float: current y-angle  Example Code​  Python​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_y_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"read_z_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#read_z_angle","content":" Description​  Calls update_angles() and returns only the z-angle.  Syntax​  read_z_angle()   Parameters​  None  Returns​  float: current z-angle  Example Code​  Python​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_z_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"reset_drive()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#reset_drive","content":" Description​  Calls both reset_PID() and reset_gyro(). Use for driving straight or turning accurately.  Syntax​  reset_drive()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,50): zumi.forward_step(0,50) print(zumi.angle_list[2],&quot;, &quot;, zumi.error_past) zumi.stop() zumi.reset_drive() print(&quot; Now &quot;) print(zumi.angle_list[2],&quot;, &quot;, zumi.error_past)     ","version":"Next","tagName":"h3"},{"title":"reset_gyro()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#reset_gyro","content":" Description​  Resets all values in the angle list to 0. Use for driving straight or turning accurately.  Syntax​  reset_gyro()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() print(&quot;z angle &quot; , zumi.angle_list[2]) zumi.turn_left(90,1.2) print(&quot;z angle &quot; , zumi.angle_list[2]) zumi.reset_gyro() print(&quot;z angle &quot; , zumi.angle_list[2])     ","version":"Next","tagName":"h3"},{"title":"reset_PID()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#reset_pid","content":" Description​  Resets the sum of the gyro error to zero as well as the PID error sum. Use for driving straight or turning accurately. This does not reset the P, I, and D values of the Zumi PID control.  Syntax​  reset_PID()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0,50): zumi.go_straight(50,0) #print the error of the z angle along with some of the PID accumulators print(zumi.PID_time_past,&quot;, &quot;, zumi.error_past,&quot;, &quot;, zumi.error_sum,&quot; , &quot;, zumi.angle_list[2]) zumi.stop() #this will reset those values zumi.reset_PID() print(&quot; Now &quot;) print(zumi.PID_time_past,&quot;, &quot;, zumi.error_past,&quot;, &quot;, zumi.error_sum, &quot; , &quot;, zumi.angle_list[2])     ","version":"Next","tagName":"h3"},{"title":"update_angles()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#update_angles","content":" Description​  Reads angular speeds and updates the list of angles: The first 3 are angles produced from the gyroscope readings. X angle, Y angle and Z angle in degrees. The next 2 angles are produced by finding the tilt with respect to gravity. X and Y acceleration angles in degrees. Work well if Zumi's wheels point to the floor The next 2 angles are the complementary filtered angles are produced by combining both gyroscope and accelerometer angles for the x and y axis. The next 3 are the rotation angles which are produced using the accelerometer. rotation along X, Y and Z with respect to gravity. The last one is the tilt state.   Syntax​  update_angles()   Parameters​  None  Returns​  List [Gyro x,Gyro y,Gyro z,Acc x,Acc y,Comp x,Comp y,Rot_x,Rot_y,Rot_z,tilt_state]  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): angles = zumi.update_angles() z_angle = angles[2] print(z_angle) print(&quot; done &quot;)     ","version":"Next","tagName":"h3"},{"title":"Sensors​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#sensors","content":" ","version":"Next","tagName":"h2"},{"title":"back_left_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#back_left_detect","content":" Description​  Returns True if the back left IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  back_left_detect() back_left_detect(threshold=100)  Parameters​  threshold: Integer between 0-255  Returns​  Boolean that returns True if sensor is triggered.   Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.back_left_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"back_right_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#back_right_detect","content":" Description​  Returns True if the back right IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  back_right_detect() back_right_detect(threshold=100)  Parameters​  threshold: Integer between 0-255  Returns​  Boolean that returns True if sensor is triggered.   Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.back_right_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"bottom_left_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#bottom_left_detect","content":" Description​  Returns True if the bottom left IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  bottom_left_detect() bottom_left_detect(threshold=100)  Parameters​  threshold: Integer between 0-255  Returns​  Boolean that returns True if sensor is triggered.   Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.bottom_left_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"bottom_right_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#bottom_right_detect","content":" Description​  Returns True if the bottom right IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  bottom_right_detect() bottom_right_detect(threshold=100)  Parameters​  threshold: Integer between 0-255  Returns​  Boolean that returns True if sensor is triggered.   Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.bottom_right_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"calibrate_gyro()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#calibrate_gyro-1","content":" Description​  Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface. This function calls zumi.mpu.calibrate_MPU().  Syntax​  calibrate_gyro()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.calibrate_gyro() print(&quot;Done&quot;)     ","version":"Next","tagName":"h3"},{"title":"calibrate_MPU()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#calibrate_mpu-1","content":" Description​  Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface.  Syntax​  calibrate_MPU() calibrate_MPU(count=100)   Parameters​  count: the number of samples you want Zumi to take. Increase to improve accuracy.  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() #Zumi will take 500 samples/readings zumi.mpu.calibrate_MPU(count=500) #this is the order the offsets will be printed print(&quot;angular speed rad/sec Gx,Gy,Gz&quot;) print(&quot;linear acceleration Ax,Ay,Az&quot;) #print the offsets of each Axis zumi.mpu.print_offsets()     ","version":"Next","tagName":"h3"},{"title":"front_left_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#front_left_detect","content":" Description​  Returns True if the front left IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  front_left_detect() front_left_detect(threshold=100)  Parameters​  threshold: Integer between 0-255  Returns​  Boolean that returns True if sensor is triggered.   Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.front_left_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"front_right_detect()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#front_right_detect","content":" Description​  Returns True if the front right IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases.  Syntax​  front_left_detect() front_left_detect(threshold=100)  Parameters​  threshold: Integer between 0-255  Returns​  Boolean that returns True if sensor is triggered.   Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): if zumi.front_right_detect(): print(&quot;Detected!&quot;) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"get_all_IR_data()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#get_all_ir_data","content":" Description​  Returns the readings from all 6 IR sensors.  Syntax​  get_all_IR_data()   Parameters​  None  Returns​  List with 6 values between 0 and 255.   IR sensor indices: 0 Front right sensor 1 Bottom right sensor 2 Back right sensor 3 Bottom left sensor 4 Back left sensor 5 Front left sensor   Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): ir_readings = zumi.get_all_IR_data() print(ir_readings) time.sleep(0.1) # Delay for I2C     ","version":"Next","tagName":"h3"},{"title":"get_battery_voltage()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#get_battery_voltage","content":" Description​  Get the reading from battery level.  If you are charging Zumi RED LED ON you will see roughly 1.1-1.20 volts.  The battery should reach a max of 4.20 volts and the lowest it should ever reach is 3.0 volts. These values will only show up if the switch is in the on position and the RED led is not visible.  Syntax​  get_battery_voltage()   Parameters​  None  Returns​  Voltage reading  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,10): # battery level is updated every 500ms or half a second time.sleep(0.5) battery = zumi.get_battery_voltage() print(battery)     ","version":"Next","tagName":"h3"},{"title":"get_IR_data()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#get_ir_data","content":" Description​  Get the reading from the IR sensors and the index specified.  Syntax​  get_IR_data(ir_sensor_index)   Parameters​  ir_sensor_index: Integer from 0 to 5.  IR sensor indices:  0 IR.FRONT_RIGHT = Front right sensor1 IR.BOTTOM_RIGHT = Bottom right sensor2 IR.BACK_RIGHT = Back right sensor3 IR.BOTTOM_LEFT = Bottom left sensor4 IR.BACK_LEFT = Back left sensor5 IR.FRONT_LEFT = Front left sensor  Returns​  Value between 0 and 255.  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): FRONT_RIGHT = 0 ir_reading = zumi.get_IR_data(FRONT_RIGHT) zumi.play_note(int(ir_reading/4),20) # Divide by 4 because note is between 0 and 60 time.sleep(0.05)     ","version":"Next","tagName":"h3"},{"title":"get_orientation_message()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#get_orientation_message","content":" Description​  Uses the acceleration values to find Zumi's orientation with respect to the strongest force being applied to Zumi (gravity). This function returns the orientation as a String.  Syntax​  get_orientation_message()   Parameters​  None  Returns​  String: a description of the orientation state   Orientation state &quot;unknown&quot; &quot;face up&quot; &quot;face down&quot; &quot;right side down&quot; &quot;left side down&quot; &quot;upright&quot; &quot;upside down&quot; &quot;accelerating&quot;   Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() #grab zumi and place it on any side #example: upside down, on its nose etc. for i in range(20): orientation = zumi.get_orientation_message() print(orientation) time.sleep(0.5) print(&quot; done &quot;)     ","version":"Next","tagName":"h3"},{"title":"get_orientation()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#get_orientation-1","content":" Description​  Uses the acceleration values to find Zumi's orientation with respect to the strongest force being applied to Zumi (gravity).  Syntax​  get_orientation()   Parameters​  None  Returns​  Integer denoting orientation state.   Orientation state -1 = unknown 0 = probably falling or moving between states 1 = camera straight up 2 = camera facing down 3 = on right side 4 = on left side 5 = wheels on floor 6 = wheels facing up (upside down) 7 = accelerating faster than 1g   Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() #grab zumi and place it on any side #example: upside down, on its nose etc. for i in range(20): orientation = zumi.get_orientation() print(orientation) time.sleep(0.5) print(&quot; done &quot;)     ","version":"Next","tagName":"h3"},{"title":"read_x_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#read_x_angle-1","content":" Description​  Calls update_angles() and returns only the x-angle.  Syntax​  read_x_angle()   Parameters​  None  Returns​  float: current x-angle  Example Code​  Python​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_x_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"read_y_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#read_y_angle-1","content":" Description​  Calls update_angles() and returns only the y-angle.  Syntax​  read_y_angle()   Parameters​  None  Returns​  float: current y-angle  Example Code​  Python​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_y_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"read_z_angle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#read_z_angle-1","content":" Description​  Calls update_angles() and returns only the z-angle.  Syntax​  read_z_angle()   Parameters​  None  Returns​  float: current z-angle  Example Code​  Python​  #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_z_angle()) IPython.display.clear_output(wait=True) print(&quot;done&quot;)     ","version":"Next","tagName":"h3"},{"title":"reset_drive()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#reset_drive-1","content":" Description​  Calls both reset_PID() and reset_gyro(). Use for driving straight or turning accurately.  Syntax​  reset_drive()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,50): zumi.forward_step(0,50) print(zumi.angle_list[2],&quot;, &quot;, zumi.error_past) zumi.stop() zumi.reset_drive() print(&quot; Now &quot;) print(zumi.angle_list[2],&quot;, &quot;, zumi.error_past)     ","version":"Next","tagName":"h3"},{"title":"reset_gyro()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#reset_gyro-1","content":" Description​  Resets all values in the angle list to 0. Use for driving straight or turning accurately.  Syntax​  reset_gyro()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() print(&quot;z angle &quot; , zumi.angle_list[2]) zumi.turn_left(90,1.2) print(&quot;z angle &quot; , zumi.angle_list[2]) zumi.reset_gyro() print(&quot;z angle &quot; , zumi.angle_list[2])     ","version":"Next","tagName":"h3"},{"title":"reset_PID()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#reset_pid-1","content":" Description​  Resets the sum of the gyro error to zero as well as the PID error sum. Use for driving straight or turning accurately. This does not reset the P, I, and D values of the Zumi PID control.  Syntax​  reset_PID()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0,50): zumi.go_straight(50,0) #print the error of the z angle along with some of the PID accumulators print(zumi.PID_time_past,&quot;, &quot;, zumi.error_past,&quot;, &quot;, zumi.error_sum,&quot; , &quot;, zumi.angle_list[2]) zumi.stop() #this will reset those values zumi.reset_PID() print(&quot; Now &quot;) print(zumi.PID_time_past,&quot;, &quot;, zumi.error_past,&quot;, &quot;, zumi.error_sum, &quot; , &quot;, zumi.angle_list[2])     ","version":"Next","tagName":"h3"},{"title":"update_angles()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#update_angles-1","content":" Description​  Reads angular speeds and updates the list of angles: The first 3 are angles produced from the gyroscope readings. X angle, Y angle and Z angle in degrees. The next 2 angles are produced by finding the tilt with respect to gravity. X and Y acceleration angles in degrees. Work well if Zumi's wheels point to the floor The next 2 angles are the complementary filtered angles are produced by combining both gyroscope and accelerometer angles for the x and y axis. The next 3 are the rotation angles which are produced using the accelerometer. rotation along X, Y and Z with respect to gravity. The last one is the tilt state.   Syntax​  update_angles()   Parameters​  None  Returns​  List [Gyro x,Gyro y,Gyro z,Acc x,Acc y,Comp x,Comp y,Rot_x,Rot_y,Rot_z,tilt_state]  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i in range(0,100): angles = zumi.update_angles() z_angle = angles[2] print(z_angle) print(&quot; done &quot;)     ","version":"Next","tagName":"h3"},{"title":"Driving​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#driving","content":" ","version":"Next","tagName":"h2"},{"title":"circle_left()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#circle_left","content":" Description​  Drives Zumi in a counterclockwise circle.  Syntax​  circle_left() circle_left(speed=30, step=2)   Parameters​  speed: Drive speed between 0-80 step: The angle step size (decrease for wider turns, increase for tighter turns)  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.circle_left(step=3)     ","version":"Next","tagName":"h3"},{"title":"circle_right()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#circle_right","content":" Description​  Drives Zumi in a clockwise circle.  Syntax​  circle_right() circle_right(speed=30, step=2)   Parameters​  speed: Drive speed between 0-80 step: The angle step size (decrease for wider turns, increase for tighter turns)  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.circle_right(step=3)     ","version":"Next","tagName":"h3"},{"title":"circle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#circle","content":" Description​  Drives Zumi in a circle (counterclockwise by default).  Syntax​  circle() circle(speed=30, step=2, direction=1, delay=0.02)   Parameters​  speed: Drive speed between 0-80 step: The angle step size (decrease for wider turns, increase for tighter turns) direction: -1 for clockwise and +1 for counterclockwise delay: The time delay between each angle step  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.circle(speed=60, step=4, direction=-1)     ","version":"Next","tagName":"h3"},{"title":"control_motors()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#control_motors","content":" Description​  Sets the speed of each individual motor. The changes take place immediately. This function does not include a stop command or any sensor feedback.  Syntax​  control_motors(right,left)   Parameters​  right: Integer between -126 and 127. Positive values for forward, negative values for reverse. left: Integer between -126 and 127. Positive values for forward, negative values for reverse.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.control_motors(30,30) time.sleep(2) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"drive_over_markers()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#drive_over_markers","content":" Description​  Zumi will drive over the specified number of alternating black and white horizontal lines at least 2 centimeters wide. Zumi will stop when the number of markers have been crossed or if the timeout ends, whichever is first. (Avoid making the speed very high, zumi will most likely overshoot since it has a lot of speed)  Syntax​  zumi.drive_over_markers(5) zumi.drive_over_markers(road_markers=3,speed=10,ir_threshold=120,time_out=3)   Parameters​  road_markers: The number of road markers to drive over speed: Positive integer value for speed between 0 and 80 ir_threshold: The IR threshold value for the bottom left IR sensors to detect black or white. time_out: Number of seconds before the timeout ends and Zumi stops driving.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() #must start off in a black area. zumi.drive_over_markers(5) #Drive over 10 road marker with a timeout of 6 seconds zumi.drive_over_markers(road_markers=10,speed=30,time_out=6)     ","version":"Next","tagName":"h3"},{"title":"figure_8()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#figure_8","content":" Description​  Drives Zumi in a figure 8.  Syntax​  figure_8() figure_8(speed=30, step=3, delay=0.02)   Parameters​  speed: Drive speed between 0-80 step: The angle step size (decrease for wider turns, increase for tighter turns) delay: The time delay between each angle step   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.figure_8(step=5)     ","version":"Next","tagName":"h3"},{"title":"forward_avoid_collision()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#forward_avoid_collision","content":" Description​  Drives Zumi forward at a default speed of 40 for 1 second in the direction Zumi is currently facing. If either of the front IR sensor values go below the threshold, Zumi will stop even if the duration or timeout is not complete.  Syntax​  forward_avoid_collision(speed=40, duration=1.0) forward_avoid_collision(speed=40, duration=1.0, desired_angle=None, left_th=150, right_th=150)   Parameters​  speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will drive and check for collision desired_angle: Heading or desired angle (Default to None which is Zumi's current heading) left_th: threshold of the front left IR sensor right_th: threshold of the front right IR sensor   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.forward_avoid_collision(40,2)     ","version":"Next","tagName":"h3"},{"title":"forward_step()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#forward_step","content":" Description​  Takes one drive &quot;step&quot; to correct for the set heading. This function only works when called inside of a loop.  Syntax​  forward_step(speed, desired_angle) forward_step(speed, desired_angle, max_speed=127)   Parameters​  speed: Drive speed between 0 and 127; must be below the max_speed desired_angle: heading (0 degrees is defined when the Zumi object is created.) max_speed: Caps the max speed. Default to 127.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0, 200): zumi.forward_step(80,0) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"forward()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#forward","content":" Description​  Drives Zumi forward at a default speed of 40 for 1 second in the direction Zumi is currently facing.  Syntax​  forward() forward(speed=40, duration=1.0, desired_angle=None)   Parameters​  speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will drive forward desired_angle: Heading or desired angle to drive in (When None is selected Zumi drives wherever she is facing)  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.forward() time.sleep(1) zumi.forward(speed=50) time.sleep(1) zumi.forward(duration=2.1) time.sleep(1)     ","version":"Next","tagName":"h3"},{"title":"funnel_align()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#funnel_align","content":" Description​  Zumi will try to align to the funnel piece on the competition field (Click here for a PDF version).  Syntax​  funnel_align(speed=20, duration=1.0) funnel_align(speed=20, duration=1, angle=None, angle_adj=2, l_th=100, r_th=100)   Parameters​  speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will try to align to the funnel piece angle: Heading or desired angle (Default to None which is Zumi's current heading) angle_adj: The number of degrees Zumi will turn if one IR sensor detects white l_th: threshold of the bottom left IR sensor r_th: threshold of the bottom right IR sensor   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.funnel_align(speed=10,duration=3,angle_adj=1.1)     ","version":"Next","tagName":"h3"},{"title":"go_reverse()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#go_reverse","content":" Description​  Takes one drive &quot;step&quot; in reverse to correct for the set heading. This function only works when called inside of a loop.  Syntax​  go_reverse(speed, desired_angle) go_reverse(speed, desired_angle, max_speed=127)   Parameters​  speed: Drive speed between 0 and 127; must be below the max_speed desired_angle: heading (0 degrees is defined when the Zumi object is created.) max_speed: Caps the max speed. Default to 127.  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0, 200): zumi.go_reverse(40,0) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"go_straight()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#go_straight","content":" Description​  Takes one drive &quot;step&quot; to correct for the set heading. This function only works when called inside of a loop.  Syntax​  go_straight(speed, desired_angle) go_straight(speed, desired_angle, max_speed=127)   Parameters​  speed: Drive speed between 0 and 127; must be below the max_speed desired_angle: heading (0 degrees is defined when the Zumi object is created.) max_speed: Caps the max speed. Default to 127.  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0, 200): zumi.go_straight(40,0) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"j_turn()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#j_turn","content":" Description​  Drives Zumi in a j-turn.  Syntax​  j_turn() j_turn(speed=80, step=4, delay=0.005)   Parameters​  speed: Positive value for forward speed between 0 and 80 step: The angle step size (decrease for wider turns, increase for tighter turns) delay: The time delay between each angle step  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.j_turn(speed=60, delay=0.003)     ","version":"Next","tagName":"h3"},{"title":"left_u_turn()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#left_u_turn","content":" Description​  Drives Zumi in a left u-turn.  Syntax​  left_u_turn() left_u_turn(speed=30, step=4, delay=0.02)   Parameters​  speed: Positive value for forward speed between 0 and 80 step: The angle step size (decrease for wider turns, increase for tighter turns) delay: The time delay between each angle step   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.left_u_turn() time.sleep(1) zumi.left_u_turn(step=3)     ","version":"Next","tagName":"h3"},{"title":"line_follower()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#line_follower","content":" Description​  On the road, Zumi uses the camera to detect lanes and stay inside of them.  Syntax​  zumi.line_follower(duration=3, left_thresh=100,right_thresh=100)  Parameters​  duration: Number of seconds Zumi will drive on the line left_thresh: threshold of the bottom left IR sensor. By default, threshold is 100 right_thresh: threshold of the bottom right IR sensor. By default, threshold is 100   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.line_follower(3) zumi.line_follower(3, left_thresh=100,right_thresh=100)     ","version":"Next","tagName":"h3"},{"title":"line_follow_gyro_assist()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#line_follow_gyro_assist","content":" Description​  Drives Zumi forward at a default speed of 20 for 1 second in the direction Zumi is currently facing. Zumi will stop when the duration or timeout is over. If the bottom IR sensors detect a black line, Zumi will continue to drive. If one or the other sensor detects white, Zumi will auto-adjust to stay on the line. If both sensors detect white, Zumi will stop even if the duration has not been met.  Syntax​  line_follow_gyro_assist(speed=20, duration=1.0) line_follow_gyro_assist(speed=20, duration=1, angle=None, angle_adj=2, l_th=100, r_th=100)   Parameters​  speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will drive on the line angle: Heading or desired angle (default is None which is Zumi's current heading) angle_adj: The number of degrees Zumi will turn if one IR sensor detects white. l_th: threshold of the bottom left IR sensor. r_th: threshold of the bottom right IR sensor.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.line_follow_gyro_assist(speed=10,duration=3,angle_adj=1.1)     ","version":"Next","tagName":"h3"},{"title":"move_centimeters()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#move_centimeters","content":" Description​  This method uses a best fit linear approximation of the distance traveled over time. It uses the equation y = mx + b, where:  y is the distance traveledm is the predicted speed in centimeters per secondx is the time elapsedb is the slope intercept  If the PID values are not set the internal default values will be set.  If the angle is not input Zumi will drive to whatever angle it is currently facing.  Syntax​  move_centimeters(distance, angle) move_centimeters(distance, angle=None, k_p=None, k_i=None, k_d=None)   Parameters​  distance: the distance in centimeters you want to travel angle: heading (0 degrees is defined when the Zumi object is created.) Default to None k_p: P-gain. Default to None. k_i: I-gain. Default to None. k_d: D-gain. Default to None.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.move_centimeters(10) zumi.move_centimeters(10,90) zumi.move_centimeters(15,0)     ","version":"Next","tagName":"h3"},{"title":"move_inches()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#move_inches","content":" Description​  This method uses a best fit linear approximation of the distance traveled over time. It uses the equation y = mx + b, where:  y is the distance traveledm is the predicted speed in inches per secondx is the time elapsedb is the slope intercept  If the PID values are not set the internal default values will be set.  If the angle is not input Zumi will drive to whatever angle it is currently facing.  Syntax​  move_inches(distance, angle) move_inches(distance, angle=None, k_p=None, k_i=None, k_d=None)   Parameters​  distance: the distance in inches you want to travel angle: heading (0 degrees is defined when the Zumi object is created.) Default to None k_p: P-gain. Default to None. k_i: I-gain. Default to None. k_d: D-gain. Default to None.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.move_inches(5) zumi.move_inches(6,90) zumi.move_inches(5,0)     ","version":"Next","tagName":"h3"},{"title":"move_to_coordinate()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#move_to_coordinate","content":" Description​  This method drives Zumi from an origin to an x,y position in inches. Using this function will keep track of Zumi's coordinates. To reset the origin, use the reset_coordinate() function. This method uses a best fit linear approximation of the distance traveled over time. It uses the equation y = mx + b, where:  y is the distance traveledm is the predicted speed in inches per secondx is the time elapsedb is the slope intercept  Syntax​  move_to_coordinate(desired_x, desired_y) move_to_coordinate(desired_x, desired_y, k_p=None, k_i=None, k_d=None, units=&quot;in&quot;):   Parameters​  desired_x: The x-coordinate of the destination desired_y: The y-coordinate of the destination k_p: P-gain. Default to None. k_i: I-gain. Default to None. k_d: D-gain. Default to None. units: Defaults to &quot;in&quot; or inches. Set it to &quot;cm&quot; for centimeters.   Returns​  None  Example Code​  Python Sample 1​  #Python code from zumi.zumi import Zumi zumi = Zumi() # a square zumi.move_to_coordinate(6,0) zumi.move_to_coordinate(6,6) zumi.move_to_coordinate(0,6) zumi.move_to_coordinate(0,0)   Python Sample 2​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() # Avoid this zumi.move_to_coordinate(10,0) time.sleep(1) # zumi wont drive the second time since its already at (10, 0) zumi.move_to_coordinate(10,0)   Python Sample 3​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() # Avoid this zumi.move_to_coordinate(10,0) time.sleep(1) zumi.reset_coordinate() # zumi will drive the second time since its position will be reset, and will move a total of 20 inches from the start zumi.move_to_coordinate(10,0)     ","version":"Next","tagName":"h3"},{"title":"parallel_park()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#parallel_park","content":" Description​  Drives Zumi in a parallel park maneuver.  Syntax​  parallel_park() parallel_park(speed=15, step=1, delay=0.01)   Parameters​  speed: Drive speed between 0 and 80 step: The angle step size (decrease for wider turns, increase for tighter turns) delay: The time delay between each angle step   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.parallel_park(speed=20, step=2)     ","version":"Next","tagName":"h3"},{"title":"rectangle_left()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#rectangle_left","content":" Description​  Drives Zumi in a counterclockwise rectangle.  Syntax​  rectangle_left() rectangle_left(speed=40, seconds=1.0, ratio=2)   Parameters​  speed: Drive speed between 0-80 seconds: Duration in seconds for shorter side ratio: Ratio of longer side to shorter side (Multiply ratio by seconds to get the duration of the longer side)   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.rectangle_left(ratio=3)     ","version":"Next","tagName":"h3"},{"title":"rectangle_right()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#rectangle_right","content":" Description​  Drives Zumi in a clockwise rectangle.  Syntax​  rectangle_right() rectangle_right(speed=40, seconds=1.0, ratio=2)   Parameters​  speed: Drive speed between 0-80 seconds: Duration in seconds for shorter side ratio: Ratio of longer side to shorter side (Multiply ratio by seconds to get the duration of the longer side)   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.rectangle_right(ratio=3)     ","version":"Next","tagName":"h3"},{"title":"rectangle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#rectangle","content":" Description​  Drives Zumi in a rectangle.  Syntax​  rectangle() rectangle(speed=40, seconds=1.0, direction=1, ratio=2)   Parameters​  speed: Drive speed between 0-80 seconds: Duration in seconds for shorter side direction: 1 for counterclockwise and -1 for clockwise ratio: Ratio of longer side to shorter side (Multiply ratio by seconds to get the duration of the longer side)   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.rectangle(ratio=3)     ","version":"Next","tagName":"h3"},{"title":"reset_coordinate()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#reset_coordinate","content":" Description​  Will reset the coordinate to (0,0).  Syntax​  reset_coordinate()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.move_to_coordinate(10,0) zumi.reset_coordinate() #zumi will drive another 10 inches zumi.move_to_coordinate(10,0)     ","version":"Next","tagName":"h3"},{"title":"reverse_avoid_collision()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#reverse_avoid_collision","content":" Description​  Drives Zumi in reverse at a default speed of 40 for 1 second in the direction Zumi is currently facing. If either of the back IR sensor values go below the threshold, Zumi will stop even if the duration or timeout is not complete.  Syntax​  reverse_avoid_collision(speed=40, duration=1.0) reverse_avoid_collision(speed=40, duration=1.0, desired_angle=None, left_th=150, right_th=150)   Parameters​  speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will drive and check for collision desired_angle: Heading or desired angle (Default to None which is Zumi's current heading) left_th: threshold of the back left IR sensor right_th: threshold of the back right IR sensor   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.reverse_avoid_collision(40,2)     ","version":"Next","tagName":"h3"},{"title":"reverse_step()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#reverse_step","content":" Description​  Takes one drive &quot;step&quot; in reverse to correct for the set heading. This function only works when called inside of a loop.  Syntax​  reverse_step(speed, desired_angle) reverse_step(speed, desired_angle, max_speed=127)   Parameters​  speed: Drive speed between 0 and 127; must be below the max_speed desired_angle: heading (0 degrees is defined when the Zumi object is created.) max_speed: Caps the max speed. Default to 127.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0, 200): zumi.reverse_step(80,0) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"reverse()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#reverse","content":" Description​  Drives Zumi in reverse at a default speed of 40 for 1 second in the direction Zumi is currently facing.  Syntax​  reverse() reverse(speed=40, duration=1.0, desired_angle=None)   Parameters​  speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will drive reverse desired_angle: Heading or desired angle to drive in (When None is selected Zumi drives wherever she is facing)  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.reverse() time.sleep(1) zumi.reverse(speed=50) time.sleep(1) zumi.reverse(duration=2.1) time.sleep(1)     ","version":"Next","tagName":"h3"},{"title":"right_u_turn()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#right_u_turn","content":" Description​  Drives Zumi in a right u-turn.  Syntax​  right_u_turn() right_u_turn(speed=30, step=4, delay=0.02)   Parameters​  speed: Positive value for forward speed between 0 and 80 step: The angle step size (decrease for wider turns, increase for tighter turns) delay: The time delay between each angle step.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.right_u_turn(speed=20) time.sleep(1) zumi.right_u_turn(delay=0.04)     ","version":"Next","tagName":"h3"},{"title":"smooth_forward()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#smooth_forward","content":" Description​  Causes Zumi to gradually accelerate forward to max speed during a given duration before decelerating back to zero.  Syntax​  smooth_forward(duration) smooth_forward(duration, rate=1)   Parameters​  duration: Total duration of drive command including acceleration and deceleration rate: rate at which speed changes. Default to 1   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_forward(3) time.sleep(1) zumi.smooth_forward(duration=3,rate=2)     ","version":"Next","tagName":"h3"},{"title":"smooth_reverse()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#smooth_reverse","content":" Description​  Causes Zumi to gradually accelerate in reverse to max speed during a given duration before decelerating back to zero.  Syntax​  smooth_reverse(duration) smooth_reverse(duration, rate=1)   Parameters​  duration: Total duration of drive command including acceleration and deceleration rate: rate at which speed changes. Default to 1   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_reverse(3) time.sleep(1) zumi.smooth_reverse(duration=3,rate=2)     ","version":"Next","tagName":"h3"},{"title":"smooth_turn_left()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#smooth_turn_left","content":" Description​  Turns left gradually to reach the desired angle while also going forward. Default to 90 degrees.  Syntax​  smooth_turn_left() smooth_turn_left(desired_angle=90,speed=20,step=2)   Parameters​  desired_angle: Degrees you want to turn from your starting position speed: Positive integer value for speed between 0 and 80. Default to 20. step: The angle step size (decrease for wider turns, increase for tighter turns)   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_turn_left() time.sleep(1) zumi.smooth_turn_left(speed=30)     ","version":"Next","tagName":"h3"},{"title":"smooth_turn_right()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#smooth_turn_right","content":" Description​  Turns right gradually to reach the desired angle while also going forward. Default to 90 degrees.  Syntax​  smooth_turn_right() smooth_turn_right(desired_angle=90,speed=20,step=2)   Parameters​  desired_angle: Degrees you want to turn from your starting position speed: Positive integer value for speed between 0 and 80. Default to 20. step: The angle step size (decrease for wider turns, increase for tighter turns)   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_turn_right() time.sleep(1) zumi.smooth_turn_right(speed=30)     ","version":"Next","tagName":"h3"},{"title":"speed_calibration()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#speed_calibration","content":" Description​  In order to use this method you will need a speed calibration sheet (Click here for a PDF version). Zumi will drive over 5 horizontal white lines that are 2 centimeters wide. The slope and y_intercept will be generated for the best fit line of the speed prediction. These values will be saved to the Zumi as a text file.  This function is necessary for move_to_coordinate(), move_inches(), and move_centimeters().  Syntax​  speed_calibration() speed_calibration(speed=40, ir_threshold=100, time_out=3, cm_per_brick=2, show_graphs=False)   Parameters​  speed: Integer value that goes from (0 - 80). The lower the more accurate the speed prediction. ir_threshold: Integer value for the bottom left IR threshold (0-255). time_out: The number of seconds before the timeout. cm_per_brick: The width of each road marker in centimeters. show_graphs: Boolean default to False. If set to True, a graph will be displayed with the best fit line prediction. *Note: You may need to run this function twice to see the graph.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() # Place Zumi on the black portion of the speed calibration sheet zumi.speed_calibration() # To show the graphs, replace the original &quot;zumi.speed_calibration&quot; with the following line # zumi.speed_calibration(show_graphs = True)     ","version":"Next","tagName":"h3"},{"title":"square_left()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#square_left","content":" Description​  Drives Zumi in a counterclockwise square.  Syntax​  square_left() square_left(speed=40, seconds=1.0)   Parameters​  speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.square_left(seconds=1.5)     ","version":"Next","tagName":"h3"},{"title":"square_right()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#square_right","content":" Description​  Drives Zumi in a clockwise square.  Syntax​  square_right() square_right(speed=40, seconds=1.0)   Parameters​  speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.square_right(seconds=1.5)     ","version":"Next","tagName":"h3"},{"title":"square()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#square","content":" Description​  Drives Zumi in a square. Default to counterclockwise.  Syntax​  square() square(speed=40, seconds=1, direction=1)   Parameters​  speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side direction: -1 for clockwise and +1 for counterclockwise   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.square(seconds=1.0) time.sleep(1) zumi.square(speed=60,seconds=1.2)     ","version":"Next","tagName":"h3"},{"title":"stop()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#stop","content":" Description​  Stops Zumi's motors immediately.  Syntax​  stop()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() for i in range(0, 30): zumi.go_straight(30,0) zumi.stop()     ","version":"Next","tagName":"h3"},{"title":"triangle_left()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#triangle_left","content":" Description​  Drives Zumi in a counterclockwise triangle.  Syntax​  triangle_left() triangle_left(speed=40, seconds=1.5)   Parameters​  speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.triangle_left(speed=30)     ","version":"Next","tagName":"h3"},{"title":"triangle_right()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#triangle_right","content":" Description​  Drives Zumi in a clockwise triangle.  Syntax​  triangle_right() triangle_right(speed=40, seconds=1.5)   Parameters​  speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.triangle_right(speed=30)     ","version":"Next","tagName":"h3"},{"title":"triangle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#triangle","content":" Description​  Drives Zumi in a triangle. Default is counterclockwise.  Syntax​  triangle() triangle(speed=40, seconds=1.5, direction=1)   Parameters​  speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side direction: -1 for clockwise and +1 for counterclockwise  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.triangle(speed=30, direction=-1)     ","version":"Next","tagName":"h3"},{"title":"turn_left()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#turn_left","content":" Description​  Causes Zumi to turn left the specified number of degrees. Default to 90 degrees.  Syntax​  turn_left() turn_left(desired_angle=90, duration=1.0)   Parameters​  desired_angle: Degrees you want to turn to the left from your starting position. Default to 90. Only positive values. duration: The amount of time in seconds Zumi will try and complete the turn. Increase for turns greater than 90 degrees.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.turn_left() time.sleep(1) zumi.turn_left(130,1.5)     ","version":"Next","tagName":"h3"},{"title":"turn_right()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#turn_right","content":" Description​  Causes Zumi to turn right the specified number of degrees. Default to 90 degrees.  Syntax​  turn_right() turn_right(desired_angle=90,duration=1.0)   Parameters​  desired_angle: Degrees you want to turn to the right from your starting position. Default to 90. Only positive values. duration: The amount of time in seconds Zumi will try and complete the turn. Increase for turns greater than 90 degrees.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.turn_right(45) time.sleep(1) zumi.turn_right(200,duration=1.3)     ","version":"Next","tagName":"h3"},{"title":"turn()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#turn","content":" Description​  Zumi will turn to a desired angle.  Syntax​  turn(desired_angle) turn(desired_angle, duration=1.5, max_speed=25, accuracy=1):   Parameters​  desired_angle: Angle to turn. Positive degrees to the left. Negative degrees to the right. duration: Number of seconds Zumi will perform the command. speed: The max motor speed for turning. A positive integer value between 0 and 80. accuracy: The tolerance of +- degrees.Ex: an accuracy = 1 will be +1 or -1 degree off from desired_angle.   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() # zumi will turn to the left zumi.turn(90) #zumi will turn to the right 90 degrees from the starting angle zumi.turn(-90)     ","version":"Next","tagName":"h3"},{"title":"LEDs and Buzzer​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#leds-and-buzzer","content":" ","version":"Next","tagName":"h2"},{"title":"all_lights_off()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#all_lights_off","content":" Description​  Turns all LEDs off  Syntax​  all_lights_off()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.all_lights_on() time.sleep(2) zumi.all_lights_off()     ","version":"Next","tagName":"h3"},{"title":"all_lights_on()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#all_lights_on","content":" Description​  Turns all LEDs on the 2 front white leds and the rear 2 leds.  Syntax​  all_lights_on()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.all_lights_on()     ","version":"Next","tagName":"h3"},{"title":"brake_lights_off()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#brake_lights_off","content":" Description​  Turns off front LEDs only  Syntax​  brake_lights_off()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.brake_lights_on() time.sleep(2) zumi.brake_lights_off()     ","version":"Next","tagName":"h3"},{"title":"brake_lights_on()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#brake_lights_on","content":" Description​  Turns on back LEDs only  Syntax​  brake_lights_on()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.brake_lights_on()     ","version":"Next","tagName":"h3"},{"title":"hazard_lights_off()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#hazard_lights_off","content":" Description​  Turns off flashing front and back LEDs  Syntax​  hazard_lights_off()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.hazard_lights_on() time.sleep(2) zumi.hazard_lights_off()     ","version":"Next","tagName":"h3"},{"title":"hazard_lights_on()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#hazard_lights_on","content":" Description​  Flashes both front and back LEDs  Syntax​  hazard_lights_on()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.hazard_lights_on()     ","version":"Next","tagName":"h3"},{"title":"headlights_off()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#headlights_off","content":" Description​  Turns off front LEDs only  Syntax​  headlights_off()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.headlights_on() time.sleep(2) zumi.headlights_off()     ","version":"Next","tagName":"h3"},{"title":"headlights_on()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#headlights_on","content":" Description​  Turns on front LEDs only  Syntax​  headlights_on()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.headlights_on() time.sleep(2) zumi.all_lights_off()     ","version":"Next","tagName":"h3"},{"title":"play_note()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#play_note","content":" Description​  Play a note, from C2 - B6.  Syntax​  play_note(note_type) play_note(note_type, note_duration=500)   Parameters​  note_type: Integer from 0 to 60 or enum from Note class. Setting the note to 0 will result in no sound. note_duration: Default to 500 milliseconds but can be an integer from 0 to 2500 milliseconds. Must be in 100 millisecond increments ex. 100, 200, 500, 2000. If 0 note will play forever.   class Note: C2 = 1 CS2 = 2 D2 = 3 DS2 = 4 E2 = 5 F2 = 6 FS2 = 7 G2 = 8 GS2 = 9 A2 = 10 AS2 = 11 B2 = 12 C3 = 13 CS3 = 14 D3 = 15 DS3 = 16 E3 = 17 F3 = 18 FS3 = 19 G3 = 20 GS3 = 21 A3 = 22 AS3 = 23 B3 = 24 C4 = 25 CS4 = 26 D4 = 27 DS4 = 28 E4 = 29 F4 = 30 FS4 = 31 G4 = 32 GS4 = 33 A4 = 34 AS4 = 35 B4 = 36 C5 = 37 CS5 = 38 D5 = 39 DS5 = 40 E5 = 41 F5 = 42 FS5 = 43 G5 = 44 GS5 = 45 A5 = 46 AS5 = 47 B5 = 48 C6 = 49 CS6 = 50 D6 = 51 DS6 = 52 E6 = 53 F6 = 54 FS6 = 55 G6 = 56 GS6 = 57 A6 = 58 AS6 = 59 B6 = 60   Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.protocol import Note import time zumi = Zumi() zumi.play_note(30, 500) time.sleep(1) zumi.play_note(Note.C4) time.sleep(1) # will stop the buzzer zumi.play_note(0, 0)     ","version":"Next","tagName":"h3"},{"title":"signal_left_off()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#signal_left_off","content":" Description​  Turns off flashing both left front and left back LEDs  Syntax​  signal_left_off()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.signal_left_on() time.sleep(2) zumi.signal_left_off()     ","version":"Next","tagName":"h3"},{"title":"signal_left_on()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#signal_left_on","content":" Description​  Flashes both left front and left back LEDs  Syntax​  signal_left_on()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.signal_left_on()     ","version":"Next","tagName":"h3"},{"title":"signal_right_off()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#signal_right_off","content":" Description​  Turns off flashing both right front and right back LEDs  Syntax​  signal_right_off()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.signal_right_on() time.sleep(2) zumi.signal_right_off()     ","version":"Next","tagName":"h3"},{"title":"signal_right_on()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#signal_right_on","content":" Description​  Flashes both right front and right back LEDs  Syntax​  signal_right_on()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.signal_right_on()     ","version":"Next","tagName":"h3"},{"title":"Camera​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#camera","content":" ","version":"Next","tagName":"h2"},{"title":"capture()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#capture","content":" Description​  Takes a picture using the PiCamera and saves it in an array.  Syntax​  capture()  Parameters​  None  Returns​  Numpy array representing captured image (type: ndarray)  Example Code​  Python​  #Python code from zumi.util.camera import Camera import time camera=Camera() camera.start_camera() frame = camera.capture() camera.show_image(frame) time.sleep(5) camera.close()     ","version":"Next","tagName":"h3"},{"title":"clear_output()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#clear_output","content":" Description​  Clear the output for the next image to show.  Syntax​  clear_output()  Parameters​  None  Returns​  None  Example Code​  Python​  from zumi.util.camera import Camera camera = Camera() camera.start_camera() try: for x in range(30): frame = camera.capture() camera.show_image(frame) camera.clear_output() # Clear the output for the next image to show finally: camera.close()     ","version":"Next","tagName":"h3"},{"title":"close()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#close","content":" Description​  Releases camera's resources  Syntax​  close()  Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.camera import Camera camera=Camera() camera.start_camera() camera.save_photo() camera.close()     ","version":"Next","tagName":"h3"},{"title":"is_closed()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#is_closed","content":" Description​  Checks if the camera stream is open  Syntax​  is_closed()  Parameters​  None  Returns​  Boolean (type: boolean)  Example Code​  Python​  #Python code from zumi.util.camera import Camera camera=Camera() camera.start_camera() camera.close() print(&quot;Camera is closed?&quot;) print(camera.is_closed()) if not camera.is_closed(): camera.close()     ","version":"Next","tagName":"h3"},{"title":"save_photo()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#save_photo","content":" Description​  Captures an image and saves it in the working directory.  Syntax​  save_photo() save_photo(file_name)  Parameters​  file_name (type: string, default: current_time) : The name of the image file that will be saved  Returns​  None  Example Code​  Python​  #Python code from zumi.util.camera import Camera camera=Camera() camera.start_camera() camera.save_photo() #&quot;&lt;current_time&gt;.jpg&quot; file will be saved in the current working directory camera.save_photo(&quot;Cheese&quot;) #&quot;Cheese.jpg&quot; file will be saved in the current working directory camera.close()     ","version":"Next","tagName":"h3"},{"title":"show_image()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#show_image","content":" Description​  Displays an image taken from Zumi's camera.  Syntax​  show_image(frame)   Parameters​  frame: An image array  Returns​  None  Example Code​  Python​  #Python code from zumi.util.camera import Camera import time camera=Camera() camera.start_camera() frame = camera.capture() camera.show_image(frame) camera.close()     ","version":"Next","tagName":"h3"},{"title":"start_camera()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#start_camera","content":" Description​  Turns on the camera  Syntax​  start_camera()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.camera import Camera import cv2 import IPython.display import PIL.Image from io import BytesIO import time # you can change the resolution of the camera # using the image_w = image width # and the image_h = image heigth #camera = Camera(image_w=1280,image_h=960) #camera = Camera(image_w=1024,image_h=768) #camera = Camera(image_w=128,image_h=64) camera = Camera(image_w=60,image_h=32) camera.start_camera() time_start = time.time() try: for i in range(30): frame = camera.capture() img = PIL.Image.fromarray(frame, &quot;RGB&quot;) buffer = BytesIO() img.save(buffer,format=&quot;JPEG&quot;) IPython.display.display(IPython.display.Image(data=buffer.getvalue())) IPython.display.clear_output(wait=True) finally: print(30/(time.time()-time_start))     ","version":"Next","tagName":"h3"},{"title":"predict()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#predict","content":" Description​  Predicts a color captured from the Zumi camera.  Syntax​  predict(pred_features)   Parameters​  pred_features: The image to draw the prediction from  Returns​  predicts: The prediction made by the knn color classifier  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.camera import Camera from zumi.util.screen import Screen from zumi.util.color_classifier import ColorClassifier import time camera = Camera() screen = Screen() zumi = Zumi() knn = ColorClassifier() train = knn.load_model(&quot;project_name&quot;) knn.fit(&quot;hsv&quot;) camera.start_camera() while True: user_input = input(&quot;Press 'enter' to predict or 'q to quit: &quot;) if user_input == &quot;q&quot;: break image = camera.capture() predict = knn.predict(image) # Based on the image taken, the knn color classifier will predict a color screen.draw_text_center(predict) # This prediction gets written to the Zumi screen camera.close()     ","version":"Next","tagName":"h3"},{"title":"fit()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#fit","content":" Description​  Fits values for prediction. By default, HSV is fitted.  Syntax​  fit(values)   Parameters​  values: values to be fitted for prediction. By default hsv is fitted.  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.camera import Camera from zumi.util.screen import Screen from zumi.util.color_classifier import ColorClassifier import time camera = Camera() screen = Screen() zumi = Zumi() knn = ColorClassifier() train = knn.load_model(&quot;project_name&quot;) knn.fit(&quot;hsv&quot;) # Fitting to HSV camera.start_camera() while True: user_input = input(&quot;Press 'enter' to predict or 'q to quit: &quot;) if user_input == &quot;q&quot;: break image = camera.capture() predict = knn.predict(image) screen.draw_text_center(predict) camera.close()     ","version":"Next","tagName":"h3"},{"title":"load_model()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#load_model","content":" Description​  Loads the model based on your project name.  Syntax​  load_model(name)   Parameters​  name: The project name. This will depend on what you chose to name your project  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.camera import Camera from zumi.util.screen import Screen from zumi.util.color_classifier import ColorClassifier import time camera = Camera() screen = Screen() zumi = Zumi() knn = ColorClassifier() train = knn.load_model(&quot;project_name&quot;) # Loads the model based on your project name. Make sure to use the project name you chose! knn.fit(&quot;hsv&quot;) camera.start_camera() while True: user_input = input(&quot;Press 'enter' to predict or 'q to quit: &quot;) if user_input == &quot;q&quot;: break image = camera.capture() predict = knn.predict(image) screen.draw_text_center(predict) camera.close()     ","version":"Next","tagName":"h3"},{"title":"Screen​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#screen","content":" ","version":"Next","tagName":"h2"},{"title":"angry()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#angry","content":" Description​  Draws Zumi's angry eyes on the screen.  Syntax​  angry()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.angry()     ","version":"Next","tagName":"h3"},{"title":"blink()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#blink","content":" Description​  Draws Zumi's blinking animation on the screen.  Syntax​  blink()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.blink()     ","version":"Next","tagName":"h3"},{"title":"clear_display()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#clear_display","content":" Description​  Clears everything on the OLED by drawing a black rectangle.  Syntax​  clear_display()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.print(&quot;Hello&quot;) screen.clear_display()     ","version":"Next","tagName":"h3"},{"title":"clear_drawing()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#clear_drawing","content":" Description​  Clears the drawing canvas object without clearing the OLED screen. Use this before using any new draw functions.  Syntax​  clear_drawing()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_circle(30,30,10) time.sleep(1) screen.clear_drawing() screen.print(&quot;Hello&quot;)     ","version":"Next","tagName":"h3"},{"title":"clock()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#clock","content":" Description​  Clears the screen and draws a clock with the given hour and minute set by the user.  Syntax​  clock(hour, minute) clock(hour, minute, string='', font_size=18)   Parameters​  hour: Integer for the hour minute: Integer for the minute string: an 8 character String to be displayed under the clock (optional). Defaults to an empty string. font_size: the font-size of the time  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.clock(3,15,&quot;Monday&quot;)     ","version":"Next","tagName":"h3"},{"title":"close_eyes()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#close_eyes","content":" Description​  Draws Zumi's closed eyes on the screen.  Syntax​  close_eyes()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.close_eyes()     ","version":"Next","tagName":"h3"},{"title":"draw_arc()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_arc","content":" Description​  Draws an arc within the boundaries of points x1,y1, and x2,y2 at the specified starting and ending angles.  Syntax​  draw_arc(x1, y1, x2, y2, start_ang, end_ang) draw_arc(x1, y1, x2, y2, start_ang, end_ang,fill_in=True)   Parameters​  x1: x coordinate of top-left corner for the rectangle enclosing the arc y1: y coordinate of top-left corner for the rectangle enclosing the arc x2: x coordinate of bottom-right corner for the rectangle enclosing the arc y2: y coordinate of bottom-right corner for the rectangle enclosing the arc start_ang: starting arc angle end_ang: ending arc angle fill_in: Boolean that selects if the triangle will be filled in (white). Default to True.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen=Screen() screen.draw_arc(0,0,50,50,-180,0)     ","version":"Next","tagName":"h3"},{"title":"draw_chord()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_chord","content":" Description​  Draws a chord within the boundaries of points x1,y1, and x2,y2 at the specified starting and ending angles.  Syntax​  draw_chord(x1, y1, x2, y2, start_ang, end_ang) draw_chord(x1, y1, x2, y2, start_ang, end_ang,fill_in=True)   Parameters​  x1: x coordinate of top-left corner for the rectangle enclosing the chord y1: y coordinate of top-left corner for the rectangle enclosing the chord x2: x coordinate of bottom-right corner for the rectangle enclosing the chord y2: y coordinate of bottom-right corner for the rectangle enclosing the chord start_ang: starting angle end_ang: ending angle fill_in: Boolean that selects if the triangle will be filled in (white). Default to True.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen=Screen() screen.draw_chord(0,0,20,20,-180,0) screen.draw_chord(30,30,50,50,-180,0) #do a 360 from -180 degrees to 180 degrees screen.draw_chord(60,30,100,50,-180,180)     ","version":"Next","tagName":"h3"},{"title":"draw_circle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_circle","content":" Description​  Draws a circle that fits inside a square with its top-left corner at x,y and a width/height of the circle's diameter.  Syntax​  draw_circle(x, y, diameter) draw_circle(x, y, diameter, fill_in=True)   Parameters​  x: x coordinate of the top-left corner of the enclosing square y: y coordinate of the top-left corner of the enclosing square diameter: diameter of the circle (also the width and height of enclosing square) fill_in: Boolean that selects if the triangle will be filled in (white). Default to True.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_circle(10,0,20,fill_in=False)     ","version":"Next","tagName":"h3"},{"title":"draw_ellipse()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_ellipse","content":" Description​  Draws an ellipse that fits in a rectangle with its top-left corner at x,y and a set width and height.  Syntax​  draw_ellipse(self, x, y, width, height) draw_ellipse(self, x, y, width, height, fill_in=True)   Parameters​  x: x coordinate of the top-left corner of the enclosing rectangle y: y coordinate of the top-left corner of the enclosing rectangle width: width of enclosing rectangle height: height of enclosing rectangle fill_in: Boolean that selects if the triangle will be filled in (white). Default to True.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_ellipse(0,0,100,30,fill_in=True)     ","version":"Next","tagName":"h3"},{"title":"draw_image()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_image","content":" Description​  Draws the image on the screen.  Syntax​  draw_image(img)   Parameters​  img: An image  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() path = &quot;/usr/local/lib/python3.5/dist-packages/zumi/util/images/happy1.ppm&quot; screen.draw_image(screen.path_to_image(path))     ","version":"Next","tagName":"h3"},{"title":"draw_line()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_line","content":" Description​  Draws a line between points (x1,y1) and (x2,y2).  Syntax​  draw_line(x1, y1, x2, y2) draw_line(x1, y1, x2, y2, thickness=1,fill_in=True)   Parameters​  x1: x coordinate of the starting point y1: y coordinate of the starting point x2: x coordinate of the ending point y2: y coordinate of the ending point thickness: pixel width of the line fill_in: Boolean that selects if the line will be filled in (white). Default to True.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_line(0,0,40,40,fill_in=True) screen.draw_line(40,0,0,40,thickness=10,fill_in=True)     ","version":"Next","tagName":"h3"},{"title":"draw_point()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_point","content":" Description​  Draws a single pixel at the set x and y coordinate.  Syntax​  draw_point(x, y) draw_point(x, y,fill_in=True)   Parameters​  x: the x coordinate y: the y coordinate fill_in: Boolean that selects if the point will be filled in (white). Default to True.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_point(100,30)     ","version":"Next","tagName":"h3"},{"title":"draw_polygon()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_polygon","content":" Description​  Draws lines between points in a given list [(x1,y1),...,(xn,yn)] to form a shape.  Syntax​   draw_polygon(points_list) draw_polygon(points_list,fill_in = True):   Parameters​  points_list: A list [x1,y1,x2,y2,....xn,yn] with at least 3 points fill_in: Boolean that selects if the polygon will be filled in (white). Default to True.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() points = [(30,50),(90,10),(20,10),(5,20)] screen.draw_polygon(points)     ","version":"Next","tagName":"h3"},{"title":"draw_rect()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_rect","content":" Description​  Draws a rectangle on the screen.  Syntax​  draw_rect(x, y, width, height) draw_rect(x, y, width, height, thickness=1, fill_in=False)   Parameters​  x: the top left corner x coordinate y: the top left corner y coordinate width: width of rectangle height: height of rectangle thickness: thickness of rectangle border, default to 1 fill_in: Boolean that selects if the shape will be filled in. Default to False.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_rect(0,0,128,64,thickness=1,fill_in=True)     ","version":"Next","tagName":"h3"},{"title":"draw_square()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_square","content":" Description​  Draws a square on the screen.  Syntax​  draw_square(x, y, width) draw_square(x, y, width, thickness=1, fill_in=False)   Parameters​  x: the top left corner x coordinate y: the top left corner y coordinate width: width of each side thickness: thickness of rectangle border, default to 1 fill_in: Boolean that selects if the shape will be filled in. Default to False.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_square(0,0,30,thickness=1,fill_in=True)     ","version":"Next","tagName":"h3"},{"title":"draw_text_center()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_text_center","content":" Description​  Draws text to the center of the screen  Syntax​  draw_text_center(string, font_size=16) draw_text_center(string) draw_text_center(string, font_size)   Parameters​  string (type: string): The string that zumi will show on the screenfont_size (type: integer, default: 16): The font size of the string  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_text_center('hello',font_size=10) time.sleep(0.5) screen.draw_text_center('hello',font_size=20) time.sleep(0.5) screen.draw_text_center('hello',font_size=30) time.sleep(0.5) screen.draw_text_center('hello',font_size=40) time.sleep(0.5) screen.draw_text_center('hello',font_size=50) time.sleep(0.5)     ","version":"Next","tagName":"h3"},{"title":"draw_text()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_text","content":" Description​  Draws text to the upper lefthand corner of the screen  Syntax​  draw_text(string) draw_text(string, x, y, font_size) (display, clear)..  Parameters​  string (type: string): The string that zumi will show on the screen x (type: integer, default: 1): The x coordinate start value of the string y (type: integer, default: 1): The y coordinate start value of the string font_size (type: integer, default: 16): The font size of the string  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() for i in range(10): screen.draw_text(str(i)+'!') time.sleep(0.1) screen.clear_display()     ","version":"Next","tagName":"h3"},{"title":"draw_triangle()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#draw_triangle","content":" Description​  Draws a triangle with 3 points (x1,y1), (x2,y2), (x3,y3): x1, y1, x2, y2, x3, y3.  Syntax​   draw_triangle(x1,y1,x2,y2,x3,y3) draw_triangle(x1,y1,x2,y2,x3,y3,fill_in=True):   Parameters​  x1: the x coordinate of point 1 y1: the y coordinate of point 1 x2: the x coordinate of point 2 y2: the y coordinate of point 2 x3: the x coordinate of point 3 y3: the y coordinate of point 3 fill_in: Boolean that selects if the triangle will be filled in (white). Default to True.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen=Screen() screen.draw_triangle(0,10,20,50,50,0)     ","version":"Next","tagName":"h3"},{"title":"glimmer()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#glimmer","content":" Description​  Draws an animation of Zumi's eyes glimmering on the screen.  Syntax​  glimmer()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.glimmer()     ","version":"Next","tagName":"h3"},{"title":"happy()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#happy","content":" Description​  Draws an animation of Zumi's happy eyes.  Syntax​  happy()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.happy()     ","version":"Next","tagName":"h3"},{"title":"hello()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#hello","content":" Description​  Draws Zumi's default eyes on the screen.  Syntax​  hello   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.hello()     ","version":"Next","tagName":"h3"},{"title":"look_around_open()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#look_around_open","content":" Description​  Draws Zumi's eyes looking around left and right on the screen.  Syntax​  look_around_open()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.look_around_open()     ","version":"Next","tagName":"h3"},{"title":"look_around()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#look_around","content":" Description​  Makes zumi look around  Syntax​  look_around()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.look_around()     ","version":"Next","tagName":"h3"},{"title":"print()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#print","content":" Description​  Prints any number of Strings on the screen.  Syntax​  print(*messages) print(*messages,x=0, y=0, fill_in=True,font_size=12)   Parameters​  messages: Any number of Strings that will print to the screen x: x coordinate of the String. Default to 0. y: y coordinate of the String. Default to 0. fill_in: Boolean that selects if text will be white(True) or black (False). Default to True. font_size: Pixel size of the font. Default to 12.   Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen import time screen=Screen() screen.print(&quot;12345678&quot;) screen.print(&quot;hello&quot;, y=15) screen.print(&quot;\\n\\n&quot;,&quot;Zumi&quot;) time.sleep(1) screen.clear_drawing() screen.print(&quot;ZUMI&quot;,font_size=20)     ","version":"Next","tagName":"h3"},{"title":"sad()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#sad","content":" Description​  Draws Zumi's sad eyes on the screen.  Syntax​  sad()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.sad()     ","version":"Next","tagName":"h3"},{"title":"show_screen()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#show_screen","content":" Description​  Displays an image on Zumi's screen taken from Zumi's camera.  Syntax​  show_image(frame)   Parameters​  frame: An image array  Returns​  None  Example Code​  Python​  from zumi.util.screen import Screen from zumi.util.camera import Camera camera.start_camera() # Turn on the camera image = camera.capture() # Take a picture camera.close() # Make sure to close the camera stream screen.show_image(image) # Display image on OLED     ","version":"Next","tagName":"h3"},{"title":"sleeping()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#sleeping","content":" Description​  Draws an animation of Zumi sleeping on the screen.  Syntax​  sleeping()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.sleeping()     ","version":"Next","tagName":"h3"},{"title":"sleepy_eyes()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#sleepy_eyes","content":" Description​  Draws Zumi's sleepy eyes on the screen.  Syntax​  sleepy_eyes()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.sleepy_eyes()     ","version":"Next","tagName":"h3"},{"title":"sleepy_left()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#sleepy_left","content":" Description​  Draws a sleepy left eye on the screen.  Syntax​  sleepy_left()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.sleepy_left()     ","version":"Next","tagName":"h3"},{"title":"sleepy_right()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#sleepy_right","content":" Description​  Draws a sleepy right eye on the screen.  Syntax​  sleepy_right()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.util.screen import Screen screen = Screen() screen.sleepy_right()     ","version":"Next","tagName":"h3"},{"title":"Personality​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#personality","content":" ","version":"Next","tagName":"h2"},{"title":"angry()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#angry-1","content":" Description​  Draws Zumi's angry eyes on the screen.  Syntax​  angry()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.angry()     ","version":"Next","tagName":"h3"},{"title":"awake()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#awake","content":" Description​  Draws Zumi opening her eyes with the wake up sound effect.  Syntax​  awake()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.awake()     ","version":"Next","tagName":"h3"},{"title":"celebrate()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#celebrate","content":" Description​  Makes Zumi celebrate.  Syntax​  celebrate()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.celebrate()     ","version":"Next","tagName":"h3"},{"title":"disoriented_left()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#disoriented_left","content":" Description​  Draws Zumi's eyes looking to the left with the disoriented sound effect.  Syntax​  disoriented_left()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.disoriented_left()     ","version":"Next","tagName":"h3"},{"title":"disoriented_right()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#disoriented_right","content":" Description​  Draws Zumi's eyes looking to the right with the disoriented sound effect.  Syntax​  disoriented_right()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.disoriented_right()     ","version":"Next","tagName":"h3"},{"title":"happy()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#happy-1","content":" Description​  Makes Zumi wiggle and make a happy sound.  Syntax​  happy()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.happy()     ","version":"Next","tagName":"h3"},{"title":"look_around_open()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#look_around_open-1","content":" Description​  Makes Zumi look around with wide open eyes.  Syntax​  look_around_open()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.look_around_open()     ","version":"Next","tagName":"h3"},{"title":"look_around()​","type":1,"pageTitle":"Function Documentation","url":"/ja/docs/Zumi/Python/Function-Documentation#look_around-1","content":" Description​  Makes Zumi look around.  Syntax​  look_around()   Parameters​  None  Returns​  None  Example Code​  Python​  #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.look_around()  ","version":"Next","tagName":"h3"},{"title":"Function Documentation","type":0,"sectionRef":"#","url":"/ja/docs/CoDroneEDU/Python/page4","content":"Function Documentation Print Connection​ pair()​ Syntax​ pair() pair(portname) Parameters​ portname: A string containing the port name or number. Description​ This function connects your controller with the program. You can also set the specific USB port name. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # pair automatically, may not always work # drone.pair(port_name = 'COM3') # pair with a specific port drone.takeoff() drone.hover(1) drone.land() drone.close() Flight Commands (Start / Stop)​ take_off()​ Syntax​ takeoff() Parameters​ None Description​ This function makes the drone takeoff and hover. The drone will always hover for 1 second in order to stabilize before it executes the next command. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close() land()​ Syntax​ land() Parameters​ None Description​ This function makes the drone stop all commands, hover, and make a soft landing where it is. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and immediately land, it is recommended to run a hover() or time.sleep() in between the takeoff() and land(), because the CoDrone EDU may miss the land command otherwise. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) # include a hover() or time.sleep() to prevent land() from skipping drone.land() drone.close() emergency_stop()​ Syntax​ emergency_stop() Parameters​ None Description​ This function immediately stops all commands and motors, so the drone will stop flying immediately. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and emergency stop, it is recommended to run a hover() or time.sleep() in between the takeoff() and emergency_stop(), because the CoDrone EDU might miss the emergency_stop() command. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) #Recommended to have a hover() or time.sleep(1) before landing drone.emergency_stop() drone.close() set_trim()​ Syntax​ set_trim(roll, pitch) Parameters​ roll: the power of the roll, which is an int from -100 to 100 pitch: the power of the pitch, which is an int from -100 to 100 Description​ You can set the roll and pitch trim of the drone in case your drone is drifting. For example, if the drone is drifting to its right, you may want to set the roll to a small negative value. This trim will remain saved, even after powering off until you've changed the trim either programmatically, or done a reset with the remote. NOTE: If you're setting the trim right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the takeoff commmand might be skipped. Returns​ None Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() drone.set_trim(-5, 0) # example: drone is drifting right, so trim to roll left a little bit time.sleep(1) # Add a time.sleep(1) before takeoff if you're planning to set the trim before takeoff drone.takeoff() drone.hover(3) drone.land() drone.close() reset_trim()​ Syntax​ reset_trim() Parameters​ None Description​ You can reset the roll and pitch trim of the drone in case your drone is drifting. This function will reset the roll and pitch trim values back to zero. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.set_trim(5,0) print(drone.get_trim()) drone.takeoff() drone.hover(3) drone.land() drone.reset_trim() print(drone.get_trim()) drone.close() reset_sensor()​ Syntax​ reset_sensor() Parameters​ None Description​ This function will reset the gyro angles back to zero for roll, pitch, and yaw. NOTE: If you're resetting right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the take off might be skipped. Returns​ None Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() print(&quot;Before&quot;) print(&quot;X angle:&quot;, drone.get_x_angle()) print(&quot;Y angle:&quot;, drone.get_y_angle()) print(&quot;Z angle:&quot;, drone.get_z_angle()) drone.takeoff() drone.set_yaw(50) drone.move(1) drone.land() print(&quot;After&quot;) print(&quot;X angle:&quot;, drone.get_x_angle()) print(&quot;Y angle:&quot;, drone.get_y_angle()) print(&quot;Z angle:&quot;, drone.get_z_angle()) drone.reset_sensor() print(&quot;Reset&quot;) print(&quot;X angle:&quot;, drone.get_x_angle()) print(&quot;Y angle:&quot;, drone.get_y_angle()) print(&quot;Z angle:&quot;, drone.get_z_angle()) drone.close() stop_motors()​ Syntax​ stop_motors() Parameters​ None Description​ This function immediately stops all commands and motors, so the drone will stop flying immediately. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and stop_motors, it is recommended to run a hover() or time.sleep() in between the takeoff() and stop_motors(), because the CoDrone EDU might miss the stop_motors() command. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) #Recommended to have a hover() or time.sleep(1) before landing drone.stop_motors() drone.close() Flight Commands (Movement)​ avoid_wall()​ Syntax​ avoid_wall() avoid_wall(timeout) avoid_wall(distance) avoid_wall(timeout, distance) Parameters​ timeout: timeout is an optional paramaeter that is the duration in seconds that the function will run. the default value is 2 distance: distance is an optional parameter that is the distance in centimeters the drone will stop at in front of an object. the default value is 70 Description​ A looped method that makes the drone fly forward until it reaches a desired distance based on the front range sensor. The range of front sensor is from 0cm-100cm Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # fly forward until a wall is found 50 cm away. run this loop for 10 seconds. drone.avoid_wall(10, 50) drone.land() drone.close() circle()​ Syntax​ circle() circle(speed, direction) Parameters​ speed: optional parameter that is the speed the drone will move. integer from 0 - 100. default value is 75. direction: optional parameter that determines the direction of the circle. 1 is right, -1 is left. default value is 1. Description​ Flies the drone in the shape of a circle. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # default circle parameters (75, 1) drone.circle() drone.land() drone.close() detect_wall()​ Syntax​ detect_wall() detect_wall(distance) Parameters​ distance: An optional parameter that is the threshold in centimeters that will return True. The default value is 50 Description​ Returns True when a distance below the threshold is reached. The sensor range is up to 1.5 meters (150cm) Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # if a wall is detected in less than 500mm true will be returned. if drone.detect_wall(): print(&quot;wall detected!&quot;) else: print(&quot;no wall detected!&quot;) drone.land() drone.close() flip()​ Syntax​ flip() flip(direction) Parameters​ direction: optional parameter that is the direction the drone will flip. default is &quot;back&quot; Description​ This functions makes the drone flip backward, forward, right, or left. Make sure your battery percentage is over 50% for the flip to execute. Returns​ None Example Code​ Add a hover or delay after the flip if you need to stabilize before your next command. The drone takes 3-4 seconds after a flip before it can do another flight command. #Python code import time from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) drone.flip(&quot;back&quot;) # send flip command time.sleep(4) # wait for flip to complete drone.set_pitch(30) # move forward for 1 second drone.move(1) drone.set_pitch(-30) # move backward for 1 second drone.move(1) drone.land() drone.close() hover()​ Syntax​ hover(duration) Parameters​ duration: Duration of the hovering in seconds Description​ This function makes the drone hover for a given amount of time. If given no parameters, it will hover indefinitely until given a another command. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close() keep_distance()​ Syntax​ keep_distance() keep_distance(timeout) keep_distance(distance) keep_distance(timeout, distance) Parameters​ timeout: the duration in seconds that the function will execute. The default value is 2 seconds.distance: the distance in centimeters the drone will stop and maintain distance in front of an object. The default value is 50 centimeters. Description​ A looped method that makes the drone fly forward until it reaches a desired distance. Once the desired distance in reached the drone will maintain that distance. The sensor range is up to 150 cm. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # maintain a distance of 60cm from an object once detected for 10 seconds drone.keep_distance(10, 60) drone.land() drone.close() move()​ Syntax​ move(duration) Parameters​ duration: Duration of the movement Description​ The move command will move the drone based on the set flight variables (set_pitch, set_roll, etc). If given a parameter the move command will execute the movement for the given amount of seconds. If given no parameter then the drone will execute the move command indefinitley. You must takeoff() first to use a move() function. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Drone goes up for 1 second with 50 power drone.set_pitch(50) drone.move(1) # move command executes the movement for 1 second drone.land() drone.close() print_move_values()​ Syntax​ print_move_values() Parameters​ None Description​ Prints the current values of roll, pitch, yaw, and throttle flight variables. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.set_pitch(50) drone.set_roll(50) drone.print_move_values() # will print pitch and roll at 50 and throttle and yaw at 0 drone.land() drone.close() reset_move()​ Syntax​ reset_move() reset_move(attempts) Parameters​ attempts: Optional parameter that sends the reset_move command multiple times. Description​ The reset_move command will reset the values of roll, pitch, yaw, and throttle to 0. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.set_pitch(50) drone.set_roll(50) drone.reset_move() # reset the pitch and roll to 0. drone.land() drone.close() sendControl()​ Syntax​ sendControl(roll, pitch, yaw, throttle) Parameters​ roll: An int from -100 to 100 that sets the roll variable. negative is left, positive is right pitch: An int from -100 to 100 that sets the pitch variable. negative is backwards, positive is forwards yaw: An int from -100 to 100 that sets the yaw variable. negative is left, positive is right throttle: An int from -100 to 100 that sets the throttle variable. negative is down, positive is up Description​ Send roll, pitch, yaw, and throttle values to the drone. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.sendControl(0, 30, 0, 0) # setting pitch to 30 time.sleep(1) # wait for 1 second while the drone is moving forward drone.land() drone.close() sendControlWhile()​ Syntax​ sendControlWhile(roll, pitch, yaw, throttle, duration) Parameters​ roll: An int from -100 to 100 that sets the roll variable. negative is left, positive is right pitch: An int from -100 to 100 that sets the pitch variable. negative is backwards, positive is forwards yaw: An int from -100 to 100 that sets the yaw variable. negative is left, positive is right throttle: An int from -100 to 100 that sets the throttle variable. negative is down, positive is up duration: A duration in milliseconds Description​ Send roll, pitch, yaw, and throttle values to the drone continously for the given duration in milliseconds Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.sendControlWhile(0, 30, 0, 0,1000) # set pitch to 30 and move for 1000 ms (1 second) drone.land() drone.close() set_pitch()​ Syntax​ set_pitch(power) Parameters​ power: An int from -100 to 100 that sets the pitch variable. The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards. Description​ This is a setter function that allows you to set the pitch variable. Once you set pitch, you have to use move() to actually execute the movement. The pitch variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to pitch again. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Drone goes forward for 1 second with 50 power drone.set_pitch(50) drone.move(1) # move command executes the movement for 1 second drone.land() drone.close() set_roll()​ Syntax​ set_roll(power) Parameters​ power: An int from -100 to 100 that sets the roll variable. The number represents the direction and power of the output for that flight motion variable. Negative roll is left, positive roll is right. Description​ This is a setter function that allows you to set the roll variable. Once you set roll, you have to use move() to actually execute the movement. The roll variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to roll again. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_roll(50) drone.move(1) # move command executes the movement for 1 second drone.land() drone.close() set_throttle()​ Syntax​ set_throttle(power) Parameters​ power: An int from -100 to 100 that sets the throttle variable. The number represents the direction and power of the output for that flight motion variable. Negative throttle is down, positive throttle is up. Description​ This is a setter function that allows you to set the throttle variable. Once you set throttle, you have to use move() to actually execute the movement. The throttle variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to throttle again. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Drone goes up for 1 second with 50 power drone.set_throttle(50) drone.move(1) # move command executes the movement for 1 second drone.land() drone.close() set_yaw()​ Syntax​ set_yaw(power) Parameters​ power: An int from -100 to 100 that sets the yaw variable. The number represents the direction and power of the output for that flight motion variable. Negative yaw is left, positive yaw is right. Description​ This is a setter function that allows you to set the yaw variable. Once you set yaw, you have to use move()to actually execute the movement. The yaw variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to yaw again. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Drone turns right for 1 second with 50 power drone.set_yaw(50) drone.move(1) # move command executes the movement for 1 second drone.land() drone.close() spiral()​ Syntax​ spiral() spiral(speed, seconds, direction) Parameters​ speed: optional parameter that is the speed the drone will move. integer from 0 - 100. default value is 50. seconds: optional parameter that is the duration in seconds the drone flies in a downward spiral. default value is 5. direction: optional parameter that determines the direction of the spiral. 1 is right, -1 is left. default value is 1. Description​ Flies the drone in the shape of a downward spiral. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # default spiral parameters (50, 5, 1) drone.spiral() drone.land() drone.close() square()​ Syntax​ square() square(speed, seconds, direction) Parameters​ speed: optional parameter that is the speed the drone will move. integer from 0 - 100. default value is 60. seconds: optional parameter that is the duration in seconds the drone flies for each side of the square. default value is 1. direction: optional parameter that determines the direction of the square. 1 is right, -1 is left. default value is 1. Description​ Flies the drone in the shape of a square. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # default square parameters (60, 1, 1) drone.square() drone.land() drone.close() sway()​ Syntax​ sway() sway(speed, seconds, direction) Parameters​ speed: optional parameter that is the speed the drone will move. integer from 0 - 100. default value is 30. seconds: optional parameter that is the duration in seconds the drone will fly in each &quot;sway&quot; motion. default value is 2. direction: optional parameter that determines the direction of the sway. 1 is right, -1 is left. default value is 1. Description​ Flies the drone in a swaying motion. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # default sway parameters (30, 2, 1) drone.sway() drone.land() drone.close() triangle()​ Syntax​ triangle() triangle(speed, seconds, direction) Parameters​ speed: optional parameter that is the speed the drone will move. integer from 0 - 100. default value is 60. seconds: optional parameter that is the duration in seconds the drone flies for each side of the triangle. default value is 1. direction: optional parameter that determines the direction of the triangle. 1 is right, -1 is left. default value is 1. Description​ Flies the drone in the shape of a triangle. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # default triangle parameters (60, 1, 1) drone.triangle() drone.land() drone.close() turn_degree()​ Syntax​ turn_degree(degree, timeout, p_value) Parameters​ degree: integer from -180-&gt;180 degrees timeout: optional parameter that is duration in seconds that drone will try to turn. default value is 3. p_value: optional parameter that is the gain of the proportional controller, if this increased CDE will turn quicker, the smaller the slower. default value is 10. Description​ Turns right or left with absolute reference frame to drone's initial heading. Positive degrees turn to right and negative degrees turn to the left. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.turn_degree(90) # drone will turn left 90 degrees drone.land() drone.close() turn_left()​ Syntax​ turn_left() turn_left(degree) turn_left(timeout) turn_left(degree, timeout) Parameters​ degree: optional parameter that turns the drone in the given degree. default value is 90. timeout: optional parameter that is duration in seconds that drone will try to turn. default value is 3. Description​ Turns the drone left using the built in gyroscope. The default degree is 90. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.turn_left() # make a 90 degree left turn. drone.hover(1) # wait for 1 second in the air drone.turn_left(30, 3) # make a 30 degree left turn with a 3 second timeout. drone.land() drone.close() turn_right()​ Syntax​ turn_right() turn_right(degree) turn_right(timeout) turn_right(degree, timeout) Parameters​ degree: optional parameter that turns the drone in the given degree. default value is 90. timeout: optional parameter that is duration in seconds that drone will try to turn. default value is 3. Description​ Turns the drone right using the built in gyroscope. The default degree is 90. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.turn_right() # make a 90 degree right turn. drone.hover(1) # wait for 1 second in the air drone.turn_right(30, 3) # make a 30 degree right turn with a 3 second timeout. drone.land() drone.close() go()​ Syntax​ go(roll, pitch, yaw, throttle, duration) Parameters​ roll: roll power. int from -100-100 pitch: pitch power. int from -100-100 yaw: yaw power. int from -100-100 throttle: throttle power. int from -100-100 duration: Duration of the movement in seconds Description​ Sends roll, pitch, yaw, throttle values continuously to the drone for duration (seconds) Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.go(50, 50, 0, 0, 5) # Drone flies diagonally forward and right for 5 seconds drone.land() drone.close() move_forward()​ Syntax​ move_forward(distance) move_forward(distance, unit, speed) Parameters​ distance: the numerical value of the value to move unit: The unit of measurement for the distance flown. Available units are &quot;cm&quot; (centimeter), &quot;ft&quot; (feet), &quot;in&quot; (inches), &quot;m&quot; (meter). speed: default 1 meter per second. Max is 2 meters/second Description​ Moves the drone forward for the given distance and unit for that distance. Returns​ None Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() drone.takeoff() drone.move_forward(distance=50, units=&quot;cm&quot;, speed=1) time.sleep(3) # make sure to add a delay so the drone has enough time to fly drone.land() drone.close() move_backward()​ Syntax​ move_backward(distance) move_backward(distance, unit, speed) Parameters​ distance: the numerical value of the value to move unit: The unit of measurement for the distance flown. Available units are &quot;cm&quot; (centimeter), &quot;ft&quot; (feet), &quot;in&quot; (inches), &quot;m&quot; (meter). speed: default 1 meter per second. Max is 2 meters/second Description​ Moves the drone backward for the given distance and unit for that distance. Returns​ None Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() drone.takeoff() drone.move_backward(distance=50, units=&quot;cm&quot;, speed=1) time.sleep(3) # make sure to add a delay so the drone has enough time to fly drone.land() drone.close() move_left()​ Syntax​ move_left(distance) move_left(distance, unit, speed) Parameters​ distance: the numerical value of the value to move unit: The unit of measurement for the distance flown. Available units are &quot;cm&quot; (centimeter), &quot;ft&quot; (feet), &quot;in&quot; (inches), &quot;m&quot; (meter). speed: default 1 meter per second. Max is 2 meters/second Description​ Moves the drone left for the given distance and unit for that distance. Returns​ None Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() drone.takeoff() drone.move_left(distance=50, units=&quot;cm&quot;, speed=1) time.sleep(3) # make sure to add a delay so the drone has enough time to fly drone.land() drone.close() move_right()​ Syntax​ move_right(distance) move_right(distance, unit, speed) Parameters​ distance: the numerical value of the value to move unit: The unit of measurement for the distance flown. Available units are &quot;cm&quot; (centimeter), &quot;ft&quot; (feet), &quot;in&quot; (inches), &quot;m&quot; (meter). speed: default 1 meter per second. Max is 2 meters/second Description​ Moves the drone right for the given distance and unit for that distance. Returns​ None Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() drone.takeoff() drone.move_right(distance=50, units=&quot;cm&quot;, speed=1) time.sleep(3) # make sure to add a delay so the drone has enough time to fly drone.land() drone.close() send_absolute_position()​ Syntax​ send_absolute_position(positionX, positionY, positionZ, velocity, heading, rotationalVelocity) Parameters​ positionX: Float value from -10 ~ 10 meters. The X position of the drone. Forward is positive. Backwards is negative. positionY: Float value from -10 ~ 10 meters. The Y position of the drone. Left is positive. Right is negative. positionZ: Float value from -10 ~ 10 meters. The Z position of the drone. Up is positive. Down is negative. velocity: Float value from 0.5 ~ 10 meters per second. The movement speed of the drone. heading: Integer value from -360 - 360 degrees. Positive turns the drone left. Negative turns the drone right. rotationalVelocity: Integer value from 0 - 360 degrees per second. Left and right rotation speed of the drone. Description​ Sends a movement command to the drone based on its absolute position from its takeoff location. Note: A sleep command for the length of the movement may be needed after using this movement command. The 'x' position of the drone is forwards and reverse. The 'y' position of the drone is left and right. The 'z' position of the drone is up and down. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() # Sending the drone forward from its takeoff location 0.5 meters moving at 0.5 m/s drone.send_absolute_position(0.5, 0, 1, 0.5, 0, 0) time.sleep(1) # Sleep command needed in order for this movement to execute. # Sending the same command will cause the drone to hover around # the same area since this command uses absolute positioning from the takeoff location drone.send_absolute_position(0.5, 0, 1, 0.5, 0, 0) time.sleep(1) drone.land() LED​ controller_LED_off()​ Syntax​ controller_LED_off() Parameters​ None Description​ Turns off the controller LEDs. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_LED_off() drone.close() drone_LED_off()​ Syntax​ drone_LED_off() Parameters​ None Description​ Turns off the drone LED. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.drone_LED_off() drone.close() set_controller_LED()​ Syntax​ set_controller_LED(red, green, blue, brightness) Parameters​ red: int value from 0 -255 green: int value from 0 -255 blue: int value from 0 -255 brightness: int value from 0 - 100 Description​ This function sets the LED color and brightness of the CoDrone EDU controller's LEDs. This is done by setting RGB values (0 - 255) and brightness level (0 - 100). Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.set_controller_LED(0, 0, 255, 100) drone.close() set_drone_LED()​ Syntax​ set_drone_LED(red, green, blue, brightness) Parameters​ red: int value from 0 -255 green: int value from 0 -255 blue: int value from 0 -255 brightness: int value from 0 - 100 Description​ This function sets the LED color and brightness of the CoDrone EDU's LED. This is done by setting RGB values (0 - 255) and brightness level (0 - 100). Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.set_drone_LED(0, 0, 255, 100) drone.close() Status Checkers​ controller_buzzer()​ Syntax​ controller_buzzer(note, duration) Parameters​ note: Integer frequency in Hz or a Note objectduration: Duration of the note in milliseconds Description​ Plays a note using the controller's buzzer. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_buzzer(400, 300) drone.controller_buzzer(600, 300) drone.close() drone_buzzer()​ Syntax​ drone_buzzer(note, duration) Parameters​ note: Integer frequency in Hz or a Note objectduration: Duration of the note in milliseconds Description​ Plays a note using the drone's buzzer. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.drone_buzzer(400, 300) drone.drone_buzzer(600, 300) drone.close() start_drone_buzzer()​ Syntax​ start_drone_buzzer(note) Parameters​ note: Integer frequency in Hz or a Note object Description​ This function allows the drone buzzer to be played in the background while other commands are given to the drone. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.start_drone_buzzer(500) # starting the buzzer # these commands run while the buzzer runs in the background for i in range(5): drone.set_drone_LED(255, 0, 0, 100) time.sleep(0.5) drone.set_drone_LED(0, 255, 0, 100) time.sleep(0.5) drone.stop_drone_buzzer() # stops the buzzer drone.close() stop_drone_buzzer()​ Syntax​ start_drone_buzzer() Parameters​ None Description​ Stops the drone buzzer if started in the background. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.start_drone_buzzer(500) # starting the buzzer # these commands run while the buzzer runs in the background for i in range(5): drone.set_drone_LED(255, 0, 0, 100) time.sleep(0.5) drone.set_drone_LED(0, 255, 0, 100) time.sleep(0.5) drone.stop_drone_buzzer() # stops the buzzer drone.close() start_controller_buzzer()​ Syntax​ start_controller_buzzer(note) Parameters​ note: Integer frequency in Hz or a Note object Description​ This function allows the controller buzzer to be played in the background while other commands are given to the drone. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.start_controller_buzzer(Note.A4) # starting the buzzer # these commands run while the buzzer runs in the background for i in range(3): drone.set_controller_LED(255, 0, 0, 100) time.sleep(0.5) drone.set_controller_LED(0, 255, 0, 100) time.sleep(0.5) drone.stop_controller_buzzer() # stops the buzzer drone.close() stop_controller_buzzer()​ Syntax​ stop_controller_buzzer(note) Parameters​ note: Integer frequency in Hz or a Note object Description​ This function allows the controller buzzer to be played in the background while other commands are given to the drone. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.start_controller_buzzer(440) # starting the buzzer # these commands run while the buzzer runs in the background for i in range(3): drone.set_controller_LED(255, 0, 0, 100) time.sleep(0.5) drone.set_controller_LED(0, 255, 0, 100) time.sleep(0.5) drone.stop_controller_buzzer() # stops the buzzer drone.close() Sensors​ get_battery()​ Syntax​ get_battery() Parameters​ None Description​ This function returns the current battery level percentage of the drone. Returns​ The current battery percentage of the drone's battery. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() battery = drone.get_battery() print(battery) drone.close() get_bottom_range()​ Syntax​ get_bottom_range() get_bottom_range(unit=&quot;&lt;cm, in, mm, m&gt;)&quot; Parameters​ unit: The unit of measurement that is chosen for the height distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified cm is chosen by default. Description​ This is a getter function which returns the current bottom range of the drone. The default unit of measurement is centimeters. This function uses the bottom range sensor to measure distance from the drone to the surface below the drone. Returns​ The current bottom range calculated by the bottom range sensor (cm default). Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) bottom_range = drone.get_bottom_range() print(bottom_range) drone.land() drone.close() get_temperature()​ Syntax​ get_temperature() get_temperature(unit) Parameters​ unit: A string for the unit of temperature of the drone. Available units are &quot;C&quot; (Celcius), &quot;F&quot; (Fahrenheit), and &quot;K&quot; (Kelvin). Description​ This is a getter function gets the drone's temperature from the barometer. The sensor reads the drone’s temperature, not the air around it. Default unit is Celcius. Returns​ The temperature of the drone in the given unit as a float. Default unit is Celcius. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() temperature = drone.get_temperature() print(temperature) drone.close() get_flight_state()​ Syntax​ get_flight_state() Parameters​ None Description​ get_flight_state() is a getter function that gets the current flight state of the drone. Returns​ The current flight state of the drone. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() print(drone.get_flight_state()) drone.close() get_flow_x()​ Syntax​ get_flow_x() get_flow_x(unit=&quot;&lt;cm, in, mm, m&gt;)&quot; Parameters​ unit: The unit of measurement that is chosen for the distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified &quot;cm&quot; is chosen by default. Description​ This getter function gets the relative position value calculated by the optical flow sensor from the x direction (forward and reverse). Returns​ The relative position value calculated by the optical flow sensor from the x direction. (cm default). Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.set_pitch(50) drone.move(1) print(drone.get_flow_x()) drone.land() drone.close() get_flow_y()​ Syntax​ get_flow_y() get_flow_y(unit=&quot;&lt;cm, in, mm, m&gt;)&quot; Parameters​ unit: The unit of measurement that is chosen for the distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified &quot;cm&quot; is chosen by default. Description​ This getter function gets the relative position value calculated by the optical flow sensor from the y direction (left and right). Returns​ The relative position value calculated by the optical flow sensor from the y direction. (cm default). Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.set_roll(50) drone.move(1) print(drone.get_flow_y()) drone.land() drone.close() get_front_range()​ Syntax​ get_front_range() get_front_range(unit=&quot;&lt;cm, in, mm, m&gt;&quot;) Parameters​ unit: A string for the unit of measurement that is chosen for the range distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified &quot;cm&quot; is chosen by default. Description​ This is a getter function which returns the current Range from the front range sensor. The default unit of measurement is centimeters. This function uses the front range sensor to measure distance from the drone to the surface in front of the drone. Returns​ The current range calculated by the front range sensor (cm by default). -10 or 0 when the sensor returns an error value. 999 when the detected object is out of range (1.5 meters) or the sensor timed out. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) distance = drone.get_front_range() print(distance) drone.land() drone.close() get_pos_x()​ Syntax​ get_pos_x() get_pos_x(unit=&quot;&lt;cm, in, mm, m&gt;) Parameters​ unit: The unit of measurement that is chosen for the position distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified cm is chosen by default. Description​ Getter function that gets the x position of the drone. (x is forwards and backwards) Returns​ The current x position of the drone. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_pos_x()) drone.land() drone.close() get_pos_y()​ Syntax​ get_pos_y() get_pos_y(unit=&quot;&lt;cm, in, mm, m&gt;) Parameters​ unit: The unit of measurement that is chosen for the position distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified cm is chosen by default. Description​ Getter function that gets the y position of the drone. (y is left and right) Returns​ The current y position of the drone. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_pos_y()) drone.land() drone.close() get_pos_z()​ Syntax​ get_pos_z() get_pos_z(unit=&quot;&lt;cm, in, mm, m&gt;) Parameters​ unit: The unit of measurement that is chosen for the position distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified cm is chosen by default. Description​ Getter function that gets the z position of the drone. (z is up and down) Returns​ The current z position of the drone. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_pos_z()) drone.land() drone.close() get_position_data()​ Syntax​ get_position_data() get_position_data(delay) Parameters​ delay: the delay in seconds before the position data is returned. default value is 0.01. Description​ get_position_data is a getter function that retuns a list of position data for the drone. The 'x' position of the drone is forwards and reverse. The 'y' position of the drone is left and right. The 'z' position of the drone is up and down. Returns​ A list of position data for the drone. The list contains the current time of the running program [0], x position data [1], y position data [2], z position data [3]. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() data = drone.get_position_data() print(data) drone.land() drone.close() get_pressure()​ Syntax​ get_pressure() Parameters​ None Description​ This is a getter function that returns the data from the barometer. The function returns a value in the unit Pascals. Note: 1atm = 101325 Pa Returns​ Float that represents air pressure in Pascals. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # print the pressure pressure = drone.get_pressure() print(pressure) drone.close() get_trim()​ Syntax​ get_trim() Parameters​ None Description​ This function gets the current trim values of the drone. Returns​ A list of trim data Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # print the pressure trim = drone.get_trim() print(trim) print(trim[0]) print(trim[1]) drone.close() get_x_accel()​ Syntax​ get_x_accel() Parameters​ None Description​ Getter function that gets the x acceleration of the drone. (x is forwards and backwards) Returns​ The current x acceleration of the drone. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_x_accel()) drone.land() drone.close() get_x_angle()​ Syntax​ get_x_angle() Parameters​ None Description​ This is a getter function which returns the current X angle from the gyroscope in the drone. This angle is on the &quot;roll&quot; axis. Returns​ The current angle in regards to the X direction. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() print(drone.get_x_angle()) drone.close() get_y_accel()​ Syntax​ get_y_accel() Parameters​ None Description​ Getter function that gets the y acceleration of the drone. (y is left and right) Returns​ The current y acceleration of the drone. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_y_accel()) drone.land() drone.close() get_y_angle()​ Syntax​ get_y_angle() Parameters​ None Description​ This is a getter function which returns the current Y angle from the gyroscope in the drone. This angle is on the &quot;pitch&quot; axis. Returns​ The current angle in regards to the Y direction. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() print(drone.get_y_angle()) drone.close() get_z_accel()​ Syntax​ get_z_accel() Parameters​ None Description​ Getter function that gets the z acceleration of the drone. (z is up and down) Returns​ The current z acceleration of the drone. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() print(drone.get_z_accel()) drone.land() drone.close() get_z_angle()​ Syntax​ get_z_angle() Parameters​ None Description​ This is a getter function which returns the current Z angle from the drone. This is angle is the &quot;yaw&quot; direction. Returns​ The current angle in regards to the Z direction. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() print(drone.get_z_angle()) drone.close() get_height()​ Syntax​ get_height() get_height(unit=&quot;&lt;cm, in, mm, m&gt;)&quot; Parameters​ unit: The unit of measurement that is chosen for the height distance. Available units are &quot;m&quot; (meter), &quot;cm&quot; (centimeter), &quot;mm&quot; (millimeter), or &quot;in&quot; (inch). If a parameter is not specified cm is chosen by default. Description​ This is a getter function which returns the current height of the drone. The default unit of measurement is centimeters. This function uses the bottom range sensor to measure distance from the drone to the surface below the drone. Returns​ The current range calculated by the bottom range sensor (cm default). -10 or 0 when the sensor returns an error. 999 when the detected object is out of range (1.5 meters) or the sensor timed out. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.takeoff() drone.hover(3) height = drone.get_height() print(height) drone.land() drone.close() get_back_color()​ Syntax​ get_back_color() Parameters​ None Description​ get_back_color() is a getter function that calls get_color_data() but only returns the data for the back color sensor. Returns​ Returns the back color sensor data. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() color_data = drone.get_back_color() print(color_data) drone.close() get_color_data()​ Syntax​ get_color_data() Parameters​ None Description​ Getter function that gets a list of color data from the drone. Returns​ Returns a list of color data. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() color_data = drone.get_color_data() drone.close() get_front_color()​ Syntax​ get_front_color() Parameters​ None Description​ get_front_color() is a getter function that calls get_color_data() but only returns the data for the front color sensor. Returns​ Returns the front color sensor data. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() color_data = drone.get_front_color() print(color_data) drone.close() load_classifier()​ Syntax​ load_classifier() load_classifier(dataset, show_graph) Parameters​ dataset: An optional parameter to load a custom color set. If no color set is given then the default color set will be used.show_graph: An optional boolean parameter that will show a graph of the color set data. The default value is False. Description​ load_classifier() is a function that can load a custom color set onto the CoDrone EDU. If no custom color set is given then the default color set is loaded. There is also an option to show the color set as a graph. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # This example assumes the &quot;custom_color_data&quot; directory exists drone.load_classifier(&quot;custom_color_data&quot;) color_data = drone.get_color_data() color = drone.predict_colors(color_data) print(color) drone.close() predict_colors()​ Syntax​ predict_colors(color_data) Parameters​ color_data: loaded from drone.get_color_data() Description​ Predicts what color the color sensors are currently seeing. Returns​ A prediction of which color the color sensors are currently seeing Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.load_classifier(&quot;color_data_file&quot;) color_data = drone.get_color_data() color = drone.predict_colors(color_data) print(color) drone.close() get_colors()​ Syntax​ get_colors() Parameters​ None Description​ get_colors() is a getter function that returns one of the 8 pre-calibrated colors (provided in the color cards). Returns​ A list containing the front and back color sensor predictions as strings (Red, Green, Yellow, Blue, Cyan, Magenta, Black, White, Unknown) Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() colors = drone.get_colors() print(colors) drone.close new_color_data()​ Syntax​ new_color_data(label, data, dataset) Parameters​ label: String label name that will be used for the filename. data: List of HSV data samples dataset: String folder name where the text file will be stored. Description​ new_color_data() is a function that creates a new dataset of custom color prediction data. Returns​ None Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() dataset = &quot;color_data&quot; colors = [&quot;green&quot;, &quot;purple&quot;, &quot;red&quot;, &quot;lightblue&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;white&quot;] for color in colors: data = [] samples = 500 for i in range(1): print(&quot;Sample: &quot;, i+1) next = input(&quot;Press enter to calibrate &quot; + color) print(&quot;0% &quot;, end=&quot;&quot;) for j in range(samples): color_data = drone.get_color_data()[0:9] data.append(color_data) time.sleep(0.005) if j % 10 == 0: print(&quot;-&quot;, end=&quot;&quot;) print(&quot; 100%&quot;) drone.new_color_data(color, data, dataset) print(&quot;Done calibrating.&quot;) append_color_data()​ Syntax​ append_color_data(label, data, dataset) Parameters​ label: String label name that will be used for the filename. data: List of HSV data samples dataset: String folder name where the text file will be stored. Description​ append_color_data() is a function that adds onto an existing dataset of custom color prediction data. the dataset parameter must already exist in order to use this function. Returns​ None Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() dataset = &quot;color_data&quot; colors = [&quot;green&quot;, &quot;purple&quot;, &quot;red&quot;, &quot;lightblue&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;white&quot;] for color in colors: data = [] samples = 500 for i in range(1): print(&quot;Sample: &quot;, i+1) next = input(&quot;Press enter to calibrate &quot; + color) print(&quot;0% &quot;, end=&quot;&quot;) for j in range(samples): color_data = drone.get_color_data()[0:9] data.append(color_data) time.sleep(0.005) if j % 10 == 0: print(&quot;-&quot;, end=&quot;&quot;) print(&quot; 100%&quot;) drone.append_color_data(color, data, dataset) print(&quot;Done calibrating.&quot;) height_from_pressure()​ Syntax​ height_from_pressure() height_from_pressure(b, m) Parameters​ b: slope intercept in pascals (default is set to 0) m: slope in centimeters/pascals (default is set to 9.34) Description​ This function gets the drone's current height in centimeters based on the initial pressure sensor reading. You must call set_initial_pressure() to establish a reference point. Returns​ Estimated height in centimeters relative to starting position. Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.set_initial_pressure() # Take an initial pressure reading as a reference for i in range(300): print(drone.height_from_pressure(), &quot; centimeters&quot;) time.sleep(0.2) set_initial_pressure()​ Syntax​ set_initial_pressure() Parameters​ None Description​ This function saves an initial pressure reading to the drone. This function is used in combination with other functions such as height_from_pressure() Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # Here is where we save our initial pressure. Now the 'height_from_pressure()' function has a reference for height drone.set_initial_pressure() # The drone will not take off in this example but by moving it up and down manually the resulting height will print for i in range(300): print(drone.height_from_pressure(), &quot; millimeters&quot;) time.sleep(0.2) get_angular_speed_x()​ Syntax​ get_angular_speed_x() Parameters​ None Description​ This function returns the current angular speed in degrees per second around the x-axis (&quot;roll&quot; axis). Returns​ angular speed: positive or negative integer in degrees per second Example Code​ Tilt the drone left and right while the program runs to see the angular speed change. Then, hold the drone as still as possible and watch angular speed drop. #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() for i in range(100): print(drone.get_angular_speed_x()) time.sleep(0.05) drone.close() get_angular_speed_y()​ Syntax​ get_angular_speed_y() Parameters​ None Description​ This function returns the current angular speed in degrees per second around the y-axis (&quot;pitch&quot; axis). Returns​ angular speed: positive or negative integer in degrees per second Example Code​ Tilt the drone forward and backward while the program runs to see the angular speed change. Then, hold the drone as still as possible and watch angular speed drop. #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() for i in range(100): print(drone.get_angular_speed_y()) time.sleep(0.05) drone.close() get_angular_speed_z()​ Syntax​ get_angular_speed_z() Parameters​ None Description​ This function returns the current angular speed in degrees per second around the z-axis (&quot;yaw&quot; axis). Returns​ angular speed: positive or negative integer in degrees per second Example Code​ Turn the drone left and right on a flat surface while the program runs to see the angular speed change. Then, hold the drone as still as possible and watch angular speed drop. #Python code from codrone_edu.drone import * import time drone = Drone() drone.pair() for i in range(100): print(drone.get_angular_speed_z()) time.sleep(0.05) drone.close() get_sensor_data()​ Syntax​ get_sensor_data() get_sensor_data(delay) Parameters​ delay: The delay in seconds for each sensor request (out of 5). The total delay will be 5x this delay value. The default value is 0.1 seconds. Description​ This functions returns a list of 31 values including time stamps and sensor values. It requests 5 distinct lists of data and compiles them into one list. This function returns data more quickly than individual sensor requests. Returns​ A list of length 31. data[0] Altitude time stampdata[1] Temperature in Celsiusdata[2] Pressure (Pascals)data[3] Elevation output from barometer (meters)data[4] Height value output from bottom range sensor (meters)data[5] Motion data time stampdata[6] acceleration X Int16 2 Byte -1568 ~ 1568 (-156.8 ~ 156.8) m/s2 x 10 Xdata[7] acceleration Y Int16 2 Byte -1568 ~ 1568 (-156.8 ~ 156.8) m/s2 x 10 Ydata[8] acceleration Z Int16 2 Byte -1568 ~ 1568 (-156.8 ~ 156.8) m/s2 x 10 Zdata[9] gyroRoll: Int16 2 Byte -2000 ~ 2000 degree/second Rolldata[10] gyroPitch Int16 2 Byte -2000 ~ 2000 degree/second Pitchdata[11] gyroYaw Int16 2 Byte -2000 ~ 2000 degree/second Yawdata[12] angleRoll Int16 2 Byte -180 ~ 180 degree Rolldata[13] anglePitch Int16 2 Byte -180 ~ 180 degree Pitchdata[14] angleYaw Int16 2 Byte -180 ~ 180 degree Yawdata[15] Position data time stampdata[16] x Float32 4 Byte - X axis in metersdata[17] y Float32 4 Byte - Y axis in metersdata[18] z Float32 4 Byte - z axis in metersdata[19] Range sensor data time stampdata[20] Front range sensor (millimeters)data[21] Bottom range sensor (millimeters)data[22] Drone state time stampdata[23] modeSystem (system operating mode)data[24] modeFlight (flight controller operating mode)data[25] modeControlFlight (flight control mode)data[26] modeMovement (moving state)data[27] headless (headless setting status)data[28] sensorOrientation (sensor orientation)data[29] battery parcentage leveldata[30] current speed setting Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() # collect multiple data points data = drone.get_sensor_data() for i in range(len(data)): print(i, data[i]) # print out each data point drone.close() get_error_data()​ Syntax​ get_error_data() get_error_data(delay) Parameters​ delay: The delay in seconds that the command will wait for a response. The default value is 0.1. Description​ This command requests if the drone is in an error state. One or more of the following error states can be printed to console. Motion_Calibrating: Drone is calibrating.Motion_NoAnswer: Gyroscope Accelerometer is unresponsive and may be damaged.Motion_WrongValue: Gyroscope Accelerometer is giving erroneous data.Motion_NotCalibrated: Gyroscope Accelerometer is not calibrated.Pressure_NoAnswer: Barometer is unresponsive.Pressure_WrongValue: Barometer is giving erroneous data.RangeGround_NoAnswer: Bottom Range sensor is unresponsive.RangeGround_WrongValue: Bottom range sensor has given an incorrect value.Flow_NoAnswer: Optical flow sensor is unresponsive.Flow_CannotRecognizeGroundImage: Optical flow sensor is giving erroneous data due to the image. Returns​ error state: String of one or more error messages Example Code​ Turn the drone left and right on a flat surface while the program runs to see the angular speed change. Then, hold the drone as still as possible and watch angular speed drop. #Python code from time import sleep from codrone_edu.drone import * from codrone_edu.protocol import * drone = Drone() drone.pair() # For demonstration purposes, activate motion calibration drone.sendCommand(CommandType.ClearBias) sleep(0.1) for i in range(10): drone.get_error_data() # see motion error state during calibration time.sleep(0.5) drone.close() Controller​ down_arrow_pressed()​ Syntax​ down_arrow_pressed() Parameters​ None Description​ A function that determines if the controller's down arrow button has been pressed. Returns​ True if the down arrow button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.down_arrow_pressed(): print(&quot;down arrow button has been pressed!&quot;) get_button_data()​ Syntax​ get_button_data() Parameters​ None Description​ get_button_data() is a function that will return a list of information about the most recent button pressed. Returns​ A list a of data that includes the time of the current program, the number associated with the most recent button pressed, and finally the state of the most recent button pressed. (Down, Pressed, Up) Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_button_data()) h_pressed()​ Syntax​ h_pressed() Parameters​ None Description​ A function that determines if the controller's H button has been pressed. Returns​ True if the H button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.h_pressed(): print(&quot;H button has been pressed!&quot;) l1_pressed()​ Syntax​ l1_pressed() Parameters​ None Description​ A function that determines if the controller's L1 button has been pressed. Returns​ True if the L1 button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.l1_pressed(): print(&quot;L1 button has been pressed!&quot;) l2_pressed()​ Syntax​ l2_pressed() Parameters​ None Description​ A function that determines if the controller's L2 button has been pressed. Returns​ True if the L2 button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.l2_pressed(): print(&quot;L2 button has been pressed!&quot;) left_arrow_pressed()​ Syntax​ left_arrow_pressed() Parameters​ None Description​ A function that determines if the controller's left arrow button has been pressed. Returns​ True if the left arrow button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.left_arrow_pressed(): print(&quot;left arrow button has been pressed!&quot;) p_pressed()​ Syntax​ p_pressed() Parameters​ None Description​ A function that determines if the controller's P button has been pressed. Returns​ True if the P button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.p_pressed(): print(&quot;P button has been pressed!&quot;) power_pressed()​ Syntax​ power_pressed() Parameters​ None Description​ A function that determines if the controller's power button has been pressed. Since pressing the power button also switches the drone to flight mode, this function only detects alternate button presses. In other words, the function can only detect a power button press when in LINK state. Returns​ True if the power button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.power_pressed(): print(&quot;power button has been pressed!&quot;) r1_pressed()​ Syntax​ r1_pressed() Parameters​ None Description​ A function that determines if the controller's R1 button has been pressed. Returns​ True if the R1 button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.r1_pressed(): print(&quot;R1 button has been pressed!&quot;) r2_pressed()​ Syntax​ r2_pressed() Parameters​ None Description​ A function that determines if the controller's R2 button has been pressed. Returns​ True if the R2 button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.r2_pressed(): print(&quot;R2 button has been pressed!&quot;) right_arrow_pressed()​ Syntax​ right_arrow_pressed() Parameters​ None Description​ A function that determines if the controller's right arrow button has been pressed. Returns​ True if the right arrow button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.right_arrow_pressed(): print(&quot;right arrow button has been pressed!&quot;) s_pressed()​ Syntax​ s_pressed() Parameters​ None Description​ A function that determines if the controller's S button has been pressed. Returns​ True if the S button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.s_pressed(): print(&quot;S button has been pressed!&quot;) up_arrow_pressed()​ Syntax​ up_arrow_pressed() Parameters​ None Description​ A function that determines if the controller's up arrow button has been pressed. Returns​ True if the up arrow button is pressed or held. Otherwise the function will return false. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) if drone.up_arrow_pressed(): print(&quot;up arrow button has been pressed!&quot;) get_joystick_data()​ Syntax​ get_joystick_data() Parameters​ None Description​ get_joystick_data() is a getter function that gets a list of data about the state of both joysticks on the controller. Returns​ A list of data that includes the time of the current program, and information about the left and right joysticks. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_joystick_data()) get_left_joystick_x()​ Syntax​ get_left_joystick_x() Parameters​ None Description​ get_left_joystick_x() is a getter function that gets the position of the left joystick's x position. Returns​ A value between -100 and 100 depending on the x position of the left joystick. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_left_joystick_x()) get_left_joystick_y()​ Syntax​ get_left_joystick_y() Parameters​ None Description​ get_left_joystick_y() is a getter function that gets the position of the left joystick's y position. Returns​ A value between -100 and 100 depending on the y position of the left joystick. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_left_joystick_y()) get_right_joystick_x()​ Syntax​ get_right_joystick_x() Parameters​ None Description​ get_right_joystick_x() is a getter function that gets the position of the right joystick's x position. Returns​ A value between -100 and 100 depending on the x position of the right joystick. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_right_joystick_x()) get_right_joystick_y()​ Syntax​ get_right_joystick_y() Parameters​ None Description​ get_right_joystick_y() is a getter function that gets the position of the right joystick's y position. Returns​ A value between -100 and 100 depending on the y position of the right joystick. Example Code​ #Python code from codrone_edu.drone import * import time drone = Drone() drone.open() while True: time.sleep(0.1) print(drone.get_right_joystick_y()) Screen​ controller_clear_screen()​ Syntax​ controller_clear_screen() controller_clear_screen(pixel) Parameters​ pixel: optional parameter that assigns all pixels to either white or black. white is the default value. Description​ clears all drawings from the controller screen Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() drone.close() controller_create_canvas()​ Syntax​ controller_create_canvas() Parameters​ None Description​ Creates a new image object for drawing Returns​ Returns a new image object that is 127 x 63 pixels Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() image = drone.controller_create_canvas() # see controller_draw_canvas for how to draw on this new image object drone.close() controller_draw_arc()​ Syntax​ controller_draw_arc(arc_list, start_angle, end_angle, image, pixel_width) Parameters​ arc_list: Two points to define the bounding box. Sequence of [(x0, y0), (x1, y1)], where x1 &gt;= x0 and y1 &gt;= y0. start_angle: Starting angle, in degrees. Angles are measured from 3 o’clock, increasing clockwise. end_angle: Ending angle, in degrees. image: image object created from create_image_canvas(). pixel_width: optional parameter that is the line width, in pixels. default value is 1. Description​ Draws an arc (a portion of a circle outline) between the start and end angles, inside the given bounding box. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = drone.controller_create_canvas() # create image object arc_list = [(20, 40), (50, 50)] drone.controller_draw_arc(arc_list, 0, 180, image) # set arc onto image object drone.controller_draw_canvas(image) # draw image onto controller screen drone.close() controller_draw_canvas()​ Syntax​ controller_draw_canvas(image) Parameters​ image: image object to be drawn onto the controller screen Description​ Draws custom image canvas onto the controller screen Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = drone.controller_create_canvas() # create image object arc_list = [(20, 40), (50, 50)] ellipse_list = [(10, 10), (40, 40)] chord_list = [(60, 20), (100, 50)] drone.controller_draw_ellipse(ellipse_list, image) # draw onto image object drone.controller_draw_arc(arc_list, 0, 180, image) drone.controller_draw_chord(chord_list, 0, 180, image) drone.controller_draw_canvas(image) # draw image onto controller screen drone.close() controller_draw_chord()​ Syntax​ controller_draw_chord(arc_list, start_angle, end_angle, image, pixel_width) Parameters​ chord_list: Two points to define the bounding box. Sequence of [(x0, y0), (x1, y1)], where x1 &gt;= x0 and y1 &gt;= y0. start_angle: Starting angle, in degrees. Angles are measured from 3 o’clock, increasing clockwise. end_angle: Ending angle, in degrees. image: image object created from create_image_canvas(). pixel_width: optional parameter that is the line width, in pixels. default value is 1. Description​ Same as controller_draw_arc(), but connects the end points with a straight line. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = drone.controller_create_canvas() # create image object chord_list = [(20, 40), (50, 50)] drone.controller_draw_chord(chord_list, 0, 180, image) # set chord onto image object drone.controller_draw_canvas(image) # draw image onto controller screen drone.close() controller_draw_ellipse()​ Syntax​ controller_draw_ellipse(ellipse_list, image, fill_in, pixel_width) Parameters​ ellipse_list: Two points to define the bounding box. Sequence of [(x0, y0), (x1, y1)] where x1 &gt;= x0 and y1 &gt;= y0. image: image object created from create_image_canvas(). fill_in: optional parameter. None by default. 0 will fill with black. pixel_width: optional parameter that is the line width, in pixels. default value is 1. Description​ Draws an ellipse inside the given bounding box. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = drone.controller_create_canvas() # create image object ellipse_list = [(10, 10), (40, 40)] drone.controller_draw_ellipse(ellipse_list, image) # set ellipse onto image object drone.controller_draw_canvas(image) # draw image onto controller screen drone.close() controller_draw_image()​ Syntax​ controller_draw_image(pixel_list) Parameters​ pixel_list: the list of image data. can be obtained using get_image_data() function. Description​ draws image when given a pixel_list of image data Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = get_image_data(&quot;example.png&quot;) # where example.png is an image in the same directory as the program drone.controller_draw_image(image) # draws the image onto the controller's screen drone.close() controller_draw_line()​ Syntax​ controller_draw_line(x1, y1, x2, y2, pixel, line_type) Parameters​ x1: point 1 x coordinate y1: point 1 y coordinate x2: point 2 x coordinate y2: point 2 y coordinate pixel: optional parameter that changes the pixel color of the line. default value is Black line_type: optional parameter that is the type of line drawn. default is Solid Description​ draws a line between points (x1, y1) and (x2, y2) (x1,y1) \\ \\ \\ \\ (x2,y2) Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing drone.controller_draw_line(0,0, 60, 60) drone.close() controller_draw_point()​ Syntax​ controller_draw_point(x, y, pixel) Parameters​ x: x coordinatey: y coordinatepixel: optional parameter that changes the pixel color of the line. default value is Black Description​ draws a single pixel at the point (x,y) Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing drone.controller_draw_point(10, 10) # place a pixel at the (10,10) coordinate drone.close() controller_draw_polygon()​ Syntax​ controller_draw_polygon(point_list) Parameters​ point_list: the list of coordinates Description​ The polygon outline consists of straight lines between the given coordinates, plus a straight line between the last and the first coordinate. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() point_list_square = ((10, 10), (30, 10), (30, 30), (10, 30)) # creating a list of coordinates drone.controller_draw_polygon(point_list_square) drone.close() controller_draw_rectangle()​ Syntax​ controller_draw_rectangle(x, y, width, height, pixel, fill, line_type) Parameters​ x: top left corner x coordinate y: top left corner y coordinate width: width of rectangle height: height of rectangle pixel: optional parameter that changes the pixel color of the line. default value is Black fill: optional parameter to fill in the rectangle or not. default value is False line_type: optional parameter that is the type of line drawn. default is Solid Description​ draws a rectangle onto the controller screen starting from point (x,y) and extends to given height and width width (x,y)|---------------| | | height |_______________| Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() drone.controller_draw_rectangle(30, 15, 50, 30) drone.close() controller_draw_square()​ Syntax​ controller_draw_square(x, y, width, pixel, fill, line_type) Parameters​ x: top left corner x coordinate y: top left corner y coordinate width: width of square pixel: optional parameter that changes the pixel color of the line. default value is Black fill: optional parameter to fill in the square or not. default value is False line_type: optional parameter that is the type of line drawn. default is Solid Description​ draws a square on the controller screen starting from point (x,y) and will extend to the given width width (x,y)|------| | | width |______| Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() drone.controller_draw_square(10, 10, 25) drone.close() controller_draw_string_align()​ Syntax​ controller_draw_string_align(x_start, x_end, y, string, alignment, string_font, pixel_color) Parameters​ x_start: starting x position x_end: ending x position y: y position string: the string to write alignment: optional parameter that is the alignment between x_start and x_end. can align Left, Right, or Center. default value is Center string_font: optional parameter that is the font of the string to be written. default value is LiberationMono5x8 pixel_color: optional parameter that is the pixel color of the written string. default value is Black Description​ Draws a string from the given x_start, x_end and y positions. The string can be aligned along the x_start and x_end positions Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() drone.controller_draw_string_align(0, 70, 0, &quot;Hello, world!&quot;) drone.close() controller_draw_string()​ Syntax​ controller_draw_string(x, y, string, string_font, pixel_color) Parameters​ x: starting x position y: starting y position string: the string to write string_font: optional parameter that is the font of the string to be written. default value is LiberationMono5x8 pixel_color: optional parameter that is the pixel color of the written string. default value is Black Description​ Draws a string from the given x_start, x_end and y positions. The string can be aligned along the x_start and x_end positions Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() drone.controller_draw_string(0, 0, &quot;Hello, world!&quot;) drone.close() controller_preview_canvas()​ Syntax​ controller_preview_canvas(image) Parameters​ image: image object to be previewed Description​ creates a pop up window to preview your current image object on your computer screen. Returns​ None Example Code​ #Python code from codrone_edu.drone import * drone = Drone() drone.pair() drone.controller_clear_screen() # clear screen for drawing image = drone.controller_create_canvas() # create image object arc_list = [(20, 40), (50, 50)] ellipse_list = [(10, 10), (40, 40)] chord_list = [(60, 20), (100, 50)] drone.controller_draw_ellipse(ellipse_list, image) # draw onto image object drone.controller_draw_arc(arc_list, 0, 180, image) drone.controller_draw_chord(chord_list, 0, 180, image) drone.controller_preview_canvas(image) # draw image onto controller screen drone.close() ","keywords":"","version":"Next"}],"options":{"languages":["en","ko","ja"],"id":"default"}}