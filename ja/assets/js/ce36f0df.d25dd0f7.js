"use strict";(self.webpackChunkdoc_v_3=self.webpackChunkdoc_v_3||[]).push([[8876],{3068:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>s});var i=r(4848),o=r(8453);const l={title:"Function Documentation",slug:"Function-Documentation",customHeadElements:['<link rel="manifest" href="manifest.json" />']},t=void 0,d={id:"CoDronePro_Lite/Arduino/page4",title:"Function Documentation",description:"window.print()}>Print",source:"@site/docs/CoDronePro_Lite/Arduino/page4.md",sourceDirName:"CoDronePro_Lite/Arduino",slug:"/CoDronePro_Lite/Arduino/Function-Documentation",permalink:"/ja/docs/CoDronePro_Lite/Arduino/Function-Documentation",draft:!1,unlisted:!1,editUrl:"https://github.com/RobolinkInc/doc-v3/tree/main/docs/docs/CoDronePro_Lite/Arduino/page4.md",tags:[],version:"current",frontMatter:{title:"Function Documentation",slug:"Function-Documentation",customHeadElements:['<link rel="manifest" href="manifest.json" />']},sidebar:"CoDronePro_Lite",previous:{title:"Update Library",permalink:"/ja/docs/CoDronePro_Lite/Arduino/Update-Library"},next:{title:"Arduino Changelog",permalink:"/ja/docs/CoDronePro_Lite/Arduino/Arduino-Changelog"}},a={},s=[{value:"Connection",id:"connection",level:2},{value:"disconnect()",id:"disconnect",level:3},{value:"Description",id:"description",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example Code",id:"example-code",level:4},{value:"Arduino",id:"arduino",level:6},{value:"pair()",id:"pair",level:3},{value:"Description",id:"description-1",level:4},{value:"Syntax",id:"syntax-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example Code",id:"example-code-1",level:4},{value:"Arduino",id:"arduino-1",level:5},{value:"Flight Commands (Start/Stop)",id:"flight-commands-startstop",level:2},{value:"emergencyStop()",id:"emergencystop",level:3},{value:"Description",id:"description-2",level:4},{value:"Syntax",id:"syntax-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example Code",id:"example-code-2",level:4},{value:"Arduino",id:"arduino-2",level:5},{value:"land()",id:"land",level:3},{value:"Description",id:"description-3",level:4},{value:"Syntax",id:"syntax-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example Code",id:"example-code-3",level:4},{value:"Arduino",id:"arduino-3",level:5},{value:"takeoff()",id:"takeoff",level:3},{value:"Description",id:"description-4",level:4},{value:"Syntax",id:"syntax-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example Code",id:"example-code-4",level:4},{value:"Arduino",id:"arduino-4",level:5},{value:"Flight Commands (Movement)",id:"flight-commands-movement",level:2},{value:"flySequence()",id:"flysequence",level:3},{value:"Description",id:"description-5",level:4},{value:"Syntax",id:"syntax-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example Code",id:"example-code-5",level:4},{value:"Arduino",id:"arduino-5",level:5},{value:"goToHeight()",id:"gotoheight",level:3},{value:"Description",id:"description-6",level:4},{value:"Syntax",id:"syntax-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example Code",id:"example-code-6",level:4},{value:"Arduino",id:"arduino-6",level:5},{value:"go()",id:"go",level:3},{value:"Description",id:"description-7",level:4},{value:"Syntax",id:"syntax-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example Code",id:"example-code-7",level:4},{value:"Arduino",id:"arduino-7",level:5},{value:"hover()",id:"hover",level:3},{value:"Description",id:"description-8",level:4},{value:"Syntax",id:"syntax-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example Code",id:"example-code-8",level:4},{value:"Arduino",id:"arduino-8",level:5},{value:"rotate180()",id:"rotate180",level:3},{value:"Description",id:"description-9",level:4},{value:"Syntax",id:"syntax-9",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example Code",id:"example-code-9",level:4},{value:"Arduino",id:"arduino-9",level:5},{value:"turnDegree()",id:"turndegree",level:3},{value:"Description",id:"description-10",level:4},{value:"Syntax",id:"syntax-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Example Code",id:"example-code-10",level:4},{value:"Arduino",id:"arduino-10",level:5},{value:"turn()",id:"turn",level:3},{value:"Description",id:"description-11",level:4},{value:"Syntax",id:"syntax-11",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Example Code",id:"example-code-11",level:4},{value:"Arduino",id:"arduino-11",level:5},{value:"Flight Variables",id:"flight-variables",level:2},{value:"getPitch()",id:"getpitch",level:3},{value:"Description",id:"description-12",level:4},{value:"Syntax",id:"syntax-12",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Example Code",id:"example-code-12",level:4},{value:"Arduino",id:"arduino-12",level:5},{value:"getRoll()",id:"getroll",level:3},{value:"Description",id:"description-13",level:4},{value:"Syntax",id:"syntax-13",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Example Code",id:"example-code-13",level:4},{value:"Arduino",id:"arduino-13",level:5},{value:"getThrottle()",id:"getthrottle",level:3},{value:"Description",id:"description-14",level:4},{value:"Syntax",id:"syntax-14",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Example Code",id:"example-code-14",level:4},{value:"Arduino",id:"arduino-14",level:5},{value:"getYaw()",id:"getyaw",level:3},{value:"Description",id:"description-15",level:4},{value:"Syntax",id:"syntax-15",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Example Code",id:"example-code-15",level:4},{value:"Arduino",id:"arduino-15",level:5},{value:"move()",id:"move",level:3},{value:"Description",id:"description-16",level:4},{value:"Syntax",id:"syntax-16",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Example Code",id:"example-code-16",level:4},{value:"Arduino",id:"arduino-16",level:5},{value:"setPitch()",id:"setpitch",level:3},{value:"Description",id:"description-17",level:4},{value:"Syntax",id:"syntax-17",level:4},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Example Code",id:"example-code-17",level:4},{value:"Arduino",id:"arduino-17",level:5},{value:"setRoll()",id:"setroll",level:3},{value:"Description",id:"description-18",level:4},{value:"Syntax",id:"syntax-18",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Example Code",id:"example-code-18",level:4},{value:"Arduino",id:"arduino-18",level:5},{value:"setThrottle()",id:"setthrottle",level:3},{value:"Description",id:"description-19",level:4},{value:"Syntax",id:"syntax-19",level:4},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Example Code",id:"example-code-19",level:4},{value:"Arduino",id:"arduino-19",level:5},{value:"setYaw()",id:"setyaw",level:3},{value:"Description",id:"description-20",level:4},{value:"Syntax",id:"syntax-20",level:4},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Example Code",id:"example-code-20",level:4},{value:"Arduino",id:"arduino-20",level:5},{value:"LED",id:"led",level:2},{value:"armColor()",id:"armcolor",level:3},{value:"Description",id:"description-21",level:4},{value:"Syntax",id:"syntax-21",level:4},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Example Code",id:"example-code-21",level:4},{value:"Arduino",id:"arduino-21",level:5},{value:"LED Color options",id:"led-color-options",level:5},{value:"armDefaultColor()",id:"armdefaultcolor",level:3},{value:"Description",id:"description-22",level:4},{value:"Syntax",id:"syntax-22",level:4},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Example Code",id:"example-code-22",level:4},{value:"Arduino",id:"arduino-22",level:5},{value:"armDefaultPattern()",id:"armdefaultpattern",level:3},{value:"Description",id:"description-23",level:4},{value:"Syntax",id:"syntax-23",level:4},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Example Code",id:"example-code-23",level:4},{value:"Arduino",id:"arduino-23",level:5},{value:"armOff()",id:"armoff",level:3},{value:"Description",id:"description-24",level:4},{value:"Syntax",id:"syntax-24",level:4},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Example Code",id:"example-code-24",level:4},{value:"Arduino",id:"arduino-24",level:5},{value:"armPattern()",id:"armpattern",level:3},{value:"Description",id:"description-25",level:4},{value:"Syntax",id:"syntax-25",level:4},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Example Code",id:"example-code-25",level:4},{value:"Arduino",id:"arduino-25",level:5},{value:"armStrobe()",id:"armstrobe",level:3},{value:"Description",id:"description-26",level:4},{value:"Syntax",id:"syntax-26",level:4},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Example Code",id:"example-code-26",level:4},{value:"Arduino",id:"arduino-26",level:5},{value:"eyeColor()",id:"eyecolor",level:3},{value:"Description",id:"description-27",level:4},{value:"Syntax",id:"syntax-27",level:4},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Example Code",id:"example-code-27",level:4},{value:"Arduino",id:"arduino-27",level:5},{value:"eyeDefaultColor()",id:"eyedefaultcolor",level:3},{value:"Description",id:"description-28",level:4},{value:"Syntax",id:"syntax-28",level:4},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Example Code",id:"example-code-28",level:4},{value:"Arduino",id:"arduino-28",level:5},{value:"eyeDefaultPattern()",id:"eyedefaultpattern",level:3},{value:"Description",id:"description-29",level:4},{value:"Syntax",id:"syntax-29",level:4},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Example Code",id:"example-code-29",level:4},{value:"Arduino",id:"arduino-29",level:5},{value:"eyeOff()",id:"eyeoff",level:3},{value:"Description",id:"description-30",level:4},{value:"Syntax",id:"syntax-30",level:4},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Example Code",id:"example-code-30",level:4},{value:"Arduino",id:"arduino-30",level:5},{value:"eyePattern()",id:"eyepattern",level:3},{value:"Description",id:"description-31",level:4},{value:"Syntax",id:"syntax-31",level:4},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Example Code",id:"example-code-31",level:4},{value:"Arduino",id:"arduino-31",level:5},{value:"eyeStrobe()",id:"eyestrobe",level:3},{value:"Description",id:"description-32",level:4},{value:"Syntax",id:"syntax-32",level:4},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Example Code",id:"example-code-32",level:4},{value:"Arduino",id:"arduino-32",level:5},{value:"resetDefaultLED()",id:"resetdefaultled",level:3},{value:"Description",id:"description-33",level:4},{value:"Syntax",id:"syntax-33",level:4},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Example Code",id:"example-code-33",level:4},{value:"Arduino",id:"arduino-33",level:5},{value:"Status Checkers",id:"status-checkers",level:2},{value:"isFlying()",id:"isflying",level:3},{value:"Description",id:"description-34",level:4},{value:"Syntax",id:"syntax-34",level:4},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Example Code",id:"example-code-34",level:4},{value:"Arduino",id:"arduino-34",level:5},{value:"isReadyToFly()",id:"isreadytofly",level:3},{value:"Description",id:"description-35",level:4},{value:"Syntax",id:"syntax-35",level:4},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-35",level:4},{value:"Example Code",id:"example-code-35",level:4},{value:"Arduino",id:"arduino-35",level:5},{value:"isUpsideDown()",id:"isupsidedown",level:3},{value:"Description",id:"description-36",level:4},{value:"Syntax",id:"syntax-36",level:4},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-36",level:4},{value:"Example Code",id:"example-code-36",level:4},{value:"Arduino",id:"arduino-36",level:5},{value:"onLowBattery()",id:"onlowbattery",level:3},{value:"Description",id:"description-37",level:4},{value:"Syntax",id:"syntax-37",level:4},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-37",level:4},{value:"Example Code",id:"example-code-37",level:4},{value:"Arduino",id:"arduino-37",level:5},{value:"Sensors",id:"sensors",level:2},{value:"getAccelerometer()",id:"getaccelerometer",level:3},{value:"Description",id:"description-38",level:4},{value:"Syntax",id:"syntax-38",level:4},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-38",level:4},{value:"Example Code",id:"example-code-38",level:4},{value:"Arduino",id:"arduino-38",level:5},{value:"getAngularSpeed()",id:"getangularspeed",level:3},{value:"Description",id:"description-39",level:4},{value:"Syntax",id:"syntax-39",level:4},{value:"Parameters",id:"parameters-39",level:4},{value:"Returns",id:"returns-39",level:4},{value:"Example Code",id:"example-code-39",level:4},{value:"Arduino",id:"arduino-39",level:5},{value:"getBatteryPercentage()",id:"getbatterypercentage",level:3},{value:"Description",id:"description-40",level:4},{value:"Syntax",id:"syntax-40",level:4},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-40",level:4},{value:"Example Code",id:"example-code-40",level:4},{value:"Arduino",id:"arduino-40",level:5},{value:"getBatteryVoltage()",id:"getbatteryvoltage",level:3},{value:"Description",id:"description-41",level:4},{value:"Syntax",id:"syntax-41",level:4},{value:"Parameters",id:"parameters-41",level:4},{value:"Returns",id:"returns-41",level:4},{value:"Example Code",id:"example-code-41",level:4},{value:"Arduino",id:"arduino-41",level:5},{value:"getDroneTemp()",id:"getdronetemp",level:3},{value:"Description",id:"description-42",level:4},{value:"Syntax",id:"syntax-42",level:4},{value:"Parameters",id:"parameters-42",level:4},{value:"Returns",id:"returns-42",level:4},{value:"Example Code",id:"example-code-42",level:4},{value:"Arduino",id:"arduino-42",level:5},{value:"getGyroAngles()",id:"getgyroangles",level:3},{value:"Description",id:"description-43",level:4},{value:"Syntax",id:"syntax-43",level:4},{value:"Parameters",id:"parameters-43",level:4},{value:"Returns",id:"returns-43",level:4},{value:"Example Code",id:"example-code-43",level:4},{value:"Arduino",id:"arduino-43",level:5},{value:"getHeight()",id:"getheight",level:3},{value:"Description",id:"description-44",level:4},{value:"Syntax",id:"syntax-44",level:4},{value:"Parameters",id:"parameters-44",level:4},{value:"Returns",id:"returns-44",level:4},{value:"Example Code",id:"example-code-44",level:4},{value:"Arduino",id:"arduino-44",level:5},{value:"getOptFlowPosition()",id:"getoptflowposition",level:3},{value:"Description",id:"description-45",level:4},{value:"Syntax",id:"syntax-45",level:4},{value:"Parameters",id:"parameters-45",level:4},{value:"Returns",id:"returns-45",level:4},{value:"Example Code",id:"example-code-45",level:4},{value:"Arduino",id:"arduino-45",level:5},{value:"getPressure()",id:"getpressure",level:3},{value:"Description",id:"description-46",level:4},{value:"Syntax",id:"syntax-46",level:4},{value:"Parameters",id:"parameters-46",level:4},{value:"Returns",id:"returns-46",level:4},{value:"Example Code",id:"example-code-46",level:4},{value:"Arduino",id:"arduino-46",level:5},{value:"getState()",id:"getstate",level:3},{value:"Description",id:"description-47",level:4},{value:"Syntax",id:"syntax-47",level:4},{value:"Parameters",id:"parameters-47",level:4},{value:"Returns",id:"returns-47",level:4},{value:"Example Code",id:"example-code-47",level:4},{value:"Arduino",id:"arduino-47",level:5},{value:"getTrim()",id:"gettrim",level:3},{value:"Description",id:"description-48",level:4},{value:"Syntax",id:"syntax-48",level:4},{value:"Parameters",id:"parameters-48",level:4},{value:"Returns",id:"returns-48",level:4},{value:"Example Code",id:"example-code-48",level:4},{value:"Arduino",id:"arduino-48",level:5}];function c(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("div",{className:"print_div",children:(0,i.jsx)("button",{id:"print_page",onClick:()=>window.print(),children:"Print"})}),"\n",(0,i.jsx)(n.h2,{id:"connection",children:"Connection"}),"\n",(0,i.jsx)(n.h3,{id:"disconnect",children:"disconnect()"}),"\n",(0,i.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function disconnects with the drone that you're connected to."}),"\n",(0,i.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"disconnect()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code",children:"Example Code"}),"\n",(0,i.jsx)(n.h6,{id:"arduino",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>\t\t//header\n\nvoid setup(){\n\t//below this have to code in setup\n\t//open serial and connect\n\tCoDrone.begin(115200);\n\tCoDrone.pair(Nearest);\n\n\tCoDrone.takeoff();\n\tCoDrone.hover(3);\n\tCoDrone.land();\n\tCoDrone.disconnect(); \t// disconnects\t\n}\n\nvoid loop(){\n\t\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"pair",children:"pair()"}),"\n",(0,i.jsx)(n.h4,{id:"description-1",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["This function pairs the BLE board to the CoDrone.  After establishing a connection, it always waits for 3 seconds before executing the next command. Pair works a bit differently between Arduino and Python.  With the Arduino-based remote, ",(0,i.jsx)(n.code,{children:"pair()"})," with no parameters will pair with the last paired CoDrone. If it's your first time running ",(0,i.jsx)(n.code,{children:"pair()"}),', it will just find the nearest CoDrone it can find, then "lock in" with that CoDrone, save it to "PairInfo" and always pair with it until you run ',(0,i.jsx)(n.code,{children:"pair(drone.Nearest)"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pair()"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"pair(Nearest)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"pair(bluetoothAddress)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:["** Nearest:** If you specify ",(0,i.jsx)(n.code,{children:"Nearest"}),' in Arduino, it will pair with the first drone it finds (which may not always be the nearest CoDrone, in some cases, just the first CoDrone it finds). This function can be used to "unlock" the drone from only pairing with the CoDrone it\'s been "locked in" with. Once you\'ve paired with a nearest CoDrrone, you can run ',(0,i.jsx)(n.code,{children:"pair()"}),' again with no parameters, and it will only pair with the "locked in" CoDrone.',(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"address:"})," This is the address of the CoDrone. In Arduino, this is a 6-index array of bytes representing the Bluetooth address."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-1",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-1",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n#include<CoDrone.h>\t\t//header\n\nvoid setup(){\n  //below this have to code in setup\n  CoDrone.begin(115200);\n\n  //IMPORATNT: You would only run ONE of the 3 options below\n\n  /* 1) This will pair with the last drone that the remote was paired to. If this is the first time pairing, \n   *    this function will pair with whatever first drone it finds, and "lock in" to that drone and only pair with \n   *    that drone\n   */\n  CoDrone.pair();\n\n   /* 2) This will pair with the nearest drone that the BLE board finds. You can use this function to "unlock" a \n   *    remote that\'s been "locked in" to a drone. So first run this code, then just upload and run with "CoDrone.pair()" *    to "lock in" to that drone\n   */\n  CoDrone.pair(Nearest);\n\n}\n\nvoid loop(){\n\n}\n\n'})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"flight-commands-startstop",children:"Flight Commands (Start/Stop)"}),"\n",(0,i.jsx)(n.h3,{id:"emergencystop",children:"emergencyStop()"}),"\n",(0,i.jsx)(n.h4,{id:"description-2",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function immediately stops all commands and stops all motors, so the drone will stop flying immediately.\nThe function will also zero-out all of the flight motion variables to 0."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"emergencyStop()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-2",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-2",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();      // take off and hover for 3 second\n    CoDrone.emergencyStop();    // emergency stop   \n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"land",children:"land()"}),"\n",(0,i.jsx)(n.h4,{id:"description-3",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function makes the drone stop all commands, hovers, and makes a soft landing where it is.\nThe function will also zero-out all of the flight motion variables to 0."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"land()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-3",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-3",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //below this have to code in setup\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();      // take off and hover for 3 second\n    CoDrone.hover(3);       // hover for 3 second\n    CoDrone.land();     //landing   \n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"takeoff",children:"takeoff()"}),"\n",(0,i.jsx)(n.h4,{id:"description-4",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function makes the drone take off and begin hovering.\nThe drone will always hover for 3 seconds in order to stabilize before it executes the next command.\nIf it receives no command for 8 seconds, it will automatically land."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"takeoff()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-4",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-4",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //below this have to code in setup\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();      // take off and hover for 3 second\n    CoDrone.hover(3);       // hover for 3 second\n    CoDrone.land();     //landing   \n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"flight-commands-movement",children:"Flight Commands (Movement)"}),"\n",(0,i.jsx)(n.h3,{id:"flysequence",children:"flySequence()"}),"\n",(0,i.jsx)(n.h4,{id:"description-5",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function make drone fly specific shape and hover after finish. The options are square, circle, spiral, triangle, hop, sway, zigzag"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"flySequence(sequence)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," Sequence"]}),": SQUARE, CIRCLE, SPIRAL, TRIANGLE, HOP, SWAY, ZIGZAG"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-5",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-5",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.flySequence(TRIANGLE);  // Fly triangle shape\n    CoDrone.flySequence(SPIRAL);    // Fly spiral shape\n    CoDrone.flySequence(SQUARE);    // Fly square (right -> forward -> left -> backward)\n    CoDrone.land();\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"gotoheight",children:"goToHeight()"}),"\n",(0,i.jsx)(n.h4,{id:"description-6",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a setter function will make the drone fly to the given height above the object directly below its IR sensor (usually the ground).\nIt\u2019s effective between 20 and 2000 millimeters. It uses the IR sensor to continuously check for its height."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"goToHeight(height)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"height:"})," An int from 20 to 2000 in millimeters"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-6",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-6",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.goToHeight(1000);       // Fly 1000mm away from bottom and hover    \n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"go",children:"go()"}),"\n",(0,i.jsx)(n.h4,{id:"description-7",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"A simpler Junior level function that represents positive flight with a direction, but with more natural language. It simply flies in the given direction for the given duration and power."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"go(direction)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"go(direction, duration)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"go(direction, duration, power)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," Direction"]}),":\ta constant in Arduino. It\u2019s the direction of the flight, which can be one of the following: FORWARD, BACKWARD, LEFT, RIGHT, UP, and DOWN.",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"duration"}),":\tthe duration of the flight motion in seconds. If undefined, defaults to 1 seconds. If duration is 0, it will turn right indefinitely.",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"power"}),": the power at which the drone flies forward. Takes a value from 0 to 100. Defaults to 50 if not defined."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-7",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-7",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.go(FORWARD);        // Go forward at 50% power for 1 second\n    CoDrone.go(UP, 5);          // Go up for 5 seconds at 50% power\n    CoDrone.go(BACKWARD, 3, 70) // Go backwards for 3 seconds at 70% power  \n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"hover",children:"hover()"}),"\n",(0,i.jsx)(n.h4,{id:"description-8",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function makes the drone hover for a given amount of time. If you enter a 0 or None, it will hover indefinitely until given a another command."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-8",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"hover(duration)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"duration"}),": the duration of the hovering in seconds."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-8",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-8",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();      // take off and hover for 3 second\n    CoDrone.hover(3);       // hover for 3 second\n    CoDrone.land();         //landing   \n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"rotate180",children:"rotate180()"}),"\n",(0,i.jsx)(n.h4,{id:"description-9",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function makes the drone rotate 180 degrees. Only rotates in a random direction, because this is a pre-set flight event in the firmware."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-9",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"rotate180()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-9",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-9",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"turndegree",children:"turnDegree()"}),"\n",(0,i.jsx)(n.h4,{id:"description-10",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"A Senior level function that yaws by a given degree in a given direction. This function takes an input degree in an input direction, and turns until it reaches the given degree. In some instances, the drone may turn past the given degree and need to rotate all the way around again before reaching the correct degree."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-10",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"turnDegree(direction, degree)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," Direction"]}),": LEFT or RIGHT",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," Degree"]}),": a constant in Arduino. The degree the drone will turn to the right, with its starting position representing 0 degrees, ANGLE_30, ANGLE_45, ANGLE_60, ANGLE_90, ANGLE_120, ANGLE_135, ANGLE_150, ANGLE_180, ANGLE_210, ANGLE_225, ANGLE_240, ANGLE_270, ANGLE_300, ANGLE_315, ANGLE_330"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-10",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-10",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.turnDegree(LEFT, ANGLE_45);         // Turn left 45 degrees\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"turn",children:"turn()"}),"\n",(0,i.jsx)(n.h4,{id:"description-11",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"A function that represents yaw, but with more natural language. It simply turns in the given direction, duration and power."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-11",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"turn(direction)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"turn(direction, duration)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"turn(direction, duration, power)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," Direction"]}),": a constant in Arduino. It\u2019s the direction of the turn, which can be one of the following: LEFT or RIGHT.",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"duration"}),": the duration of the turn in seconds. If 0, it will turn right indefinitely. Defaults to 1 second if not defined.",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"power"}),": the power at which the drone turns right. Takes a value from 0 to 100. Defaults to 50 if not defined."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-11",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-11",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.turn(LEFT);             // Turn left for 1 second at 50 power\n    CoDrone.turn(LEFT, 0);          // Turn left at 50 power indefinitely\n    CoDrone.turn(RIGHT, 5, 100);    // Turn right for 5 seconds at 100 power    \n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"flight-variables",children:"Flight Variables"}),"\n",(0,i.jsx)(n.h3,{id:"getpitch",children:"getPitch()"}),"\n",(0,i.jsx)(n.h4,{id:"description-12",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a getter function that gets the value of the pitch variable."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-12",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getPitch()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"power:"})," The power of the pitch variable (int)"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-12",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-12",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // save current pitch value in variable \u201ccurrent_pitch\u201d\n    int current_pitch = CoDrone.getPitch(); \n}\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getroll",children:"getRoll()"}),"\n",(0,i.jsx)(n.h4,{id:"description-13",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a getter function that gets the value of the roll variable."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-13",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getRoll()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-13",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"power:"})," The power of the roll variable (int)"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-13",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-13",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // save current roll value in variable \u201ccurrent_roll\u201d\n    int current_roll = CoDrone.getRoll(); \n}\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getthrottle",children:"getThrottle()"}),"\n",(0,i.jsx)(n.h4,{id:"description-14",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a getter function that gets the value of the throttle variable."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-14",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getThrottle()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-14",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"power:"})," The power of the throttle variable (int)"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-14",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-14",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // save current throttle value in variable \u201ccurrent_throttle\u201d\n    int current_throttle = CoDrone.getThrottle(); \n}\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getyaw",children:"getYaw()"}),"\n",(0,i.jsx)(n.h4,{id:"description-15",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a getter function that gets the value of the yaw variable."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-15",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getYaw()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-15",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"power:"})," The power of the yaw variable (int)"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-15",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-15",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // save current yaw value in variable \u201ccurrent_yaw\u201d\n    int current_yaw = CoDrone.getYaw(); \n}\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"move",children:"move()"}),"\n",(0,i.jsx)(n.h4,{id:"description-16",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["You can use this function to create more complex flight movements.  With no parameters, ",(0,i.jsx)(n.code,{children:"move()"})," will just run based on whatever the flight variables have been set to with functions like ",(0,i.jsx)(n.code,{children:"setPitch()"})," and ",(0,i.jsx)(n.code,{children:"setThrottle()"})," indefinitely.  You can also run it for a certain duration.  The function also takes multiple parameters, where you can set roll, pitch, yaw, and throttle all at once.  You can run it infinitely with 4 parameters, or you can run it for a given duration with 5 parameters.  If the drone is not flying, nothing will happen."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-16",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"move()"}),": runs infinitely",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"move(duration)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"move(roll, pitch, yaw, throttle)"}),": runs infinitely",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"move(duration, roll, pitch, yaw, throttle)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"duration:"})," the duration of the flight motion in seconds. If 0, the duration is infinity.",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"roll:"})," the power of the roll, which is an int from -100 to 100",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"pitch:"})," the power of the pitch, which is an int from -100 to 100",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"yaw:"})," the power of the yaw, which is an int from -100 to 100",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"throttle:"})," the power of the throttle, which is an int from -100 to 100"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-16",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-16",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-16",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();          // take off\n\n    // Move indefinitely with pitch set to 50\n    CoDrone.setPitch(50);\n    CoDrone.move();\n\n    // Move 5 seconds to the right with roll set to 50\n    CoDrone.setRoll(50);\n    CoDrone.move(5);\n\n    CoDrone.move(0, 0, 0, 80, 80);  // Move up(throttle) and turn left(yaw) indefinitely\n    CoDrone.move(5, 0, 0, 80, 80);  // Move up(throttle) and turn left(yaw) for 5 seconds\n\n    CoDrone.land();             //land\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"setpitch",children:"setPitch()"}),"\n",(0,i.jsx)(n.h4,{id:"description-17",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a setter function that allows you to set the pitch variable."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-17",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"setPitch(power)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"power:"})," An int from -100 to 100 that sets the pitch variable.  The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-17",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-17",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-17",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.setPitch(60);       // set pitch power for 60%\n    CoDrone.move(5);        // move drone for 5 seconds\n    CoDrone.land();\n}\n\nvoid loop(){\n\n}\t\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"setroll",children:"setRoll()"}),"\n",(0,i.jsx)(n.h4,{id:"description-18",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a setter function that allows you to set the roll variable."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-18",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"setRoll(power)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"power:"})," An int from -100 to 100 that sets the roll variable.  The number represents the direction and power of the output for that flight motion variable.  Negative roll is left, positive roll is right."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-18",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-18",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-18",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.setRoll(60);        // set roll power for 60%\n    CoDrone.move(5);        // move drone for 5 seconds\n    CoDrone.land();\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"setthrottle",children:"setThrottle()"}),"\n",(0,i.jsx)(n.h4,{id:"description-19",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a setter function that allows you to set the throttle variable."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-19",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"setThrottle(power)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"power:"})," An int from -100 to 100 that sets the throttle variable.  The number represents the direction and power of the output for that flight motion variable. Negative throttle descends, positive throttle ascends."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-19",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-19",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-19",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.setThrottle(60);    // set throttle power for 60%\n    CoDrone.move(5);            // move drone for 5 seconds\n    CoDrone.land();\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"setyaw",children:"setYaw()"}),"\n",(0,i.jsx)(n.h4,{id:"description-20",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a setter function that allows you to set the yaw variable."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-20",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"setYaw(power)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"power:"})," An int from -100 to 100 that sets the yaw variable. The number represents the direction and power of the output for that flight motion variable. Negative yaw turns left, positive yaw turns right."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-20",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-20",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-20",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.setYaw(60);     // set yaw power for 60%\n    CoDrone.move(5);        // move drone for 5 seconds\n    CoDrone.land();\n}\n\nvoid loop(){\n\n}\t\n"})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"led",children:"LED"}),"\n",(0,i.jsx)(n.h3,{id:"armcolor",children:"armColor()"}),"\n",(0,i.jsx)(n.h4,{id:"description-21",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the LED color of the arms using RGB values and their brightness with value from 1 - 100."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-21",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"armColor(color, brightness)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"armColor(red, green, blue, brightness)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-21",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," Color"]}),': a const in Arduino, which can be set using predefined colors out of the list below in "Example Code" under "LED Color Options" ',(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"green"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"blue"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"brightness"}),": in value from 0 to 100, which represents the brightness of the light",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"returns-21",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-21",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-21",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"/Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.armColor(White, 100);          // set color to red using Color\n    CoDrone.armColor(255, 0, 0, 100);      // set color to red using RGB\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"led-color-options",children:"LED Color options"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\tAliceBlue, AntiqueWhite, Aqua,\n    Aquamarine, Azure, Beige,\n    Bisque, Black, BlanchedAlmond,\n    Blue, BlueViolet, Brown,\n    BurlyWood, CadetBlue, Chartreuse,\n    Chocolate, Coral, CornflowerBlue,\n    Cornsilk, Crimson, Cyan,\n    DarkBlue, DarkCyan, DarkGoldenRod,\n    DarkGray, DarkGreen, DarkKhaki,\n    DarkMagenta, DarkOliveGreen, DarkOrange,\n    DarkOrchid, DarkRed, DarkSalmon,\n    DarkSeaGreen, DarkSlateBlue, DarkSlateGray,\n    DarkTurquoise, DarkViolet, DeepPink,\n    DeepSkyBlue, DimGray, DodgerBlue,\n    FireBrick, FloralWhite, ForestGreen,\n    Fuchsia, Gainsboro, GhostWhite,\n    Gold, GoldenRod, Gray,\n    Green, GreenYellow, HoneyDew,\n    HotPink, IndianRed, Indigo,\n    Ivory, Khaki, Lavender,\n    LavenderBlush, LawnGreen, LemonChiffon,\n    LightBlue, LightCoral, LightCyan,\n    LightGoldenRodYellow, LightGray, LightGreen,\n    LightPink, LightSalmon, LightSeaGreen,\n    LightSkyBlue, LightSlateGray, LightSteelBlue,\n    LightYellow, Lime, LimeGreen,\n    Linen, Magenta, Maroon,\n    MediumAquaMarine, MediumBlue, MediumOrchid,\n    MediumPurple, MediumSeaGreen, MediumSlateBlue,\n    MediumSpringGreen, MediumTurquoise, MediumVioletRed,\n    MidnightBlue, MintCream, MistyRose,\n    Moccasin, NavajoWhite, Navy,\n    OldLace, Olive, OliveDrab,\n    Orange, OrangeRed, Orchid,\n    PaleGoldenRod, PaleGreen, PaleTurquoise,\n    PaleVioletRed, PapayaWhip, PeachPuff,\n    Peru, Pink, Plum,\n    PowderBlue, Purple, RebeccaPurple,\n    Red, RosyBrown, RoyalBlue,\n    SaddleBrown, Salmon, SandyBrown,\n    SeaGreen, SeaShell, Sienna,\n    Silver, SkyBlue, SlateBlue,\n    SlateGray, Snow, SpringGreen,\n    SteelBlue, Tan, Teal,\n    Thistle, Tomato, Turquoise,\n    Violet, Wheat, White,\n    WhiteSmoke, Yellow, YellowGreen,\n    EndOfColor\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"armdefaultcolor",children:"armDefaultColor()"}),"\n",(0,i.jsx)(n.h4,{id:"description-22",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the default LED color of the eyes as well as the mode, so it will remain that color even after powering off and back on. The colors set are using RGB values."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-22",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"armDefaultColor(red, green, blue, brightness)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-22",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"green"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"blue"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"brightness"}),": in value from 0 to 100, which represents the brightness of the light",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"returns-22",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-22",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-22",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // set default arm color to an RGB of (0, 120, 155) with full brightness\n    CoDrone.armDefaultColor(0, 120, 155, 100);\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"armdefaultpattern",children:"armDefaultPattern()"}),"\n",(0,i.jsx)(n.h4,{id:"description-23",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the default color of the arm LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-23",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"armDefaultPattern(color, mode)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"armDefaultPattern(color, mode, speed)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"armDefaultPattern(red, green, blue, mode)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"armDefaultPattern(red, green, blue, mode, speed)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-23",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," Color"]}),": a const which can be set using predefined colors out of the list under ",(0,i.jsx)("a",{href:"#led-color-options",children:'"LED Color Options"'})," ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"green"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"blue"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," Mode"]}),": an const in Arduino which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING, PULSE, REVERSE_PULSE",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"speed"}),": int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-23",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-23",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-23",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n//open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // set default arm pattern to blue using RGB and double blink slowly\n    CoDrone.armDefaultPattern(0, 0, 100, BLINK, 150);\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"armoff",children:"armOff()"}),"\n",(0,i.jsx)(n.h4,{id:"description-24",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function turns off the arm LEDs"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-24",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"armOff()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-24",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-24",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-24",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-24",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n//open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.armOff();\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"armpattern",children:"armPattern()"}),"\n",(0,i.jsx)(n.h4,{id:"description-25",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the color of the arm LED lights to flash in a particular pre-set pattern at a given speed."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-25",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"armPattern(color, mode)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"armPattern(color, mode, speed)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"armPattern(red, green, blue, mode)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"armPattern(red, green, blue, mode, speed)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-25",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," color"]}),": a const in Arduino which can be set using predefined colors out of the list under ",(0,i.jsx)("a",{href:"#led-color-options",children:'"LED Color Options"'}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"green"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"blue"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," mode"]}),": a const in Arduino which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING, PULSE, REVERSE_PULSE",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"speed"}),": int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-25",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-25",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-25",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n//open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.armPattern(Red, DOUBLE_BLINK, 200);                 // Set arms to double blink red slowly using Color\n    CoDrone.armPattern(0, 0, 255, PULSE, 200);                  // Set arms to pulse blue slowly using RGB\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"armstrobe",children:"armStrobe()"}),"\n",(0,i.jsx)(n.h4,{id:"description-26",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function makes the arms to strobe in various colors"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-26",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"armStrobe()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-26",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-26",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-26",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-26",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n//open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // strobe the arms\n    CoDrone.armStrobe();\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"eyecolor",children:"eyeColor()"}),"\n",(0,i.jsx)(n.h4,{id:"description-27",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the LED color of the arms using RGB values and their brightness with value a from 1 - 100."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-27",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"eyeColor(color, brightness)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"eyeColor(red, green, blue, brightness)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-27",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," color"]}),": a const in Arduino which can be set using predefined colors out of the list under  ",(0,i.jsx)("a",{href:"#led-color-options",children:'"LED Color Options"'}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"green"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"blue"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"brightness"}),": in value from 0 to 100, which represents the brightness of the light",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"returns-27",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-27",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-27",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.eyeColor(White, 100);          // set color to red using Color \n    CoDrone.eyeColor(255, 0, 0, 100);      // set color to red using RGB\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"eyedefaultcolor",children:"eyeDefaultColor()"}),"\n",(0,i.jsx)(n.h4,{id:"description-28",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the default LED color of the eyes using RGB values and their brightness with a value from 1 - 100. This means the color will remain, even after the CoDrone has been powered off and back on."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-28",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"eyeDefaultColor(red, green, blue, brightness)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-28",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"green"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"blue"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"brightness"}),": in value from 0 to 100, which represents the brightness of the light"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-28",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-28",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-28",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // set default eye color to an RGB of (0, 0, 100) with full brightness\n    CoDrone.eyeDefaultColor(0, 120, 155, 100);\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"eyedefaultpattern",children:"eyeDefaultPattern()"}),"\n",(0,i.jsx)(n.h4,{id:"description-29",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the default color of the eyes LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-29",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"eyeDefaultPattern(color, mode)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"eyeDefaultPattern(color, mode, speed)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"eyeDefaultPattern(red, green, blue, mode)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"eyeDefaultPattern(red, green, blue, mode, speed)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-29",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," color"]}),": a const in Arduino which can be set using predefined colors out of the list under  ",(0,i.jsx)("a",{href:"#led-color-options",children:'"LED Color Options"'}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"green"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"blue"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," mode"]}),": a const in Arduino which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"speed"}),": int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-29",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-29",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-29",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n//open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // set default arm pattern to blue using RGB and blink quickly\n    CoDrone.eyeDefaultPattern(0,0,100, BLINK, 20);\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"eyeoff",children:"eyeOff()"}),"\n",(0,i.jsx)(n.h4,{id:"description-30",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function turns off the eye LEDs"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-30",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"eyeOff()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-30",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-30",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-30",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-30",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n//open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // turn off the eyes\n    CoDrone.eyeOff();\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"eyepattern",children:"eyePattern()"}),"\n",(0,i.jsx)(n.h4,{id:"description-31",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the color of the eye LED lights to flash in a particular pre-set pattern at a given speed."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-31",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"eyePattern(color, mode)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"eyePattern(color, mode, speed)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"eyePattern(red, green, blue, mode)"}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"eyePattern(red, green, blue, mode, speed)"})]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-31",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," color"]}),": a const in Arduino which can be set using predefined colors out of the list under  ",(0,i.jsx)("a",{href:"#led-color-options",children:'"LED Color Options"'})," ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"green"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"blue"}),": int value from 0 to 255",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"const"})," mode"]}),": a const in Arduino which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"speed"}),": int value from 0 - 255, which represents the speed of the pattern. 255 is slowest, 0 is fastest."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-31",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-31",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-31",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n//open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.eyePattern(Red, DOUBLE_BLINK, 1);             // Set eyes to double blink red quickly using Color\n    CoDrone.eyePattern(255, 0, 0, DOUBLE_BLINK, 10);       // Set eyes to double blink red quickly using RGB\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"eyestrobe",children:"eyeStrobe()"}),"\n",(0,i.jsx)(n.h4,{id:"description-32",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function makes the arms to strobe in various colors"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-32",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"eyeStrobe()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-32",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-32",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-32",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-32",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n//open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // strobe the eyes\n    CoDrone.eyeStrobe();\n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"resetdefaultled",children:"resetDefaultLED()"}),"\n",(0,i.jsx)(n.h4,{id:"description-33",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function sets the LED color of the eyes and arms back to red and sets the mode to SOLID, which is the original default color."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-33",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"resetDefaultLED()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-33",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-33",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-33",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-33",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // Reset Drone\u2019s LED to holding the Red color \n    CoDrone.resetDefaultLED();  \n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"status-checkers",children:"Status Checkers"}),"\n",(0,i.jsx)(n.h3,{id:"isflying",children:"isFlying()"}),"\n",(0,i.jsx)(n.h4,{id:"description-34",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function checks whether the drone is flying and returns a boolean"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-34",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"isFlying()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-34",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-34",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Boolean:"})," Returns True/False whether the drone is flying"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-34",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-34",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // If drone is flying land the drone\n    if(CoDrone.isFlying()==true)    \n        CoDrone.land();\n}\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"isreadytofly",children:"isReadyToFly()"}),"\n",(0,i.jsx)(n.h4,{id:"description-35",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function checks whether the drone is ready to fly by returning a boolean. The drone is ready to fly if it is oriented right-side up, and not flying."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-35",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"isReadyToFly()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-35",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-35",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Boolean:"})," Returns True/False whether the drone is ready to fly."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-35",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-35",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n//open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // if drone is ready to fly, take off the drone\n    if(CoDrone.isReadyToFly() == true)  \n        CoDrone.takeoff()   \n}\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"isupsidedown",children:"isUpsideDown()"}),"\n",(0,i.jsx)(n.h4,{id:"description-36",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function checks whether the drone is upside-down and returns a boolean"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-36",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"isUpsideDown()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-36",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-36",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Boolean:"})," Returns True/False whether the drone is upside-down"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-36",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-36",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    if(CoDrone.isUpsideDown()==false)   // if drone is not upside down take off the drone\n        CoDrone.takeoff();  \n}\n\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"onlowbattery",children:"onLowBattery()"}),"\n",(0,i.jsx)(n.h4,{id:"description-37",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"Add callback function when CoDrone battery percentage is lower than 50%"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-37",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"onLowBattery(function)"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-37",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"function:"})," a callback function when battery is lower than 50%"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-37",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"example-code-37",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-37",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n//Not supported\n"})}),"\n",(0,i.jsx)("hr",{className:"section_hr"}),"\n",(0,i.jsx)(n.h2,{id:"sensors",children:"Sensors"}),"\n",(0,i.jsx)(n.h3,{id:"getaccelerometer",children:"getAccelerometer()"}),"\n",(0,i.jsx)(n.h4,{id:"description-38",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function gets the accelerometer sensor data, which returns x, y, and z. It outputs as a struct in Arduino."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-38",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getAccelerometer()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-38",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-38",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"struct"})," acceldata:"]})," Returns a struct with acceleration data."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-38",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-38",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);  \n}\n\nvoid loop(){\n    // Struct for get accelerometer data\n    acceldata accel;\n\n    CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);   //link module mode change => Active\n    accel = CoDrone.getAccelerometer();     //save request data\n    delay(100);\n\n    CoDrone.Send_LinkModeBroadcast(LinkModeMute);           //link module mode change => Mute\n    delay(100);\n\n    Serial.println("");\n    Serial.println("--------- Now -----------");\n    Serial.print("accel x : \\t");\n    Serial.println(accel.x);\n    Serial.print("accel y : \\t");\n    Serial.println(accel.y);\n    Serial.print("accel z : \\t");\n    Serial.println(accel.z);    \n}\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getangularspeed",children:"getAngularSpeed()"}),"\n",(0,i.jsx)(n.h4,{id:"description-39",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function gets the data from the gyrometer sensor for the roll, pitch, and yaw angular speed."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-39",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getAngularSpeed()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-39",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-39",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"struct"})," gyrodata:"]})," Returns a struct with angular speed data."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-39",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-39",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);  \n}\n\nvoid loop(){\n    // Struct for get Angular speed(gyro) data\n    gyrodata gyro;\n\n    CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);   //link module mode change => Active\n    gyro = CoDrone.getAngularSpeed();                       //save request data\n    delay(100);\n\n    CoDrone.Send_LinkModeBroadcast(LinkModeMute);           //link module mode change => Mute\n    delay(100);\n\n    Serial.println("");\n    Serial.println("--------- Now -----------");\n    Serial.print("gyro roll : \\t");\n    Serial.println(gyro.roll);\n    Serial.print("gyro pitch : \\t");\n    Serial.println(gyro.pitch);\n    Serial.print("gyro yaw : \\t");\n    Serial.println(gyro.yaw);   \n}\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getbatterypercentage",children:"getBatteryPercentage()"}),"\n",(0,i.jsx)(n.h4,{id:"description-40",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function gets the battery percentage of the drone, returning a value from 0 to 100."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-40",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getBatteryPercentage()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-40",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-40",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"percentage:"})," The battery\u2019s percentage as an integer from 0 - 100."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-40",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-40",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n}\n\nvoid loop(){\n    int batteryPercentage;\n\n    CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);   //link module mode change => Active\n    batteryPercentage = CoDrone.getBatteryPercentage();     //save request data\n    delay(100);\n\n    CoDrone.Send_LinkModeBroadcast(LinkModeMute);           //link module mode change => Mute\n    delay(100);\n\n    Serial.println("");\n    Serial.println("--------- Now -----------");\n    Serial.print("batteryPercentage : \\t");\n    Serial.println(batteryPercentage);  \n}\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getbatteryvoltage",children:"getBatteryVoltage()"}),"\n",(0,i.jsx)(n.h4,{id:"description-41",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function gets the voltage of the battery"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-41",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getBatteryVoltage()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-41",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-41",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"voltage:"})," The voltage of the battery as an a float"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-41",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-41",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n}\n\nvoid loop(){\n    int batteryVoltage;\n\n    CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);   //link module mode change => Active\n    batteryVoltage = CoDrone.getBatteryVoltage();       //save request data\n    delay(100);\n\n    CoDrone.Send_LinkModeBroadcast(LinkModeMute);           //link module mode change => Mute\n    delay(100);\n\n    Serial.println("");\n    Serial.println("--------- Now -----------");\n    Serial.print("batteryVoltage : \\t");\n    Serial.println(batteryVoltage); \n}\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getdronetemp",children:"getDroneTemp()"}),"\n",(0,i.jsx)(n.h4,{id:"description-42",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a getter function gets the data from the drone\u2019s temperature sensor. Importantly, it reads the drone\u2019s temperature, not the air around it."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-42",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getDroneTemp()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-42",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-42",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"temperature:"})," The temperature in Celsius as an integer."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-42",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-42",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);      \n}\n\nvoid loop(){\n    int temperature;\n\n    CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);   //link module mode change => Active\n    temperature = CoDrone.getDroneTemp();                   //save request data\n    delay(100);\n\n    CoDrone.Send_LinkModeBroadcast(LinkModeMute);           //link module mode change => Mute\n    delay(100);\n\n    Serial.println("");\n    Serial.println("--------- Now -----------");\n    Serial.print("temperature : \\t");\n    Serial.println(temperature);    \n}\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getgyroangles",children:"getGyroAngles()"}),"\n",(0,i.jsx)(n.h4,{id:"description-43",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function gets the data from the gyrometer sensor to determine the roll, pitch, and yaw as angles."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-43",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getGyroAngles()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-43",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-43",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"struct"})," angledata:"]})," Returns a struct with angle data."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-43",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-43",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);  \n}\n\nvoid loop(){\n    // Struct for get angles(attitude) data\n    angledata angle;\n\n    CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);   //link module mode change => Active\n    angle = CoDrone.getGyroAngles();                        //save request data\n    delay(100);\n\n    CoDrone.Send_LinkModeBroadcast(LinkModeMute);           //link module mode change => Mute\n    delay(100);\n\n    Serial.println("");\n    Serial.println("--------- Now -----------");\n    Serial.print("angle roll : \\t");\n    Serial.println(angle.roll);\n    Serial.print("angle pitch : \\t");\n    Serial.println(angle.pitch);\n    Serial.print("angle yaw : \\t");\n    Serial.println(angle.yaw);  \n}\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getheight",children:"getHeight()"}),"\n",(0,i.jsx)(n.h4,{id:"description-44",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a getter function gets the current height of the drone from the object directly below its IR sensor."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-44",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getHeight()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-44",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-44",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"height:"})," The current height above the object directly below the drone\u2019s IR height sensor as an int (mm)."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-44",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-44",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n}\n\nvoid loop(){\n    int height;\n\n    CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);   //link module mode change => Active\n    height = CoDrone.getHeight();                           //save request data\n    delay(100);\n\n    CoDrone.Send_LinkModeBroadcast(LinkModeMute);           //link module mode change => Mute\n    delay(100);\n\n    Serial.println("");\n    Serial.println("--------- Now -----------");\n    Serial.print("height : \\t");\n    Serial.println(height); \n}\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getoptflowposition",children:"getOptFlowPosition()"}),"\n",(0,i.jsx)(n.h4,{id:"description-45",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function gets the x and y coordinates from the optical flow sensor. Keep in mind, the positioning does not take rotation into account."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-45",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getOptFlowPosition()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-45",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-45",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"struct"})," optdata:"]})," Returns a struct with optical flow sensor data"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-45",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-45",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);  \n}\n\nvoid loop(){\n    // Struct for get optical flow sensor data\n    optdata opt;\n\n    CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);   //link module mode change => Active\n    opt = CoDrone.getOptFlowPosition();                     //save request data\n    delay(100);\n\n    CoDrone.Send_LinkModeBroadcast(LinkModeMute);           //link module mode change => Mute\n    delay(100);\n\n    Serial.println("");\n    Serial.println("--------- Now -----------");\n    Serial.print("opt x : \\t");\n    Serial.println(opt.x);\n    Serial.print("opt y : \\t");\n    Serial.println(opt.y);  \n}\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getpressure",children:"getPressure()"}),"\n",(0,i.jsx)(n.h4,{id:"description-46",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This is a getter function gets the data from the barometer sensor."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-46",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getPressure()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-46",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-46",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"pressure:"})," The barometer\u2019s air pressure in millibars at (0.13 resolution)."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-46",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-46",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);  \n}\n\nvoid loop(){\n    int pressure;\n\n    CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);   //link module mode change => Active\n    pressure = CoDrone.getPressure();                       //save request data\n    delay(100);\n\n    CoDrone.Send_LinkModeBroadcast(LinkModeMute);           //link module mode change => Mute\n    delay(100);\n\n    Serial.println("");\n    Serial.println("--------- Now -----------");\n    Serial.print("pressure : \\t");\n    Serial.println(pressure);   \n}\n'})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"getstate",children:"getState()"}),"\n",(0,i.jsx)(n.h4,{id:"description-47",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function gets the state of the drone, as in whether it\u2019s: ready, takeoff, flight, flip, stop, landing, reverse, accident, error."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-47",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getState()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-47",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-47",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"enum"})," state:"]})," Returns an enum value (fMode_Ready, fMode_TakeOff, fMode_Flight, fMode_Flip, fMode_Stop, fMode_Landing, fMode_Reverse, fMode_Accident, fMode_Error)."]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-47",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-47",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    int state;\n\n    state = CoDrone.getState();                       //save request data\n    delay(50);\n\n    if(state == fMode_Ready)\n        CoDrone.takeoff();\n\n    CoDrone.hover(3);\n    CoDrone.land();\n}\nvoid loop(){\n\n}\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.h3,{id:"gettrim",children:"getTrim()"}),"\n",(0,i.jsx)(n.h4,{id:"description-48",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"This function gets the current trim values of the drone."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-48",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getTrim()"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-48",children:"Parameters"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h4,{id:"returns-48",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.em,{children:"struct"})," trimdata:"]})," Returns a struct with trim data"]}),"\n",(0,i.jsx)(n.h4,{id:"example-code-48",children:"Example Code"}),"\n",(0,i.jsx)(n.h5,{id:"arduino-48",children:"Arduino"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'//Arduino code\n//Code for print request data to serial monitor\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);  \n}\n\nvoid loop(){\n    // Struct for get trim data\n    trimdata trim;\n\n    CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);   //link module mode change => Active\n    trim = CoDrone.getTrim();                               //save request data\n    delay(100);\n\n    CoDrone.Send_LinkModeBroadcast(LinkModeMute);           //link module mode change => Mute\n    delay(100);\n\n    Serial.println("");\n    Serial.println("--------- Now -----------");\n    Serial.print("trim roll : \\t");\n    Serial.println(trim.roll);\n    Serial.print("trim pitch : \\t");\n    Serial.println(trim.pitch);\n    Serial.print("trim yaw : \\t");\n    Serial.println(trim.yaw);\n    Serial.print("trim throttle : \\t");\n    Serial.println(trim.throttle);  \n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var i=r(6540);const o={},l=i.createContext(o);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);