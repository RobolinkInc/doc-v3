"use strict";(self.webpackChunkdoc_v_3=self.webpackChunkdoc_v_3||[]).push([[1345],{1897:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>t,metadata:()=>s,toc:()=>a});var o=r(4848),i=r(8453);const t={title:"Function Documentation",slug:"Function-Documentation",customHeadElements:['<link rel="manifest" href="manifest.json" />']},l=void 0,s={id:"CoDronePro_Lite/Python/page4",title:"Function Documentation",description:"window.print()}>Print",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/CoDronePro_Lite/Python/page4.md",sourceDirName:"CoDronePro_Lite/Python",slug:"/CoDronePro_Lite/Python/Function-Documentation",permalink:"/ko/docs/CoDronePro_Lite/Python/Function-Documentation",draft:!1,unlisted:!1,editUrl:"https://github.com/RobolinkInc/doc-v3/tree/main/docs/docs/CoDronePro_Lite/Python/page4.md",tags:[],version:"current",frontMatter:{title:"Function Documentation",slug:"Function-Documentation",customHeadElements:['<link rel="manifest" href="manifest.json" />']},sidebar:"CoDronePro_Lite",previous:{title:"Python",permalink:"/ko/docs/CoDronePro_Lite/Python/"},next:{title:"Arduino",permalink:"/ko/docs/CoDronePro_Lite/Arduino/"}},d={},a=[{value:"Connection",id:"connection",level:2},{value:"disconnect()",id:"disconnect",level:3},{value:"Description",id:"description",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example Code",id:"example-code",level:4},{value:"pair()",id:"pair",level:3},{value:"Description",id:"description-1",level:4},{value:"Syntax",id:"syntax-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example Code",id:"example-code-1",level:4},{value:"Flight Commands (Start/Stop)",id:"flight-commands-startstop",level:2},{value:"takeoff()",id:"takeoff",level:3},{value:"Description",id:"description-2",level:4},{value:"Syntax",id:"syntax-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example Code",id:"example-code-2",level:4},{value:"land()",id:"land",level:3},{value:"Description",id:"description-3",level:4},{value:"Syntax",id:"syntax-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example Code",id:"example-code-3",level:4},{value:"emergency_stop()",id:"emergency_stop",level:3},{value:"Description",id:"description-4",level:4},{value:"Syntax",id:"syntax-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example Code",id:"example-code-4",level:4},{value:"Flight Commands (Movement)",id:"flight-commands-movement",level:2},{value:"fly_sequence()",id:"fly_sequence",level:3},{value:"Description",id:"description-5",level:4},{value:"Syntax",id:"syntax-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example Code",id:"example-code-5",level:4},{value:"go_to_height()",id:"go_to_height",level:3},{value:"Description",id:"description-6",level:4},{value:"Syntax",id:"syntax-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example Code",id:"example-code-6",level:4},{value:"go()",id:"go",level:3},{value:"Description",id:"description-7",level:4},{value:"Syntax",id:"syntax-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example Code",id:"example-code-7",level:4},{value:"hover()",id:"hover",level:3},{value:"Description",id:"description-8",level:4},{value:"Syntax",id:"syntax-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example Code",id:"example-code-8",level:4},{value:"rotate180()",id:"rotate180",level:3},{value:"Description",id:"description-9",level:4},{value:"Syntax",id:"syntax-9",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example Code",id:"example-code-9",level:4},{value:"turn_degree()",id:"turn_degree",level:3},{value:"Description",id:"description-10",level:4},{value:"Syntax",id:"syntax-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Example Code",id:"example-code-10",level:4},{value:"turn()",id:"turn",level:3},{value:"Description",id:"description-11",level:4},{value:"Syntax",id:"syntax-11",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Example Code",id:"example-code-11",level:4},{value:"Flight Variables",id:"flight-variables",level:2},{value:"get_pitch()",id:"get_pitch",level:3},{value:"Description",id:"description-12",level:4},{value:"Syntax",id:"syntax-12",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Example Code",id:"example-code-12",level:4},{value:"get_roll()",id:"get_roll",level:3},{value:"Description",id:"description-13",level:4},{value:"Syntax",id:"syntax-13",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Example Code",id:"example-code-13",level:4},{value:"get_throttle()",id:"get_throttle",level:3},{value:"Description",id:"description-14",level:4},{value:"Syntax",id:"syntax-14",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Example Code",id:"example-code-14",level:4},{value:"get_yaw()",id:"get_yaw",level:3},{value:"Description",id:"description-15",level:4},{value:"Syntax",id:"syntax-15",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Example Code",id:"example-code-15",level:4},{value:"move()",id:"move",level:3},{value:"Description",id:"description-16",level:4},{value:"Syntax",id:"syntax-16",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Example Code",id:"example-code-16",level:4},{value:"set_pitch()",id:"set_pitch",level:3},{value:"Description",id:"description-17",level:4},{value:"Syntax",id:"syntax-17",level:4},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Example Code",id:"example-code-17",level:4},{value:"set_roll()",id:"set_roll",level:3},{value:"Description",id:"description-18",level:4},{value:"Syntax",id:"syntax-18",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Example Code",id:"example-code-18",level:4},{value:"set_throttle()",id:"set_throttle",level:3},{value:"Description",id:"description-19",level:4},{value:"Syntax",id:"syntax-19",level:4},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Example Code",id:"example-code-19",level:4},{value:"set_yaw()",id:"set_yaw",level:3},{value:"Description",id:"description-20",level:4},{value:"Syntax",id:"syntax-20",level:4},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Example Code",id:"example-code-20",level:4},{value:"LED",id:"led",level:2},{value:"arm_color()",id:"arm_color",level:3},{value:"Description",id:"description-21",level:4},{value:"Syntax",id:"syntax-21",level:4},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Example Code",id:"example-code-21",level:4},{value:"LED Color Options",id:"led-color-options",level:5},{value:"arm_default_color()",id:"arm_default_color",level:3},{value:"Description",id:"description-22",level:4},{value:"Syntax",id:"syntax-22",level:4},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Example Code",id:"example-code-22",level:4},{value:"arm_default_pattern()",id:"arm_default_pattern",level:3},{value:"Description",id:"description-23",level:4},{value:"Syntax",id:"syntax-23",level:4},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Example Code",id:"example-code-23",level:4},{value:"arm_off()",id:"arm_off",level:3},{value:"Description",id:"description-24",level:4},{value:"Syntax",id:"syntax-24",level:4},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Example Code",id:"example-code-24",level:4},{value:"arm_pattern()",id:"arm_pattern",level:3},{value:"Description",id:"description-25",level:4},{value:"Syntax",id:"syntax-25",level:4},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Example Code",id:"example-code-25",level:4},{value:"arm_strobe()",id:"arm_strobe",level:3},{value:"Description",id:"description-26",level:4},{value:"Syntax",id:"syntax-26",level:4},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Example Code",id:"example-code-26",level:4},{value:"eye_color()",id:"eye_color",level:3},{value:"Description",id:"description-27",level:4},{value:"Syntax",id:"syntax-27",level:4},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Example Code",id:"example-code-27",level:4},{value:"eye_default_color()",id:"eye_default_color",level:3},{value:"Description",id:"description-28",level:4},{value:"Syntax",id:"syntax-28",level:4},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Example Code",id:"example-code-28",level:4},{value:"eye_default_pattern()",id:"eye_default_pattern",level:3},{value:"Description",id:"description-29",level:4},{value:"Syntax",id:"syntax-29",level:4},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Example Code",id:"example-code-29",level:4},{value:"eye_off()",id:"eye_off",level:3},{value:"Description",id:"description-30",level:4},{value:"Syntax",id:"syntax-30",level:4},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Example Code",id:"example-code-30",level:4},{value:"eye_pattern()",id:"eye_pattern",level:3},{value:"Description",id:"description-31",level:4},{value:"Syntax",id:"syntax-31",level:4},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Example Code",id:"example-code-31",level:4},{value:"eye_strobe()",id:"eye_strobe",level:3},{value:"Description",id:"description-32",level:4},{value:"Syntax",id:"syntax-32",level:4},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Example Code",id:"example-code-32",level:4},{value:"reset_default_led()",id:"reset_default_led",level:3},{value:"Description",id:"description-33",level:4},{value:"Syntax",id:"syntax-33",level:4},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Example Code",id:"example-code-33",level:4},{value:"Status Checker",id:"status-checker",level:2},{value:"is_flying()",id:"is_flying",level:3},{value:"Description",id:"description-34",level:4},{value:"Syntax",id:"syntax-34",level:4},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Example Code",id:"example-code-34",level:4},{value:"is_ready_to_fly()",id:"is_ready_to_fly",level:3},{value:"Description",id:"description-35",level:4},{value:"Syntax",id:"syntax-35",level:4},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-35",level:4},{value:"Example Code",id:"example-code-35",level:4},{value:"is_upside_down()",id:"is_upside_down",level:3},{value:"Description",id:"description-36",level:4},{value:"Syntax",id:"syntax-36",level:4},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-36",level:4},{value:"Example Code",id:"example-code-36",level:4},{value:"on_low_battery()",id:"on_low_battery",level:3},{value:"Description",id:"description-37",level:4},{value:"Syntax",id:"syntax-37",level:4},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-37",level:4},{value:"Example Code",id:"example-code-37",level:4},{value:"Sensors",id:"sensors",level:2},{value:"get_accelerometer()",id:"get_accelerometer",level:3},{value:"Description",id:"description-38",level:4},{value:"Syntax",id:"syntax-38",level:4},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-38",level:4},{value:"Example Code",id:"example-code-38",level:4},{value:"get_angular_speed()",id:"get_angular_speed",level:3},{value:"Description",id:"description-39",level:4},{value:"Syntax",id:"syntax-39",level:4},{value:"Parameters",id:"parameters-39",level:4},{value:"Returns",id:"returns-39",level:4},{value:"Example Code",id:"example-code-39",level:4},{value:"get_battery_percentage()",id:"get_battery_percentage",level:3},{value:"Description",id:"description-40",level:4},{value:"Syntax",id:"syntax-40",level:4},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-40",level:4},{value:"Example Code",id:"example-code-40",level:4},{value:"get_battery_voltage()",id:"get_battery_voltage",level:3},{value:"Description",id:"description-41",level:4},{value:"Syntax",id:"syntax-41",level:4},{value:"Parameters",id:"parameters-41",level:4},{value:"Returns",id:"returns-41",level:4},{value:"Example Code",id:"example-code-41",level:4},{value:"get_drone_temp()",id:"get_drone_temp",level:3},{value:"Description",id:"description-42",level:4},{value:"Syntax",id:"syntax-42",level:4},{value:"Parameters",id:"parameters-42",level:4},{value:"Returns",id:"returns-42",level:4},{value:"Example Code",id:"example-code-42",level:4},{value:"get_gyro_angles()",id:"get_gyro_angles",level:3},{value:"Description",id:"description-43",level:4},{value:"Syntax",id:"syntax-43",level:4},{value:"Parameters",id:"parameters-43",level:4},{value:"Returns",id:"returns-43",level:4},{value:"Example Code",id:"example-code-43",level:4},{value:"get_height()",id:"get_height",level:3},{value:"Description",id:"description-44",level:4},{value:"Syntax",id:"syntax-44",level:4},{value:"Parameters",id:"parameters-44",level:4},{value:"Returns",id:"returns-44",level:4},{value:"Example Code",id:"example-code-44",level:4},{value:"get_opt_flow_position()",id:"get_opt_flow_position",level:3},{value:"Description",id:"description-45",level:4},{value:"Syntax",id:"syntax-45",level:4},{value:"Parameters",id:"parameters-45",level:4},{value:"Returns",id:"returns-45",level:4},{value:"Example Code",id:"example-code-45",level:4},{value:"get_pressure()",id:"get_pressure",level:3},{value:"Description",id:"description-46",level:4},{value:"Syntax",id:"syntax-46",level:4},{value:"Parameters",id:"parameters-46",level:4},{value:"Returns",id:"returns-46",level:4},{value:"Example Code",id:"example-code-46",level:4},{value:"get_state()",id:"get_state",level:3},{value:"Description",id:"description-47",level:4},{value:"Syntax",id:"syntax-47",level:4},{value:"Parameters",id:"parameters-47",level:4},{value:"Returns",id:"returns-47",level:4},{value:"Example Code",id:"example-code-47",level:4},{value:"get_trim()",id:"get_trim",level:3},{value:"Description",id:"description-48",level:4},{value:"Syntax",id:"syntax-48",level:4},{value:"Parameters",id:"parameters-48",level:4},{value:"Returns",id:"returns-48",level:4},{value:"Example Code",id:"example-code-48",level:4},{value:"set_plot_sensor()/draw_plot_sensor()",id:"set_plot_sensordraw_plot_sensor",level:3},{value:"Description",id:"description-49",level:4},{value:"Syntax",id:"syntax-49",level:4},{value:"Parameters",id:"parameters-49",level:4},{value:"Returns",id:"returns-49",level:4},{value:"Example Code",id:"example-code-49",level:4}];function h(e){const n={br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("div",{className:"print_div",children:(0,o.jsx)("button",{id:"print_page",onClick:()=>window.print(),children:"Print"})}),"\n",(0,o.jsx)("div",{className:"change_version",children:(0,o.jsx)(n.p,{children:"version 0.0.0"})}),"\n",(0,o.jsx)(n.h2,{id:"connection",children:"Connection"}),"\n",(0,o.jsx)(n.h3,{id:"disconnect",children:"disconnect()"}),"\n",(0,o.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function disconnects with the drone that you're connected to."}),"\n",(0,o.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"disconnect()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\ndrone.hover(1)\ndrone.land()\ndrone.disconnect() # disconnects from drone\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"pair",children:"pair()"}),"\n",(0,o.jsx)(n.h4,{id:"description-1",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:'This function pairs the BLE board to the CoDrone. After establishing a connection, it always waits for 3 seconds before executing the next command. With Python, pair() with no parameters will pair with the last paired CoDrone, which is saved in a file called "PairInfo." If it\'s your first time running pair(), it will just find the nearest CoDrone it can find, then "lock in" with that CoDrone, save it to "PairInfo" and always pair with it until you run pair(drone.Nearest).'}),"\n",(0,o.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"pair()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Nearest:"}),' Nearest in Python, it will pair with the first drone it finds (which may not always be the nearest CoDrone, in some cases, just the first CoDrone it finds). This function can be used to "unlock" the drone from only pairing with the CoDrone it\'s been "locked in" with. Once you\'ve paired with a nearest CoDrone, you can run pair() again with no parameters, and it will only pair with the "locked in" CoDrone.',(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"address:"})," This is the address of the CoDrone. This is the 4-digit number that identifies the CoDrone."]}),"\n",(0,o.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-1",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n# drone.pair(\u201c5349\u201d)\n# drone.pair(drone.Nearest)\n\n# you can set specific port name for pairing especially Windows need/require this \n# drone.pair(port_name = 'COM3')\n# drone.pair('1234', 'COM3')\n# drone.pair(drone.Nearest, 'COM3')\n\ndrone.takeoff()\ndrone.hover(3)\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{className:"section_hr"}),"\n",(0,o.jsx)(n.h2,{id:"flight-commands-startstop",children:"Flight Commands (Start/Stop)"}),"\n",(0,o.jsx)(n.h3,{id:"takeoff",children:"takeoff()"}),"\n",(0,o.jsx)(n.h4,{id:"description-2",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function makes the drone take off and begin hovering. The drone will always hover for 3 seconds in order to stabilize before it executes the next command.\nIf it receives no command for 8 seconds, it will automatically land."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"takeoff()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-2",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff() # CoDrone takes off from ground\n\ndrone.hover(3)\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"land",children:"land()"}),"\n",(0,o.jsx)(n.h4,{id:"description-3",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function makes the drone stop all commands, hovers, and makes a soft landing where it is. The function will also zero-out all of the flight motion variables to 0."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"land()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-3",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\ndrone.hover(3)\ndrone.land() # lands the CoDrone\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"emergency_stop",children:"emergency_stop()"}),"\n",(0,o.jsx)(n.h4,{id:"description-4",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function immediately stops all commands and stops all motors, so the drone will stop flying immediately.\nThe function will also zero-out all of the flight motion variables to 0."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"emergency_stop()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-4",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\ndrone.emergency_stop() # stops commands/motors, falls down\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{className:"section_hr"}),"\n",(0,o.jsx)(n.h2,{id:"flight-commands-movement",children:"Flight Commands (Movement)"}),"\n",(0,o.jsx)(n.h3,{id:"fly_sequence",children:"fly_sequence()"}),"\n",(0,o.jsx)(n.h4,{id:"description-5",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function make drone fly specific shape and hover after finish. The options are square, circle, spiral, triangle, hop, sway, zigzag."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"fly_sequence(sequence)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Sequence:"]})," SQUARE, CIRCLE, SPIRAL, TRIANGLE, HOP, SWAY, ZIGZAG"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-5",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Sequence\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\ndrone.fly_sequence(Sequence.TRIANGLE)   # Fly triangle shape\ndrone.fly_sequence(Sequence.SPIRAL)     # Fly spiral shape\ndrone.fly_sequence(Sequence.SQUARE)     # Fly square shape\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"go_to_height",children:"go_to_height()"}),"\n",(0,o.jsx)(n.h4,{id:"description-6",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a setter function will make the drone fly to the given height above the object directly below its IR sensor (usually the ground).\nIt\u2019s effective between 20 and 2000 millimeters. It uses the IR sensor to continuously check for its height."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"go_to_height(height)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"height:"})," An int from 20 to 2000 in millimeters"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-6",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# Fly 1500mm away from bottom and hover\ndrone.takeoff()\ndrone.go_to_height(1500)\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"go",children:"go()"}),"\n",(0,o.jsx)(n.h4,{id:"description-7",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"A simpler Junior level function that represents positive flight with a direction, but with more natural language. It simply flies in the given direction for the given duration and power."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"go(direction)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"go(direction, duration)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"go(direction, duration, power)"}),(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Direction:"]})," an enum in Python. It\u2019s the direction of the flight, which can be one of the following: FORWARD, BACKWARD, LEFT, RIGHT, UP, and DOWN.",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"duration:"})," the duration of the flight motion in seconds. If undefined, defaults to 1 seconds. If duration is 0, it will turn right indefinitely.",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"power:"})," the power at which the drone flies forward. Takes a value from 0 to 100. Defaults to 50 if not defined."]}),"\n",(0,o.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-7",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Direction\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\ndrone.go(Direction.FORWARD)         # Go forward for 1 second at 50% power\ndrone.go(Direction.UP, 5)           # Go up for 5 seconds at 50% power\ndrone.go(Direction.BACKWARD, 3, 70) # Go backwards for 3 seconds at 70% power\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"hover",children:"hover()"}),"\n",(0,o.jsx)(n.h4,{id:"description-8",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function makes the drone hover for a given amount of time.\nIf you enter a 0 or None, it will hover indefinitely until given a another command."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-8",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"hover(duration)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"duration:"})," the duration of the hovering in seconds."]}),"\n",(0,o.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-8",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\ndrone.hover(3) ## hovers in the air for 3 seconds\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"rotate180",children:"rotate180()"}),"\n",(0,o.jsx)(n.h4,{id:"description-9",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function makes the drone rotate 180 degrees. Only rotates in a random direction, because this is a pre-set flight event in the firmware."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-9",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"rotate180()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-9",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\ndrone.rotate180()\n\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"turn_degree",children:"turn_degree()"}),"\n",(0,o.jsx)(n.h4,{id:"description-10",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"A Senior level function that yaws by a given degree in a given direction.\nThis function takes an input degree in an input direction, and turns until it reaches the given degree. In some instances, the drone may turn past the given degree and need to rotate all the way around again before reaching the correct degree."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-10",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"turn_degree(direction,degree)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Direction:"]})," an enum in Python. It\u2019s the direction of the turn, which can be one of the following: LEFT and RIGHT",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Degree:"]})," an enum in Python. The degree the drone will turn to the right, with its starting position representing 0 degrees,Degree.ANGLE_30, Degree.ANGLE_45, Degree.ANGLE_60, Degree.ANGLE_90, Degree.ANGLE_120, Degree.ANGLE_135, Degree.ANGLE_150, Degree.ANGLE_180, Degree.ANGLE_210, Degree.ANGLE_225, Degree.ANGLE_240, Degree.ANGLE_270, Degree.ANGLE_300, Degree.ANGLE_315, Degree.ANGLE_330"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-10",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Direction, Degree\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\ndrone.turn_degree(Direction.LEFT, Degree.ANGLE_45)  # Turn left 45 degrees\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"turn",children:"turn()"}),"\n",(0,o.jsx)(n.h4,{id:"description-11",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"A function that represents yaw, but with more natural language. It simply turns in the given direction, duration and power."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-11",children:"Syntax"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"turn(direction)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"turn(direction, duration)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"turn(direction, duration, power)"}),(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(n.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Direction:"]})," an enum in Python. It\u2019s the direction of the turn, which can be one of the following: LEFT or RIGHT.",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"duration:"})," the duration of the turn in seconds. If 0, it will turn right indefinitely. Defaults to 1 second if not defined.",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"power:"})," the power at which the drone turns right. Takes a value from 0 to 100. Defaults to 50 if not defined."]}),"\n",(0,o.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-11",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Direction\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\ndrone.turn(Direction.LEFT)          # Turn left for 1 second at -50 power\ndrone.turn(Direction.LEFT, 0)       # Turn left at -50 power indefinitely\ndrone.turn(Direction.RIGHT, 3, 100) # Turn right for 3 seconds at 100 power\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{className:"section_hr"}),"\n",(0,o.jsx)(n.h2,{id:"flight-variables",children:"Flight Variables"}),"\n",(0,o.jsx)(n.h3,{id:"get_pitch",children:"get_pitch()"}),"\n",(0,o.jsx)(n.h4,{id:"description-12",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a getter function that gets the value of the pitch variable."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-12",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_pitch()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"power:"})," returns the power of the pitch variable (int)"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-12",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# Print current pitch with getter function\nprint("Current pitch : ", drone.get_pitch())\ndrone.close()\n'})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_roll",children:"get_roll()"}),"\n",(0,o.jsx)(n.h4,{id:"description-13",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a getter function that gets the value of the roll variable."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-13",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_roll()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-13",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"power:"})," The power of the roll variable (int)"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-13",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# Print current roll with getter function\nprint("Current Roll : ", drone.get_roll())\ndrone.close()\n'})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_throttle",children:"get_throttle()"}),"\n",(0,o.jsx)(n.h4,{id:"description-14",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a getter function that gets the value of the throttle variable."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-14",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_throttle()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-14",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"power:"})," The power of the throttle variable (int)"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-14",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# Print current throttle with getter function\nprint("Current throttle : ", drone.get_throttle())\ndrone.close()\n'})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_yaw",children:"get_yaw()"}),"\n",(0,o.jsx)(n.h4,{id:"description-15",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a getter function that gets the value of the yaw variable."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-15",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_yaw()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-15",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"power:"})," The power of the yaw variable (int)"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-15",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# Print current yaw with getter function\nprint("Current yaw : ", drone.get_yaw())\ndrone.close()\n'})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"move",children:"move()"}),"\n",(0,o.jsx)(n.h4,{id:"description-16",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"You can use this function to create more complex flight movements. With no parameters, move() will just run based on whatever the flight variables have been set to with functions like set_pitch() and set_throttle() indefinitely. You can also run it for a certain duration. The function also takes multiple parameters, where you can set roll, pitch, yaw, and throttle all at once. You can run it infinitely with 4 parameters, or you can run it for a given duration with 5 parameters. If the drone is not flying, nothing will happen."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-16",children:"Syntax"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"move()"})," runs infinitely",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"move(duration)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"move(roll, pitch, yaw, throttle)"})," runs infinitely",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"move(duration, roll, pitch, yaw, throttle)"}),(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(n.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"duration:"})," the duration of the flight motion in seconds. If 0, the duration is infinity.",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"roll:"})," the power of the roll, which is an int from -100 to 100",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"pitch:"})," the power of the pitch, which is an int from -100 to 100",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"yaw:"})," the power of the yaw, which is an int from -100 to 100",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"throttle:"})," the power of the throttle, which is an int from -100 to 100",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(n.h4,{id:"returns-16",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-16",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\n\ndrone.move()                  # Move indefinitely based on the current value of flight variables\ndrone.move(5)                 # Move 5 seconds based on the current value of flight variables\ndrone.move(0, 0, 30, 30)      # Move up(throttle) and turn left(yaw) indefinitely\ndrone.move(5, 0, 0, 50, 50)   # Move up(throttle) and turn left(yaw) for 5 seconds\n\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"set_pitch",children:"set_pitch()"}),"\n",(0,o.jsx)(n.h4,{id:"description-17",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a setter function that allows you to set the pitch variable."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-17",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"set_pitch(power)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"power:"})," An int from -100 to 100 that sets the pitch variable. The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards."]}),"\n",(0,o.jsx)(n.h4,{id:"returns-17",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-17",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\n# Drone goes right for 1 second with 50 power\ndrone.set_pitch(50)\ndrone.move(1)\n\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"set_roll",children:"set_roll()"}),"\n",(0,o.jsx)(n.h4,{id:"description-18",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a setter function that allows you to set the roll variable."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-18",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"set_roll(power)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"power:"})," An int from -100 to 100 that sets the roll variable. The number represents the direction and power of the output for that flight motion variable. Negative roll is left, positive roll is right."]}),"\n",(0,o.jsx)(n.h4,{id:"returns-18",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-18",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\n# Drone goes right for 1 second with 50 power\ndrone.set_roll(50)\ndrone.move(1)\n\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"set_throttle",children:"set_throttle()"}),"\n",(0,o.jsx)(n.h4,{id:"description-19",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a setter function that allows you to set the throttle variable."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-19",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"set_throttle(power)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"power:"})," An int from -100 to 100 that sets the throttle variable. The number represents the direction and power of the output for that flight motion variable. Negative throttle descends, positive throttle ascends."]}),"\n",(0,o.jsx)(n.h4,{id:"returns-19",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-19",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\n# Drone goes up for 1 second with 50 power\ndrone.set_throttle(50)\ndrone.move(1)\n\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"set_yaw",children:"set_yaw()"}),"\n",(0,o.jsx)(n.h4,{id:"description-20",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a setter function that allows you to set the yaw variable."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-20",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"set_yaw(power)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"power:"})," An int from -100 to 100 that sets the yaw variable. The number represents the direction and power of the output for that flight motion variable. Negative yaw turns left, positive yaw turns right."]}),"\n",(0,o.jsx)(n.h4,{id:"returns-20",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-20",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\n\n# Drone turns right for 1 second with 50 power\ndrone.set_yaw(50)\ndrone.move(1)\n\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{className:"section_hr"}),"\n",(0,o.jsx)(n.h2,{id:"led",children:"LED"}),"\n",(0,o.jsx)(n.h3,{id:"arm_color",children:"arm_color()"}),"\n",(0,o.jsx)(n.h4,{id:"description-21",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function sets the LED color of the arms using RGB values and their brightness with value from 1 - 100."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-21",children:"Syntax"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"arm_color(color, brightness)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"arm_color(red, green, blue, brightness)"})]}),"\n",(0,o.jsx)(n.h4,{id:"parameters-21",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Color:"]}),' an enum, which can be set using predefined colors out of the list below in "Example Code" under "LED Color Options"',(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"green:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"blue:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"brightness:"})," in value from 0 to 100, which represents the brightness of the light"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-21",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-21",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Color\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.arm_color(Color.Red, 100)        # set color to red using Color\ndrone.arm_color(255, 0, 0, 100)        # set color to red using RGB\ndrone.close()\n"})}),"\n",(0,o.jsx)(n.h5,{id:"led-color-options",children:"LED Color Options"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-LED",metastring:"Color Options",children:"    AliceBlue, AntiqueWhite, Aqua,\n    Aquamarine, Azure, Beige,\n    Bisque, Black, BlanchedAlmond,\n    Blue, BlueViolet, Brown,\n    BurlyWood, CadetBlue, Chartreuse,\n    Chocolate, Coral, CornflowerBlue,\n    Cornsilk, Crimson, Cyan,\n    DarkBlue, DarkCyan, DarkGoldenRod,\n    DarkGray, DarkGreen, DarkKhaki,\n    DarkMagenta, DarkOliveGreen, DarkOrange,\n    DarkOrchid, DarkRed, DarkSalmon,\n    DarkSeaGreen, DarkSlateBlue, DarkSlateGray,\n    DarkTurquoise, DarkViolet, DeepPink,\n    DeepSkyBlue, DimGray, DodgerBlue,\n    FireBrick, FloralWhite, ForestGreen,\n    Fuchsia, Gainsboro, GhostWhite,\n    Gold, GoldenRod, Gray,\n    Green, GreenYellow, HoneyDew,\n    HotPink, IndianRed, Indigo,\n    Ivory, Khaki, Lavender,\n    LavenderBlush, LawnGreen, LemonChiffon,\n    LightBlue, LightCoral, LightCyan,\n    LightGoldenRodYellow, LightGray, LightGreen,\n    LightPink, LightSalmon, LightSeaGreen,\n    LightSkyBlue, LightSlateGray, LightSteelBlue,\n    LightYellow, Lime, LimeGreen,\n    Linen, Magenta, Maroon,\n    MediumAquaMarine, MediumBlue, MediumOrchid,\n    MediumPurple, MediumSeaGreen, MediumSlateBlue,\n    MediumSpringGreen, MediumTurquoise, MediumVioletRed,\n    MidnightBlue, MintCream, MistyRose,\n    Moccasin, NavajoWhite, Navy,\n    OldLace, Olive, OliveDrab,\n    Orange, OrangeRed, Orchid,\n    PaleGoldenRod, PaleGreen, PaleTurquoise,\n    PaleVioletRed, PapayaWhip, PeachPuff,\n    Peru, Pink, Plum,\n    PowderBlue, Purple, RebeccaPurple,\n    Red, RosyBrown, RoyalBlue,\n    SaddleBrown, Salmon, SandyBrown,\n    SeaGreen, SeaShell, Sienna,\n    Silver, SkyBlue, SlateBlue,\n    SlateGray, Snow, SpringGreen,\n    SteelBlue, Tan, Teal,\n    Thistle, Tomato, Turquoise,\n    Violet, Wheat, White,\n    WhiteSmoke, Yellow, YellowGreen,\n    EndOfColors\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"arm_default_color",children:"arm_default_color()"}),"\n",(0,o.jsx)(n.h4,{id:"description-22",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function sets the default LED color of the eyes as well as the mode, so it will remain that color even after powering off and back on. The colors set are using RGB values."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-22",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"arm_default_color(red, green, blue, brightness)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-22",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"green:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"blue:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"brightness:"})," in value from 0 to 100, which represents the brightness of the light"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-22",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-22",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Mode\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# set default arm color to an RGB of (0, 0, 100) with full brightness\ndrone.arm_default_color(0, 0, 100, 100)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"arm_default_pattern",children:"arm_default_pattern()"}),"\n",(0,o.jsx)(n.h4,{id:"description-23",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function sets the default color of the arm LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-23",children:"Syntax"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"arm_default_pattern(color, mode)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"arm_default_pattern(color, mode, speed)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"arm_default_pattern(red, green, blue, mode)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"arm_default_pattern(red, green, blue, mode, speed)"})]}),"\n",(0,o.jsx)(n.h4,{id:"parameters-23",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Color:"]})," an enum, which can be set using predefined colors out of the list under ",(0,o.jsx)("a",{href:"#led-color-options",children:'"LED Color Options"'}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"green:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"blue:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Mode:"]})," an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING, PULSE, REVERSE_PULSE",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"speed:"})," int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest."]}),"\n",(0,o.jsx)(n.h4,{id:"returns-23",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-23",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Mode\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# set default arm pattern to RGB (0, 125, 155) and double blink quickly\ndrone.arm_default_pattern(0, 125, 155, Mode.DOUBLE_BLINK, 10)\ndrone.close()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"arm_off",children:"arm_off()"}),"\n",(0,o.jsx)(n.h4,{id:"description-24",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function turns off the arm LEDs"}),"\n",(0,o.jsx)(n.h4,{id:"syntax-24",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"arm_off()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-24",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-24",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-24",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# turn off the arms\ndrone.arm_off()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"arm_pattern",children:"arm_pattern()"}),"\n",(0,o.jsx)(n.h4,{id:"description-25",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function sets the color of the arm LED lights to flash in a particular pre-set pattern at a given speed."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-25",children:"Syntax"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"arm_pattern(color, mode)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"arm_pattern(color, mode, speed)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"arm_pattern(red, green, blue, mode)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"arm_pattern(red, green, blue, mode, speed)"})]}),"\n",(0,o.jsx)(n.h4,{id:"parameters-25",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Color:"]})," an enum, which can be set using predefined colors out of the list under ",(0,o.jsx)("a",{href:"#led-color-options",children:'"LED Color Options"'}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"green:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n**blue: int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Mode:"]})," an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING, PULSE, REVERSE_PULSE",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"speed:"})," int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest."]}),"\n",(0,o.jsx)(n.h4,{id:"returns-25",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-25",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Mode, Color\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.arm_pattern(Color.Red, Mode.DOUBLE_BLINK, 200)        # Set arms to double blink red slowly using Color\ndrone.arm_pattern(0, 100, 0, Mode.PULSE, 200)               # Set arms to pulse green slowly using RGB\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"arm_strobe",children:"arm_strobe()"}),"\n",(0,o.jsx)(n.h4,{id:"description-26",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function makes the arms to strobe in various colors"}),"\n",(0,o.jsx)(n.h4,{id:"syntax-26",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"arm_strobe()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-26",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-26",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-26",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# strobe the arms\ndrone.arm_strobe()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"eye_color",children:"eye_color()"}),"\n",(0,o.jsx)(n.h4,{id:"description-27",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function sets the LED color of the arms using RGB values and their brightness with value a from 1 - 100."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-27",children:"Syntax"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"eye_color(color, brightness)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"eye_color(red, green, blue, brightness)"})]}),"\n",(0,o.jsx)(n.h4,{id:"parameters-27",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Color:"]})," an enum, which can be set using predefined colors out of the list under ",(0,o.jsx)("a",{href:"#led-color-options",children:'"LED Color Options"'}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"green:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"blue:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"brightness:"})," in value from 0 to 100, which represents the brightness of the light"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-27",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-27",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Color\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.eye_color(Color.Red, 100)         # set color to red using Color\ndrone.eye_color(255, 0, 0, 100)         # set color to red using RGB\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"eye_default_color",children:"eye_default_color()"}),"\n",(0,o.jsx)(n.h4,{id:"description-28",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function sets the default LED color of the eyes using RGB values and their brightness with a value from 1 - 100. This means the color will remain, even after the CoDrone has been powered off and back on."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-28",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"eye_default_color(red, green, blue, brightness)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-28",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"green:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"blue:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"brightness:"})," in value from 0 to 100, which represents the brightness of the light"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-28",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-28",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Mode\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# set default eye color to an RGB of (0, 0, 100) with full brightness\ndrone.eye_default_color(0, 0, 100, 100)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"eye_default_pattern",children:"eye_default_pattern()"}),"\n",(0,o.jsx)(n.h4,{id:"description-29",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function sets the default color of the eyes LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-29",children:"Syntax"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"eye_default_pattern(color, mode)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"eye_default_pattern(color, mode, speed)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"eye_default_pattern(red, green, blue, mode)"}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.code,{children:"eye_default_pattern(red, green, blue, mode, speed)"})]}),"\n",(0,o.jsx)(n.h4,{id:"parameters-29",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Color:"]})," an enum, which can be set using predefined colors out of the list under ",(0,o.jsx)("a",{href:"#led-color-options",children:'"LED Color Options"'}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"green:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"blue:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Mode:"]})," an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"speed:"})," int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-29",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-29",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Mode\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# set default eye pattern to RGB (0, 125, 155) and double blink slowly\ndrone.eye_default_pattern(0, 125, 155, Mode.DOUBLE_BLINK, 200)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"eye_off",children:"eye_off()"}),"\n",(0,o.jsx)(n.h4,{id:"description-30",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function turns off the eye LEDs"}),"\n",(0,o.jsx)(n.h4,{id:"syntax-30",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"eye_off()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-30",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-30",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-30",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# turn off the eyes\ndrone.eye_off()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"eye_pattern",children:"eye_pattern()"}),"\n",(0,o.jsx)(n.h4,{id:"description-31",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function sets the color of the eye LED lights to flash in a particular pre-set pattern at a given speed."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-31",children:"Syntax"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"eye_pattern(color, mode)"}),(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.code,{children:"eye_pattern(color, mode, speed)"}),(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.code,{children:"eye_pattern(red, green, blue, mode)"}),(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.code,{children:"eye_pattern(red, green, blue, mode, speed)"})]}),"\n",(0,o.jsx)(n.h4,{id:"parameters-31",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Color:"]})," an enum, which can be set using predefined colors out of the list under ",(0,o.jsx)("a",{href:"#led-color-options",children:'"LED Color Options"'}),(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"red:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"green:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"blue:"})," int value from 0 to 255",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"enum"})," Mode:"]})," an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"speed:"})," int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-31",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-31",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Color, Mode\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.eye_pattern(Color.Red, Mode.BLINK, 1)            # Set eyes to blink red slowly using Color\ndrone.eye_pattern(255, 0, 0, Mode.DIMMING, 200)        # Set eyes to dim red slowly using RGB\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"eye_strobe",children:"eye_strobe()"}),"\n",(0,o.jsx)(n.h4,{id:"description-32",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function makes the arms to strobe in various colors"}),"\n",(0,o.jsx)(n.h4,{id:"syntax-32",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"eye_strobe()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-32",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-32",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-32",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# strobe the eyes\ndrone.eye_strobe()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"reset_default_led",children:"reset_default_led()"}),"\n",(0,o.jsx)(n.h4,{id:"description-33",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function sets the LED color of the eyes and arms back to red and sets the mode to SOLID, which is the original default color."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-33",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"reset_default_led()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-33",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-33",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-33",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.reset_default_led()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{className:"section_hr"}),"\n",(0,o.jsx)(n.h2,{id:"status-checker",children:"Status Checker"}),"\n",(0,o.jsx)(n.h3,{id:"is_flying",children:"is_flying()"}),"\n",(0,o.jsx)(n.h4,{id:"description-34",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function checks whether the drone is flying and returns a boolean"}),"\n",(0,o.jsx)(n.h4,{id:"syntax-34",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"is_flying()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-34",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-34",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Boolean:"})," Returns True/False whether the drone is flying"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-34",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\n#land if flying.\nif drone.is_flying():\n    drone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"is_ready_to_fly",children:"is_ready_to_fly()"}),"\n",(0,o.jsx)(n.h4,{id:"description-35",children:"Description"}),"\n",(0,o.jsxs)(n.p,{children:["This function checks whether the drone is ready to fly by returning a boolean.",(0,o.jsx)("br",{}),"The drone is ready to fly if it is oriented right-side up, and not flying."]}),"\n",(0,o.jsx)(n.h4,{id:"syntax-35",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"is_ready_to_fly()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-35",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-35",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Boolean:"})," Returns True/False whether the drone is ready to fly."]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-35",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n#land if flying.\nif drone.is_ready_to_fly():\n    drone.takeoff()\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h3,{id:"is_upside_down",children:"is_upside_down()"}),"\n",(0,o.jsx)(n.h4,{id:"description-36",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function checks whether the drone is upside-down and returns a boolean"}),"\n",(0,o.jsx)(n.h4,{id:"syntax-36",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"is_upside_down()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-36",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-36",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Boolean:"})," Returns True/False whether the drone is upside-down"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-36",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# takeoff when drone isn\u2019t upside down\nif not drone.is_upside_down():\n    drone.takeoff()\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"on_low_battery",children:"on_low_battery()"}),"\n",(0,o.jsx)(n.h4,{id:"description-37",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"Add callback function when CoDrone battery percentage is lower than 50%"}),"\n",(0,o.jsx)(n.h4,{id:"syntax-37",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"on_low_battery(function)"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-37",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"function:"})," a callback function when battery is lower than 50%"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-37",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-37",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone\nfrom CoDrone import Mode\n\n# define function for change drone\'s arm LED green\ndef set_arm_green():\n    drone.set_arm_LED(0,255,0, Mode.SOLID)\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n#set eventhandler to run self-defined "set_arm_green" function\ndrone.on_low_battery(set_arm_green)\ndrone.close()\n'})}),"\n",(0,o.jsx)("hr",{className:"section_hr"}),"\n",(0,o.jsx)(n.h2,{id:"sensors",children:"Sensors"}),"\n",(0,o.jsx)(n.h3,{id:"get_accelerometer",children:"get_accelerometer()"}),"\n",(0,o.jsx)(n.h4,{id:"description-38",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function gets the accelerometer sensor data, which returns x, y, and z."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-38",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_accelerometer()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-38",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-38",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"class"})," AccelData:"]})," Returns an acceleration class with x-, y-, and z-acceleration levels"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-38",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# print the acceleration of drone\nacceleration = drone.get_accelerometer()\nprint(acceleration.X, acceleration.Y, acceleration.Z)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_angular_speed",children:"get_angular_speed()"}),"\n",(0,o.jsx)(n.h4,{id:"description-39",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function gets the data from the gyrometer sensor for the roll, pitch, and yaw angular speed."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-39",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_angular_speed()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-39",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-39",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"class"})," GyroAngleData:"]})," Returns a class with angular speed data"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-39",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# print the angular speed of drone\ngyrodata = drone.get_angular_speed()\nprint(gyrodata.ROLL, gyrodata.PITCH, gyrodata.YAW)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_battery_percentage",children:"get_battery_percentage()"}),"\n",(0,o.jsx)(n.h4,{id:"description-40",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function gets the battery percentage of the drone, returning a value from 0 to 100."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-40",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_battery_percentage()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-40",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-40",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"percentage:"})," The battery\u2019s percentage as an integer from 0 - 100."]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-40",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\ndrone.takeoff()\n\n# stop the drone if battery is lower than 10 percent.\nbattery = drone.get_battery_percentage()\nif battery < 10:\n    drone.emergency_stop()\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_battery_voltage",children:"get_battery_voltage()"}),"\n",(0,o.jsx)(n.h4,{id:"description-41",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function gets the voltage of the battery."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-41",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_battery_voltage()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-41",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-41",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"voltage:"})," The voltage of the battery as an a float"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-41",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# print the battery voltage of drone.\nbattery = drone.get_battery_voltage()\nprint(battery)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_drone_temp",children:"get_drone_temp()"}),"\n",(0,o.jsx)(n.h4,{id:"description-42",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a getter function gets the data from the drone\u2019s temperature sensor. Importantly, it reads the drone\u2019s temperature, not the air around it."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-42",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_drone_temp()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-42",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-42",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"temperature:"})," The temperature in Celsius as an integer."]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-42",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n## print the temperature of drone\ntemperature = drone.get_drone_temp()\nprint(temperature)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_gyro_angles",children:"get_gyro_angles()"}),"\n",(0,o.jsx)(n.h4,{id:"description-43",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function gets the data from the gyrometer sensor to determine the roll, pitch, and yaw as angles."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-43",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_gyro_angles()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-43",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-43",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"class"})," AngleData:"]})," Returns a class that contains angle data"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# print the angles of drone\nGyroAngles = drone.get_gyro_angles()\nprint(GyroAngles.ROLL, GyroAngles.PITCH, GyroAngles.YAW)\ndrone.close()\n"})}),"\n",(0,o.jsx)(n.h4,{id:"example-code-43",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# print the angles of drone\nGyroAngles = drone.get_gyro_angles()\nprint(GyroAngles.ROLL, GyroAngles.PITCH, GyroAngles.YAW)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_height",children:"get_height()"}),"\n",(0,o.jsx)(n.h4,{id:"description-44",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a getter function gets the current height of the drone from the object directly below its IR sensor."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-44",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_height()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-44",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-44",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"height:"})," The current height above the object directly below the drone\u2019s IR height sensor as an int (mm)."]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-44",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone import Direction\nimport time\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\n\n# fly between 500mm and 1000mm\nfor i in range(200):\n    height = drone.get_height()\n    if height > 1000:\n        drone.go(Direction.DOWN)\n    elif height < 500:\n        drone.go(Direction.UP)\n    time.sleep(0.1)\n\ndrone.land()\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_opt_flow_position",children:"get_opt_flow_position()"}),"\n",(0,o.jsx)(n.h4,{id:"description-45",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function gets the x and y coordinates from the optical flow sensor. Keep in mind, the positioning does not take rotation into account."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-45",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_opt_flow_position()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-45",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-45",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"class"})," OptFlowData:"]})," it returns a class in Python indicating optical flow position"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-45",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# print the optical flow position x,y value\nposition = drone.get_opt_flow_position()\nprint(position.X, position.Y)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_pressure",children:"get_pressure()"}),"\n",(0,o.jsx)(n.h4,{id:"description-46",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is a getter function gets the data from the barometer sensor."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-46",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"getPressure()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-46",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-46",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"pressure:"})," The barometer\u2019s air pressure in millibars at (0.13 resolution)."]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-46",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# print the pressure\npressure = drone.get_pressure()\nprint(pressure)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_state",children:"get_state()"}),"\n",(0,o.jsx)(n.h4,{id:"description-47",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function gets the state of the drone, as in whether it\u2019s: ready, takeoff, flight, flip, stop, landing, reverse, accident, error."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-47",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_state()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-47",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-47",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"string"})," state"]}),": Returns a string indicating a state (READY, TAKE_OFF, FLIGHT, FLIP, STOP, LANDING, REVERSE, ACCIDENT, ERROR)"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-47",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n# take off the drone if state is not on flight\nstate = drone.get_state()\nif state != "FLIGHT":\n    drone.takeoff()\n\ndrone.hover(3)\ndrone.land()\ndrone.close()\n'})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"get_trim",children:"get_trim()"}),"\n",(0,o.jsx)(n.h4,{id:"description-48",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function gets the current trim values of the drone."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-48",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"get_trim()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-48",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"returns-48",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"class"})," TrimData:"]})," returns a class indicating trim levels"]}),"\n",(0,o.jsx)(n.h4,{id:"example-code-48",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\n#print current drone's trim value\ntrim = drone.get_trim()\nprint(trim.ROLL, trim.PITCH, trim.YAW, trim.THROTTLE)\ndrone.close()\n"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.h3,{id:"set_plot_sensordraw_plot_sensor",children:"set_plot_sensor()/draw_plot_sensor()"}),"\n",(0,o.jsx)(n.h4,{id:"description-49",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This function is used for drawing sensor data.  The function should be used in pairs, with set_plot_sensor() starting the recording process, and draw_plot_sensor() doing the actual drawing process.  You can plot the height sensor, the temperature sensor, the gyro angles, gyro raw sensor values, the image flow sensor, and the accelerometer sensor."}),"\n",(0,o.jsx)(n.h4,{id:"syntax-49",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"set_plot_sensor(sensor)/draw_plot_sensor()"})}),"\n",(0,o.jsx)(n.h4,{id:"parameters-49",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.em,{children:"class"})," PlotType:"]})," PlotType.height, PlotType.angle, PlotType.temperature, PlotType.gyro, PlotType.image_flow, PlotType.accel"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-49",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"None"}),"\n",(0,o.jsx)(n.h4,{id:"example-code-49",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#Python code\nimport CoDrone\nfrom CoDrone.protocol import PlotType\nimport time\n\ndrone= CoDrone.CoDrone()\ndrone.pair(drone.Nearest)\n\n# set up sensor for plotting. It will grab sensor data every second\ndrone.set_plot_sensor(PlotType.height)\n# drone.set_plot_sensor(PlotType.height, PlotType.angle, PlotType.temperature, PlotType.gyro, PlotType.image_flow, PlotType.accel)\n# PlotType.angle, PlotType.temperature, PlotType.gyro, PlotType.image_flow, PlotType.accel\ndrone.takeoff()\ntime.sleep(5)\ndrone.land()\ndrone.draw_plot_sensor()\ndrone.close()\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>s});var o=r(6540);const i={},t=o.createContext(i);function l(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);